
MERC2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010250  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  080103e0  080103e0  000203e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ae0  08010ae0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010ae0  08010ae0  00020ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ae8  08010ae8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ae8  08010ae8  00020ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010aec  08010aec  00020aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010af0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000052a8  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054a8  200054a8  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c6d8  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000461b  00000000  00000000  0004c94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001958  00000000  00000000  00050f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001388  00000000  00000000  000528c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027de8  00000000  00000000  00053c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e25f  00000000  00000000  0007ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e43c4  00000000  00000000  00099c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008160  00000000  00000000  0017e054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001861b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080103c8 	.word	0x080103c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080103c8 	.word	0x080103c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_rpm>:
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
//	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
double get_rpm(int motor){
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
//	const float timeout = (float)(1/osKernelGetSysTimerFreq())*160000;
////	reset_tick();
	switch (motor){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d029      	beq.n	8001052 <get_rpm+0x62>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b03      	cmp	r3, #3
 8001002:	dc36      	bgt.n	8001072 <get_rpm+0x82>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d003      	beq.n	8001012 <get_rpm+0x22>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d010      	beq.n	8001032 <get_rpm+0x42>
 8001010:	e02f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8001012:	4b61      	ldr	r3, [pc, #388]	; (8001198 <get_rpm+0x1a8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <get_rpm+0x30>
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	e000      	b.n	8001022 <get_rpm+0x32>
 8001020:	2200      	movs	r2, #0
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <get_rpm+0x1ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8001028:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <get_rpm+0x1a8>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <get_rpm+0x1b0>)
 800102e:	701a      	strb	r2, [r3, #0]
			break;
 8001030:	e01f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <get_rpm+0x1b4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <get_rpm+0x50>
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	e000      	b.n	8001042 <get_rpm+0x52>
 8001040:	2200      	movs	r2, #0
 8001042:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <get_rpm+0x1b8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <get_rpm+0x1b4>)
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <get_rpm+0x1b0>)
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e00f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8001052:	4b56      	ldr	r3, [pc, #344]	; (80011ac <get_rpm+0x1bc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <get_rpm+0x70>
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	e000      	b.n	8001062 <get_rpm+0x72>
 8001060:	2200      	movs	r2, #0
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <get_rpm+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8001068:	4b50      	ldr	r3, [pc, #320]	; (80011ac <get_rpm+0x1bc>)
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <get_rpm+0x1b0>)
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <get_rpm+0x1b0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8da 	bl	8001230 <ResetLoop>
//	uint32_t a=osKernelGetTickCount();
	uint32_t a=xTaskGetTickCount();
 800107c:	f007 fce0 	bl	8008a40 <xTaskGetTickCount>
 8001080:	60f8      	str	r0, [r7, #12]
//	TickType_t a = pdTICKS_TO_MS( xTaskGetTickCount());
//	uint32_t a= osKernelSysTick();
//	UARTprintf("tick: %d \n",a);

	while(xTaskGetTickCount()- a <= 20){
 8001082:	e029      	b.n	80010d8 <get_rpm+0xe8>
		switch (motor){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <get_rpm+0xca>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b03      	cmp	r3, #3
 800108e:	dc1b      	bgt.n	80010c8 <get_rpm+0xd8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <get_rpm+0xae>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d007      	beq.n	80010ac <get_rpm+0xbc>
 800109c:	e014      	b.n	80010c8 <get_rpm+0xd8>
		case MOTOR_1:
			cnt = __HAL_TIM_GET_COUNTER(&htim1);
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <get_rpm+0x1ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <get_rpm+0x1c4>)
 80010a8:	801a      	strh	r2, [r3, #0]
			break;
 80010aa:	e00d      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_2:
			cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <get_rpm+0x1b8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <get_rpm+0x1c4>)
 80010b6:	801a      	strh	r2, [r3, #0]
			break;
 80010b8:	e006      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_3:
			cnt = __HAL_TIM_GET_COUNTER(&htim4);
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <get_rpm+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <get_rpm+0x1c4>)
 80010c4:	801a      	strh	r2, [r3, #0]
			break;
 80010c6:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <get_rpm+0x1c4>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <get_rpm+0x1b0>)
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f878 	bl	80011c8 <CountLoop>
	while(xTaskGetTickCount()- a <= 20){
 80010d8:	f007 fcb2 	bl	8008a40 <xTaskGetTickCount>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b14      	cmp	r3, #20
 80010e4:	d9ce      	bls.n	8001084 <get_rpm+0x94>
	}
//	UARTprintf("loop: %d, \t cnt: %d \r\n",loop,cnt);
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*50*60;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <get_rpm+0x1c8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	a325      	add	r3, pc, #148	; (adr r3, 8001188 <get_rpm+0x198>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <get_rpm+0x1b0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <get_rpm+0x12c>
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <get_rpm+0x1c4>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001112:	33ff      	adds	r3, #255	; 0xff
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa05 	bl	8000524 <__aeabi_i2d>
 800111a:	e004      	b.n	8001126 <get_rpm+0x136>
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <get_rpm+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ef 	bl	8000504 <__aeabi_ui2d>
 8001126:	4622      	mov	r2, r4
 8001128:	462b      	mov	r3, r5
 800112a:	f7ff f8af 	bl	800028c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a316      	add	r3, pc, #88	; (adr r3, 8001190 <get_rpm+0x1a0>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fb86 	bl	800084c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <get_rpm+0x1cc>)
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <get_rpm+0x1d0>)
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4916      	ldr	r1, [pc, #88]	; (80011c4 <get_rpm+0x1d4>)
 800116a:	e9c1 2300 	strd	r2, r3, [r1]

	return rpm;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <get_rpm+0x1d4>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	ec43 2b17 	vmov	d7, r2, r3
}
 8001178:	eeb0 0a47 	vmov.f32	s0, s14
 800117c:	eef0 0a67 	vmov.f32	s1, s15
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	00000000 	.word	0x00000000
 800118c:	40efbd00 	.word	0x40efbd00
 8001190:	00000000 	.word	0x00000000
 8001194:	40e6f300 	.word	0x40e6f300
 8001198:	20000000 	.word	0x20000000
 800119c:	20000234 	.word	0x20000234
 80011a0:	20000230 	.word	0x20000230
 80011a4:	20000001 	.word	0x20000001
 80011a8:	2000027c 	.word	0x2000027c
 80011ac:	20000002 	.word	0x20000002
 80011b0:	200002c4 	.word	0x200002c4
 80011b4:	20000228 	.word	0x20000228
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	40490000 	.word	0x40490000
 80011c0:	404e0000 	.word	0x404e0000
 80011c4:	20000220 	.word	0x20000220

080011c8 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	if (!flag){
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00d      	beq.n	8001200 <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <CountLoop+0x60>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d204      	bcs.n	80011f8 <CountLoop+0x30>
			loop++;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <CountLoop+0x64>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <CountLoop+0x64>)
 80011f6:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <CountLoop+0x60>)
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 80011fe:	e00c      	b.n	800121a <CountLoop+0x52>
		if(cnt>preCnt){	//
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <CountLoop+0x60>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	429a      	cmp	r2, r3
 8001208:	d904      	bls.n	8001214 <CountLoop+0x4c>
			loop++;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <CountLoop+0x64>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <CountLoop+0x64>)
 8001212:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <CountLoop+0x60>)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	8013      	strh	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000022a 	.word	0x2000022a
 800122c:	2000022c 	.word	0x2000022c

08001230 <ResetLoop>:
void ResetLoop(bool flag){
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	loop=0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <ResetLoop+0x30>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
	preCnt=(flag)?65535:0;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <ResetLoop+0x1c>
 8001246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124a:	e000      	b.n	800124e <ResetLoop+0x1e>
 800124c:	2200      	movs	r2, #0
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <ResetLoop+0x34>)
 8001250:	801a      	strh	r2, [r3, #0]
//	if(!flag){
//		preCnt=0;
//	}else{
//		preCnt=65535;
//	}
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000022c 	.word	0x2000022c
 8001264:	2000022a 	.word	0x2000022a

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	615a      	str	r2, [r3, #20]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40023800 	.word	0x40023800

080013f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <LL_APB1_GRP1_EnableClock+0x2c>)
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800

08001428 <pid_config>:
bool flag_Vd=false;
bool flag_Vtheta=false;
double Vd, Vtheta=0;
uint8_t rx_data;

void pid_config(void){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	pid.Kp=0.3;
 800142c:	491a      	ldr	r1, [pc, #104]	; (8001498 <pid_config+0x70>)
 800142e:	a314      	add	r3, pc, #80	; (adr r3, 8001480 <pid_config+0x58>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	e9c1 2300 	strd	r2, r3, [r1]
	pid.Ki=0.2;
 8001438:	4917      	ldr	r1, [pc, #92]	; (8001498 <pid_config+0x70>)
 800143a:	a313      	add	r3, pc, #76	; (adr r3, 8001488 <pid_config+0x60>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid.Kd=0.005;
 8001444:	4914      	ldr	r1, [pc, #80]	; (8001498 <pid_config+0x70>)
 8001446:	a312      	add	r3, pc, #72	; (adr r3, 8001490 <pid_config+0x68>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid.target_val_1=V1;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <pid_config+0x74>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	4910      	ldr	r1, [pc, #64]	; (8001498 <pid_config+0x70>)
 8001458:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid.target_val_2=V2;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <pid_config+0x78>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	490d      	ldr	r1, [pc, #52]	; (8001498 <pid_config+0x70>)
 8001464:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid.target_val_3=V3;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <pid_config+0x7c>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <pid_config+0x70>)
 8001470:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_init(&pid);
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <pid_config+0x70>)
 8001476:	f001 f8ad 	bl	80025d4 <PID_init>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	33333333 	.word	0x33333333
 8001484:	3fd33333 	.word	0x3fd33333
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3fc99999 	.word	0x3fc99999
 8001490:	47ae147b 	.word	0x47ae147b
 8001494:	3f747ae1 	.word	0x3f747ae1
 8001498:	200003f0 	.word	0x200003f0
 800149c:	20000470 	.word	0x20000470
 80014a0:	20000478 	.word	0x20000478
 80014a4:	20000480 	.word	0x20000480

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f001 fef6 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f87c 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 fb32 	bl	8001b1c <MX_GPIO_Init>
  MX_TIM1_Init();
 80014b8:	f000 f8e0 	bl	800167c <MX_TIM1_Init>
  MX_TIM3_Init();
 80014bc:	f000 f936 	bl	800172c <MX_TIM3_Init>
  MX_TIM4_Init();
 80014c0:	f000 f988 	bl	80017d4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014c4:	f000 f9da 	bl	800187c <MX_TIM5_Init>
  MX_TIM9_Init();
 80014c8:	f000 fa3c 	bl	8001944 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80014cc:	f000 fafc 	bl	8001ac8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 fa9a 	bl	8001a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//    systick_init_ms(8000000);
  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 100);
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <main+0xc8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2264      	movs	r2, #100	; 0x64
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, 100); //motor 2
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <main+0xc8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2264      	movs	r2, #100	; 0x64
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, 100); //motor 3
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <main+0xcc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
//  	HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, GPIO_PIN_SET);


    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80014ec:	2108      	movs	r1, #8
 80014ee:	4820      	ldr	r0, [pc, #128]	; (8001570 <main+0xc8>)
 80014f0:	f002 ffda 	bl	80044a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80014f4:	210c      	movs	r1, #12
 80014f6:	481e      	ldr	r0, [pc, #120]	; (8001570 <main+0xc8>)
 80014f8:	f002 ffd6 	bl	80044a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <main+0xcc>)
 8001500:	f002 ffd2 	bl	80044a8 <HAL_TIM_PWM_Start>

    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001504:	2104      	movs	r1, #4
 8001506:	481c      	ldr	r0, [pc, #112]	; (8001578 <main+0xd0>)
 8001508:	f003 f93c 	bl	8004784 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800150c:	2104      	movs	r1, #4
 800150e:	481b      	ldr	r0, [pc, #108]	; (800157c <main+0xd4>)
 8001510:	f003 f938 	bl	8004784 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001514:	2104      	movs	r1, #4
 8001516:	481a      	ldr	r0, [pc, #104]	; (8001580 <main+0xd8>)
 8001518:	f003 f934 	bl	8004784 <HAL_TIM_Encoder_Start>

    UARTStdioConfig(USART2,true);
 800151c:	2101      	movs	r1, #1
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <main+0xdc>)
 8001520:	f008 ff48 	bl	800a3b4 <UARTStdioConfig>

    __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <main+0xe0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <main+0xe0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0220 	orr.w	r2, r2, #32
 8001532:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001534:	f005 fe42 	bl	80071bc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myButtons */
  myButtonsHandle = osMessageQueueNew (200, sizeof(char), &myButtons_attributes);
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <main+0xe4>)
 800153a:	2101      	movs	r1, #1
 800153c:	20c8      	movs	r0, #200	; 0xc8
 800153e:	f005 ff34 	bl	80073aa <osMessageQueueNew>
 8001542:	4603      	mov	r3, r0
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <main+0xe8>)
 8001546:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(StartControl, NULL, &CONTROL_attributes);
 8001548:	4a12      	ldr	r2, [pc, #72]	; (8001594 <main+0xec>)
 800154a:	2100      	movs	r1, #0
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <main+0xf0>)
 800154e:	f005 fe7f 	bl	8007250 <osThreadNew>
 8001552:	4603      	mov	r3, r0
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <main+0xf4>)
 8001556:	6013      	str	r3, [r2, #0]

  /* creation of PID */
  PIDHandle = osThreadNew(StartPID, NULL, &PID_attributes);
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <main+0xf8>)
 800155a:	2100      	movs	r1, #0
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <main+0xfc>)
 800155e:	f005 fe77 	bl	8007250 <osThreadNew>
 8001562:	4603      	mov	r3, r0
 8001564:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <main+0x100>)
 8001566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001568:	f005 fe4c 	bl	8007204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800156c:	e7fe      	b.n	800156c <main+0xc4>
 800156e:	bf00      	nop
 8001570:	2000030c 	.word	0x2000030c
 8001574:	20000354 	.word	0x20000354
 8001578:	20000234 	.word	0x20000234
 800157c:	2000027c 	.word	0x2000027c
 8001580:	200002c4 	.word	0x200002c4
 8001584:	40004400 	.word	0x40004400
 8001588:	2000039c 	.word	0x2000039c
 800158c:	080104ac 	.word	0x080104ac
 8001590:	200003ec 	.word	0x200003ec
 8001594:	08010464 	.word	0x08010464
 8001598:	08001db1 	.word	0x08001db1
 800159c:	200003e4 	.word	0x200003e4
 80015a0:	08010488 	.word	0x08010488
 80015a4:	08001eb9 	.word	0x08001eb9
 80015a8:	200003e8 	.word	0x200003e8

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	; 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2230      	movs	r2, #48	; 0x30
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00a fa37 	bl	800ba2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <SystemClock_Config+0xc8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <SystemClock_Config+0xc8>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <SystemClock_Config+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <SystemClock_Config+0xcc>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <SystemClock_Config+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001610:	2310      	movs	r3, #16
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800161c:	2308      	movs	r3, #8
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f002 f99f 	bl	8003974 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800163c:	f000 fc58 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fc02 	bl	8003e64 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001666:	f000 fc43 	bl	8001ef0 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	; 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2224      	movs	r2, #36	; 0x24
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f00a f9cf 	bl	800ba2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_TIM1_Init+0xa8>)
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_TIM1_Init+0xac>)
 800169c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016c4:	2303      	movs	r3, #3
 80016c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016dc:	2301      	movs	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_TIM1_Init+0xa8>)
 80016f0:	f002 ffa2 	bl	8004638 <HAL_TIM_Encoder_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016fa:	f000 fbf9 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM1_Init+0xa8>)
 800170c:	f003 fe86 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001716:	f000 fbeb 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	; 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000234 	.word	0x20000234
 8001728:	40010000 	.word	0x40010000

0800172c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2224      	movs	r2, #36	; 0x24
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f00a f977 	bl	800ba2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_TIM3_Init+0xa0>)
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <MX_TIM3_Init+0xa4>)
 800174c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_TIM3_Init+0xa0>)
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM3_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800176e:	2303      	movs	r3, #3
 8001770:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM3_Init+0xa0>)
 800179a:	f002 ff4d 	bl	8004638 <HAL_TIM_Encoder_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f000 fba4 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_TIM3_Init+0xa0>)
 80017b6:	f003 fe31 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017c0:	f000 fb96 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000027c 	.word	0x2000027c
 80017d0:	40000400 	.word	0x40000400

080017d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00a f923 	bl	800ba2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <MX_TIM4_Init+0xa4>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001808:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_TIM4_Init+0xa0>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001816:	2303      	movs	r3, #3
 8001818:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800181e:	2301      	movs	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800182e:	2301      	movs	r3, #1
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001842:	f002 fef9 	bl	8004638 <HAL_TIM_Encoder_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800184c:	f000 fb50 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_TIM4_Init+0xa0>)
 800185e:	f003 fddd 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001868:	f000 fb42 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200002c4 	.word	0x200002c4
 8001878:	40000800 	.word	0x40000800

0800187c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	f107 0320 	add.w	r3, r7, #32
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <MX_TIM5_Init+0xc0>)
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <MX_TIM5_Init+0xc4>)
 80018a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_TIM5_Init+0xc0>)
 80018a6:	2207      	movs	r2, #7
 80018a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <MX_TIM5_Init+0xc0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_TIM5_Init+0xc0>)
 80018b2:	2263      	movs	r2, #99	; 0x63
 80018b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_TIM5_Init+0xc0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_TIM5_Init+0xc0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018c2:	481e      	ldr	r0, [pc, #120]	; (800193c <MX_TIM5_Init+0xc0>)
 80018c4:	f002 fda0 	bl	8004408 <HAL_TIM_PWM_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80018ce:	f000 fb0f 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	4816      	ldr	r0, [pc, #88]	; (800193c <MX_TIM5_Init+0xc0>)
 80018e2:	f003 fd9b 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80018ec:	f000 fb00 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2208      	movs	r2, #8
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM5_Init+0xc0>)
 8001908:	f003 f8ba 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001912:	f000 faed 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	220c      	movs	r2, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM5_Init+0xc0>)
 800191e:	f003 f8af 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001928:	f000 fae2 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM5_Init+0xc0>)
 800192e:	f001 fa03 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000030c 	.word	0x2000030c
 8001940:	40000c00 	.word	0x40000c00

08001944 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <MX_TIM9_Init+0xbc>)
 800196c:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <MX_TIM9_Init+0xc0>)
 800196e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8-1;
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <MX_TIM9_Init+0xbc>)
 8001972:	2207      	movs	r2, #7
 8001974:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_TIM9_Init+0xbc>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_TIM9_Init+0xbc>)
 800197e:	2263      	movs	r2, #99	; 0x63
 8001980:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_TIM9_Init+0xbc>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_TIM9_Init+0xbc>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_TIM9_Init+0xbc>)
 8001990:	f002 fc7a 	bl	8004288 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 800199a:	f000 faa9 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4619      	mov	r1, r3
 80019aa:	4815      	ldr	r0, [pc, #84]	; (8001a00 <MX_TIM9_Init+0xbc>)
 80019ac:	f003 f92a 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80019b6:	f000 fa9b 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <MX_TIM9_Init+0xbc>)
 80019bc:	f002 fd24 	bl	8004408 <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 80019c6:	f000 fa93 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM9_Init+0xbc>)
 80019e2:	f003 f84d 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80019ec:	f000 fa80 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM9_Init+0xbc>)
 80019f2:	f001 f9a1 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000354 	.word	0x20000354
 8001a04:	40014000 	.word	0x40014000

08001a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a36:	f7ff fcdf 	bl	80013f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001a3a:	2008      	movs	r0, #8
 8001a3c:	f7ff fcc4 	bl	80013c8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8001a40:	2360      	movs	r3, #96	; 0x60
 8001a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a54:	2307      	movs	r3, #7
 8001a56:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <MX_USART2_UART_Init+0xb8>)
 8001a5e:	f004 fec6 	bl	80067ee <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001a62:	f7ff fc01 	bl	8001268 <__NVIC_GetPriorityGrouping>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fc51 	bl	8001314 <NVIC_EncodePriority>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4619      	mov	r1, r3
 8001a76:	2026      	movs	r0, #38	; 0x26
 8001a78:	f7ff fc22 	bl	80012c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001a7c:	2026      	movs	r0, #38	; 0x26
 8001a7e:	f7ff fc01 	bl	8001284 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a82:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a86:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a94:	230c      	movs	r3, #12
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <MX_USART2_UART_Init+0xbc>)
 8001aa8:	f005 fac4 	bl	8007034 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0xbc>)
 8001aae:	f7ff fc74 	bl	800139a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_USART2_UART_Init+0xbc>)
 8001ab4:	f7ff fc61 	bl	800137a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40004400 	.word	0x40004400

08001ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <MX_USART3_UART_Init+0x50>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001b00:	f003 fd1c 	bl	800553c <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0a:	f000 f9f1 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000039c 	.word	0x2000039c
 8001b18:	40004800 	.word	0x40004800

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_GPIO_Init+0xd4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <MX_GPIO_Init+0xd8>)
 8001bc6:	f001 febb 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin;
 8001bca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <MX_GPIO_Init+0xd8>)
 8001be4:	f001 fd10 	bl	8003608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <Control>:

/* USER CODE BEGIN 4 */
void Control(msgQueueObj_t msg, double Vd, double Vtheta){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	82b8      	strh	r0, [r7, #20]
 8001c00:	ed87 0b02 	vstr	d0, [r7, #8]
 8001c04:	ed87 1b00 	vstr	d1, [r7]
	switch(msg.buffer[0]){
 8001c08:	7d39      	ldrb	r1, [r7, #20]
 8001c0a:	3942      	subs	r1, #66	; 0x42
 8001c0c:	2918      	cmp	r1, #24
 8001c0e:	f200 80a4 	bhi.w	8001d5a <Control+0x162>
 8001c12:	a001      	add	r0, pc, #4	; (adr r0, 8001c18 <Control+0x20>)
 8001c14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001d5b 	.word	0x08001d5b
 8001c20:	08001d5b 	.word	0x08001d5b
 8001c24:	08001d5b 	.word	0x08001d5b
 8001c28:	08001d5b 	.word	0x08001d5b
 8001c2c:	08001d5b 	.word	0x08001d5b
 8001c30:	08001cc5 	.word	0x08001cc5
 8001c34:	08001d5b 	.word	0x08001d5b
 8001c38:	08001d4b 	.word	0x08001d4b
 8001c3c:	08001d53 	.word	0x08001d53
 8001c40:	08001cb3 	.word	0x08001cb3
 8001c44:	08001d5b 	.word	0x08001d5b
 8001c48:	08001d5b 	.word	0x08001d5b
 8001c4c:	08001d5b 	.word	0x08001d5b
 8001c50:	08001d5b 	.word	0x08001d5b
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001ca1 	.word	0x08001ca1
 8001c5c:	08001d39 	.word	0x08001d39
 8001c60:	08001d5b 	.word	0x08001d5b
 8001c64:	08001d5b 	.word	0x08001d5b
 8001c68:	08001cfb 	.word	0x08001cfb
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001d0d 	.word	0x08001d0d
 8001c74:	08001d1f 	.word	0x08001d1f
 8001c78:	08001ce9 	.word	0x08001ce9
	case 'W':
		Robot_Move(Vd, 0, 0);
 8001c7c:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 8001d68 <Control+0x170>
 8001c80:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001d68 <Control+0x170>
 8001c84:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c88:	f000 f93a 	bl	8001f00 <Robot_Move>
		break;
 8001c8c:	e066      	b.n	8001d5c <Control+0x164>
	case 'B':
		Robot_Move(Vd, 180, 0);
 8001c8e:	ed9f 2b36 	vldr	d2, [pc, #216]	; 8001d68 <Control+0x170>
 8001c92:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001d70 <Control+0x178>
 8001c96:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c9a:	f000 f931 	bl	8001f00 <Robot_Move>
		break;
 8001c9e:	e05d      	b.n	8001d5c <Control+0x164>
	case 'R':
		Robot_Move(Vd, 270, 0);
 8001ca0:	ed9f 2b31 	vldr	d2, [pc, #196]	; 8001d68 <Control+0x170>
 8001ca4:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001d78 <Control+0x180>
 8001ca8:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cac:	f000 f928 	bl	8001f00 <Robot_Move>
		break;
 8001cb0:	e054      	b.n	8001d5c <Control+0x164>
	case 'L':
		Robot_Move(Vd, 90, 0);
 8001cb2:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8001d68 <Control+0x170>
 8001cb6:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001d80 <Control+0x188>
 8001cba:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cbe:	f000 f91f 	bl	8001f00 <Robot_Move>
		break;
 8001cc2:	e04b      	b.n	8001d5c <Control+0x164>
	case 'H':
		Robot_Move(Vd, 315, 0);
 8001cc4:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8001d68 <Control+0x170>
 8001cc8:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001d88 <Control+0x190>
 8001ccc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cd0:	f000 f916 	bl	8001f00 <Robot_Move>
		break;
 8001cd4:	e042      	b.n	8001d5c <Control+0x164>
	case 'Q':
		Robot_Move(Vd, 45, 0);
 8001cd6:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001d68 <Control+0x170>
 8001cda:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8001d90 <Control+0x198>
 8001cde:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ce2:	f000 f90d 	bl	8001f00 <Robot_Move>
		break;
 8001ce6:	e039      	b.n	8001d5c <Control+0x164>
	case 'Z':
		Robot_Move(Vd, 135, 0);
 8001ce8:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8001d68 <Control+0x170>
 8001cec:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001d98 <Control+0x1a0>
 8001cf0:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cf4:	f000 f904 	bl	8001f00 <Robot_Move>
		break;
 8001cf8:	e030      	b.n	8001d5c <Control+0x164>
	case 'V':
		Robot_Move(Vd, 225, 0);
 8001cfa:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8001d68 <Control+0x170>
 8001cfe:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001da0 <Control+0x1a8>
 8001d02:	ed97 0b02 	vldr	d0, [r7, #8]
 8001d06:	f000 f8fb 	bl	8001f00 <Robot_Move>
		break;
 8001d0a:	e027      	b.n	8001d5c <Control+0x164>
	case 'X':
		Robot_Move(0, 0, Vtheta);
 8001d0c:	ed97 2b00 	vldr	d2, [r7]
 8001d10:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001d68 <Control+0x170>
 8001d14:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001d68 <Control+0x170>
 8001d18:	f000 f8f2 	bl	8001f00 <Robot_Move>
		break;
 8001d1c:	e01e      	b.n	8001d5c <Control+0x164>
	case 'Y':
		Robot_Move(0, 0, -Vtheta);
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001d26:	ec43 2b12 	vmov	d2, r2, r3
 8001d2a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001d68 <Control+0x170>
 8001d2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001d68 <Control+0x170>
 8001d32:	f000 f8e5 	bl	8001f00 <Robot_Move>
		break;
 8001d36:	e011      	b.n	8001d5c <Control+0x164>
	case 'S':
		Robot_Move(0, 0, 0);
 8001d38:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8001d68 <Control+0x170>
 8001d3c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001d68 <Control+0x170>
 8001d40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001d68 <Control+0x170>
 8001d44:	f000 f8dc 	bl	8001f00 <Robot_Move>
		break;
 8001d48:	e008      	b.n	8001d5c <Control+0x164>
	case 'J':
		flag_Vd=true;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Control+0x1b0>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		break;
 8001d50:	e004      	b.n	8001d5c <Control+0x164>
	case 'K':
		flag_Vtheta=true;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <Control+0x1b4>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
		break;
 8001d58:	e000      	b.n	8001d5c <Control+0x164>
	default:
		break;
 8001d5a:	bf00      	nop
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f3af 8000 	nop.w
	...
 8001d74:	40668000 	.word	0x40668000
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	4070e000 	.word	0x4070e000
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40568000 	.word	0x40568000
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	4073b000 	.word	0x4073b000
 8001d90:	00000000 	.word	0x00000000
 8001d94:	40468000 	.word	0x40468000
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	4060e000 	.word	0x4060e000
 8001da0:	00000000 	.word	0x00000000
 8001da4:	406c2000 	.word	0x406c2000
 8001da8:	20000458 	.word	0x20000458
 8001dac:	20000459 	.word	0x20000459

08001db0 <StartControl>:
  * @retval None
  */

/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	msgQueueObj_t msg;
	osStatus_t status;
	int Vd_msg, Vtheta_msg=0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  for(;;)
  {
//	  vTaskSuspend(CONTROLHandle);
//	  Robot_Move(1, 225, 0);
//	  UARTprintf("task1\r\n");
	  status = osMessageQueueGet(myButtonsHandle, &msg, NULL, 0);   // wait for message
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <StartControl+0xe0>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f107 0108 	add.w	r1, r7, #8
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f005 fbc2 	bl	8007550 <osMessageQueueGet>
 8001dcc:	60f8      	str	r0, [r7, #12]
	 	  	if (status == osOK) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d158      	bne.n	8001e86 <StartControl+0xd6>
	 	  	  UARTprintf("msg is: %c \r\n", msg.buffer[0]); // process data
 8001dd4:	7a3b      	ldrb	r3, [r7, #8]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	482e      	ldr	r0, [pc, #184]	; (8001e94 <StartControl+0xe4>)
 8001dda:	f008 fd69 	bl	800a8b0 <UARTprintf>
	 	  	  if(isdigit((int)msg.buffer[0])){
 8001dde:	7a3b      	ldrb	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <StartControl+0xe8>)
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <StartControl+0x78>
	 	  		  if(flag_Vd){
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <StartControl+0xec>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <StartControl+0x5c>
		 	  		  Vd_msg=(int)(msg.buffer[0]-'0');
 8001df8:	7a3b      	ldrb	r3, [r7, #8]
 8001dfa:	3b30      	subs	r3, #48	; 0x30
 8001dfc:	617b      	str	r3, [r7, #20]
		 	  		  flag_Vd=false;
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <StartControl+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		 	  		  UARTprintf("Vd: %d \r\n",Vd_msg);
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	4826      	ldr	r0, [pc, #152]	; (8001ea0 <StartControl+0xf0>)
 8001e08:	f008 fd52 	bl	800a8b0 <UARTprintf>
	 	  		  }
	 	  		  if(flag_Vtheta){
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <StartControl+0xf4>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <StartControl+0x78>
		 	  		  Vtheta_msg=(int)(msg.buffer[0]-'0');
 8001e14:	7a3b      	ldrb	r3, [r7, #8]
 8001e16:	3b30      	subs	r3, #48	; 0x30
 8001e18:	613b      	str	r3, [r7, #16]
		 	  		  flag_Vtheta=false;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <StartControl+0xf4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
		 	  		  UARTprintf("Vtheta: %d \r\n",Vtheta_msg);
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	4821      	ldr	r0, [pc, #132]	; (8001ea8 <StartControl+0xf8>)
 8001e24:	f008 fd44 	bl	800a8b0 <UARTprintf>
	 	  		  }

	 	  	  }
	 	  	  Vd=(double)(Vd_msg/10);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a20      	ldr	r2, [pc, #128]	; (8001eac <StartControl+0xfc>)
 8001e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e30:	1092      	asrs	r2, r2, #2
 8001e32:	17db      	asrs	r3, r3, #31
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb74 	bl	8000524 <__aeabi_i2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	491b      	ldr	r1, [pc, #108]	; (8001eb0 <StartControl+0x100>)
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
	 	  	  Vtheta=(double)(Vtheta_msg/10);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <StartControl+0xfc>)
 8001e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4e:	1092      	asrs	r2, r2, #2
 8001e50:	17db      	asrs	r3, r3, #31
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb65 	bl	8000524 <__aeabi_i2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4915      	ldr	r1, [pc, #84]	; (8001eb4 <StartControl+0x104>)
 8001e60:	e9c1 2300 	strd	r2, r3, [r1]

	 	  		Control(msg, Vd, Vtheta);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <StartControl+0x100>)
 8001e66:	ed93 7b00 	vldr	d7, [r3]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <StartControl+0x104>)
 8001e6c:	ed93 6b00 	vldr	d6, [r3]
 8001e70:	eeb0 1a46 	vmov.f32	s2, s12
 8001e74:	eef0 1a66 	vmov.f32	s3, s13
 8001e78:	eeb0 0a47 	vmov.f32	s0, s14
 8001e7c:	eef0 0a67 	vmov.f32	s1, s15
 8001e80:	68b8      	ldr	r0, [r7, #8]
 8001e82:	f7ff feb9 	bl	8001bf8 <Control>

	 	  	}
    osDelay(50);
 8001e86:	2032      	movs	r0, #50	; 0x32
 8001e88:	f005 fa74 	bl	8007374 <osDelay>
	  status = osMessageQueueGet(myButtonsHandle, &msg, NULL, 0);   // wait for message
 8001e8c:	e796      	b.n	8001dbc <StartControl+0xc>
 8001e8e:	bf00      	nop
 8001e90:	200003ec 	.word	0x200003ec
 8001e94:	080103f8 	.word	0x080103f8
 8001e98:	080104dc 	.word	0x080104dc
 8001e9c:	20000458 	.word	0x20000458
 8001ea0:	08010408 	.word	0x08010408
 8001ea4:	20000459 	.word	0x20000459
 8001ea8:	08010414 	.word	0x08010414
 8001eac:	66666667 	.word	0x66666667
 8001eb0:	20000460 	.word	0x20000460
 8001eb4:	20000468 	.word	0x20000468

08001eb8 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void *argument)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
	  PID();
 8001ec0:	f000 fd8c 	bl	80029dc <PID>
//	  UARTprintf("task2\r\n");

    osDelay(10);
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f005 fa55 	bl	8007374 <osDelay>
	  PID();
 8001eca:	e7f9      	b.n	8001ec0 <StartPID+0x8>

08001ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ede:	f001 f9ff 	bl	80032e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40014400 	.word	0x40014400

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
 8001efa:	0000      	movs	r0, r0
 8001efc:	0000      	movs	r0, r0
	...

08001f00 <Robot_Move>:
flag_rot_2=true,
flag_rot_3=true;

double prev_duty_1=100, prev_duty_2=100, prev_duty_3=100;
double duty=100;
void Robot_Move(double Vd, double Theta, double Vtheta){
 8001f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f04:	b092      	sub	sp, #72	; 0x48
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	ed87 0b06 	vstr	d0, [r7, #24]
 8001f0c:	ed87 1b04 	vstr	d1, [r7, #16]
 8001f10:	ed87 2b02 	vstr	d2, [r7, #8]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180))+Vtheta;
 8001f14:	a396      	add	r3, pc, #600	; (adr r3, 8002170 <Robot_Move+0x270>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b94      	ldr	r3, [pc, #592]	; (8002180 <Robot_Move+0x280>)
 8001f30:	f7fe fc8c 	bl	800084c <__aeabi_ddiv>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	ec43 2b17 	vmov	d7, r2, r3
 8001f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f40:	eef0 0a67 	vmov.f32	s1, s15
 8001f44:	f00d f9ac 	bl	800f2a0 <cos>
 8001f48:	ec51 0b10 	vmov	r0, r1, d0
 8001f4c:	a386      	add	r3, pc, #536	; (adr r3, 8002168 <Robot_Move+0x268>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fb51 	bl	80005f8 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 2300 	strd	r2, r3, [r7]
 8001f5e:	a384      	add	r3, pc, #528	; (adr r3, 8002170 <Robot_Move+0x270>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f68:	f7fe fb46 	bl	80005f8 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <Robot_Move+0x280>)
 8001f7a:	f7fe fc67 	bl	800084c <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	ec43 2b17 	vmov	d7, r2, r3
 8001f86:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8a:	eef0 0a67 	vmov.f32	s1, s15
 8001f8e:	f00d f9db 	bl	800f348 <sin>
 8001f92:	ec51 0b10 	vmov	r0, r1, d0
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <Robot_Move+0x284>)
 8001f9c:	f7fe fb2c 	bl	80005f8 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa8:	f7fe f96e 	bl	8000288 <__aeabi_dsub>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb8:	f7fe fb1e 	bl	80005f8 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc8:	f7fe f960 	bl	800028c <__adddf3>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	496d      	ldr	r1, [pc, #436]	; (8002188 <Robot_Move+0x288>)
 8001fd2:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180))+Vtheta;
 8001fd6:	a366      	add	r3, pc, #408	; (adr r3, 8002170 <Robot_Move+0x270>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fe0:	f7fe fb0a 	bl	80005f8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <Robot_Move+0x280>)
 8001ff2:	f7fe fc2b 	bl	800084c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	ec43 2b17 	vmov	d7, r2, r3
 8001ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8002002:	eef0 0a67 	vmov.f32	s1, s15
 8002006:	f00d f94b 	bl	800f2a0 <cos>
 800200a:	ec51 0b10 	vmov	r0, r1, d0
 800200e:	a35a      	add	r3, pc, #360	; (adr r3, 8002178 <Robot_Move+0x278>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe faf0 	bl	80005f8 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	e9c7 2300 	strd	r2, r3, [r7]
 8002020:	a353      	add	r3, pc, #332	; (adr r3, 8002170 <Robot_Move+0x270>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800202a:	f7fe fae5 	bl	80005f8 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b51      	ldr	r3, [pc, #324]	; (8002180 <Robot_Move+0x280>)
 800203c:	f7fe fc06 	bl	800084c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	f00d f97a 	bl	800f348 <sin>
 8002054:	ec51 0b10 	vmov	r0, r1, d0
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <Robot_Move+0x284>)
 800205e:	f7fe facb 	bl	80005f8 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800206a:	f7fe f90d 	bl	8000288 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207a:	f7fe fabd 	bl	80005f8 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800208a:	f7fe f8ff 	bl	800028c <__adddf3>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	493e      	ldr	r1, [pc, #248]	; (800218c <Robot_Move+0x28c>)
 8002094:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180)+Vtheta;
 8002098:	a335      	add	r3, pc, #212	; (adr r3, 8002170 <Robot_Move+0x270>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020a2:	f7fe faa9 	bl	80005f8 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <Robot_Move+0x280>)
 80020b4:	f7fe fbca 	bl	800084c <__aeabi_ddiv>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	ec43 2b17 	vmov	d7, r2, r3
 80020c0:	eeb0 0a47 	vmov.f32	s0, s14
 80020c4:	eef0 0a67 	vmov.f32	s1, s15
 80020c8:	f00d f93e 	bl	800f348 <sin>
 80020cc:	ec51 0b10 	vmov	r0, r1, d0
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fa90 	bl	80005f8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e4:	f7fe f8d2 	bl	800028c <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4928      	ldr	r1, [pc, #160]	; (8002190 <Robot_Move+0x290>)
 80020ee:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <Robot_Move+0x290>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	4611      	mov	r1, r2
 80020fa:	6439      	str	r1, [r7, #64]	; 0x40
 80020fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <Robot_Move+0x288>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	4611      	mov	r1, r2
 800210a:	63b9      	str	r1, [r7, #56]	; 0x38
 800210c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <Robot_Move+0x28c>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4611      	mov	r1, r2
 800211a:	6339      	str	r1, [r7, #48]	; 0x30
 800211c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002120:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax=V1_abs;
 8002122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002126:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 800212a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800212e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002132:	f7fe fcf1 	bl	8000b18 <__aeabi_dcmpgt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <Robot_Move+0x242>
 800213c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002140:	e001      	b.n	8002146 <Robot_Move+0x246>
 8002142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002146:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 800214a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800214e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002152:	f7fe fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <Robot_Move+0x294>
 800215c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002160:	e01a      	b.n	8002198 <Robot_Move+0x298>
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
 8002168:	3d70a3d7 	.word	0x3d70a3d7
 800216c:	bfebd70a 	.word	0xbfebd70a
 8002170:	54524550 	.word	0x54524550
 8002174:	400921fb 	.word	0x400921fb
 8002178:	3d70a3d7 	.word	0x3d70a3d7
 800217c:	3febd70a 	.word	0x3febd70a
 8002180:	40668000 	.word	0x40668000
 8002184:	3fe00000 	.word	0x3fe00000
 8002188:	20000478 	.word	0x20000478
 800218c:	20000480 	.word	0x20000480
 8002190:	20000470 	.word	0x20000470
 8002194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002198:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>10000){
 800219c:	a379      	add	r3, pc, #484	; (adr r3, 8002384 <Robot_Move+0x484>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021a6:	f7fe fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02e      	beq.n	800220e <Robot_Move+0x30e>
	Temp=10000/Vmax;
 80021b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021b4:	a173      	add	r1, pc, #460	; (adr r1, 8002384 <Robot_Move+0x484>)
 80021b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021ba:	f7fe fb47 	bl	800084c <__aeabi_ddiv>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <Robot_Move+0x478>)
 80021c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d0:	f7fe fa12 	bl	80005f8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4967      	ldr	r1, [pc, #412]	; (8002378 <Robot_Move+0x478>)
 80021da:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <Robot_Move+0x47c>)
 80021e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e8:	f7fe fa06 	bl	80005f8 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4962      	ldr	r1, [pc, #392]	; (800237c <Robot_Move+0x47c>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <Robot_Move+0x480>)
 80021f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002200:	f7fe f9fa 	bl	80005f8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	495d      	ldr	r1, [pc, #372]	; (8002380 <Robot_Move+0x480>)
 800220a:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 800220e:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <Robot_Move+0x478>)
 8002210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f7fe fc5e 	bl	8000adc <__aeabi_dcmplt>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <Robot_Move+0x342>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 8002226:	2100      	movs	r1, #0
 8002228:	2001      	movs	r0, #1
 800222a:	f000 f94f 	bl	80024cc <Rotation>
	 V1=fabs(V1);
 800222e:	4b52      	ldr	r3, [pc, #328]	; (8002378 <Robot_Move+0x478>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	4692      	mov	sl, r2
 8002236:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <Robot_Move+0x478>)
 800223c:	e9c3 ab00 	strd	sl, fp, [r3]
 8002240:	e00f      	b.n	8002262 <Robot_Move+0x362>
	} else if(V1>0){
 8002242:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <Robot_Move+0x478>)
 8002244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f7fe fc62 	bl	8000b18 <__aeabi_dcmpgt>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <Robot_Move+0x362>
	 Rotation(MOTOR_1, CLOCK_WISE);
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f000 f935 	bl	80024cc <Rotation>
	}
	if(V2<0){
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <Robot_Move+0x47c>)
 8002264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f7fe fc34 	bl	8000adc <__aeabi_dcmplt>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <Robot_Move+0x396>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 800227a:	2100      	movs	r1, #0
 800227c:	2002      	movs	r0, #2
 800227e:	f000 f925 	bl	80024cc <Rotation>
	 V2=fabs(V2);
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <Robot_Move+0x47c>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	4690      	mov	r8, r2
 800228a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <Robot_Move+0x47c>)
 8002290:	e9c3 8900 	strd	r8, r9, [r3]
 8002294:	e00f      	b.n	80022b6 <Robot_Move+0x3b6>
	} else if(V2>0){
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <Robot_Move+0x47c>)
 8002298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f7fe fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <Robot_Move+0x3b6>
	 Rotation(MOTOR_2, CLOCK_WISE);
 80022ae:	2101      	movs	r1, #1
 80022b0:	2002      	movs	r0, #2
 80022b2:	f000 f90b 	bl	80024cc <Rotation>
	}
	if(V3<0){
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <Robot_Move+0x480>)
 80022b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fe fc0a 	bl	8000adc <__aeabi_dcmplt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00d      	beq.n	80022ea <Robot_Move+0x3ea>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 80022ce:	2100      	movs	r1, #0
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f8fb 	bl	80024cc <Rotation>
	 V3=fabs(V3);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <Robot_Move+0x480>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	4614      	mov	r4, r2
 80022de:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <Robot_Move+0x480>)
 80022e4:	e9c3 4500 	strd	r4, r5, [r3]
 80022e8:	e00f      	b.n	800230a <Robot_Move+0x40a>
	} else if(V3>0){
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <Robot_Move+0x480>)
 80022ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	f7fe fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <Robot_Move+0x40a>
	 Rotation(MOTOR_3, CLOCK_WISE);
 8002302:	2101      	movs	r1, #1
 8002304:	2003      	movs	r0, #3
 8002306:	f000 f8e1 	bl	80024cc <Rotation>
	}

	V1=v2rpm(V1);
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <Robot_Move+0x478>)
 800230c:	ed93 7b00 	vldr	d7, [r3]
 8002310:	eeb0 0a47 	vmov.f32	s0, s14
 8002314:	eef0 0a67 	vmov.f32	s1, s15
 8002318:	f000 f936 	bl	8002588 <v2rpm>
 800231c:	eeb0 7a40 	vmov.f32	s14, s0
 8002320:	eef0 7a60 	vmov.f32	s15, s1
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <Robot_Move+0x478>)
 8002326:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <Robot_Move+0x47c>)
 800232c:	ed93 7b00 	vldr	d7, [r3]
 8002330:	eeb0 0a47 	vmov.f32	s0, s14
 8002334:	eef0 0a67 	vmov.f32	s1, s15
 8002338:	f000 f926 	bl	8002588 <v2rpm>
 800233c:	eeb0 7a40 	vmov.f32	s14, s0
 8002340:	eef0 7a60 	vmov.f32	s15, s1
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <Robot_Move+0x47c>)
 8002346:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <Robot_Move+0x480>)
 800234c:	ed93 7b00 	vldr	d7, [r3]
 8002350:	eeb0 0a47 	vmov.f32	s0, s14
 8002354:	eef0 0a67 	vmov.f32	s1, s15
 8002358:	f000 f916 	bl	8002588 <v2rpm>
 800235c:	eeb0 7a40 	vmov.f32	s14, s0
 8002360:	eef0 7a60 	vmov.f32	s15, s1
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <Robot_Move+0x480>)
 8002366:	ed83 7b00 	vstr	d7, [r3]
	pid_config();
 800236a:	f7ff f85d 	bl	8001428 <pid_config>
//	prev_duty_1=duty_V1;
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty_V2);
//	prev_duty_2=duty_V2;
//	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty_V3);
//	prev_duty_3=duty_V3;
}
 800236e:	bf00      	nop
 8002370:	3748      	adds	r7, #72	; 0x48
 8002372:	46bd      	mov	sp, r7
 8002374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002378:	20000470 	.word	0x20000470
 800237c:	20000478 	.word	0x20000478
 8002380:	20000480 	.word	0x20000480
 8002384:	00000000 	.word	0x00000000
 8002388:	40c38800 	.word	0x40c38800

0800238c <set_duty_cycle>:
double rpm_to_duty(double rpm){
	double duty=(98.15-0.6*rpm);
	return duty;
}
void set_duty_cycle(int motor, double out){
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	ed87 0b00 	vstr	d0, [r7]
	double prev_duty;
	if(motor==MOTOR_1){
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <set_duty_cycle+0x1e>
		prev_duty=prev_duty_1;
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <set_duty_cycle+0x124>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80023a8:	e010      	b.n	80023cc <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_2){
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d105      	bne.n	80023bc <set_duty_cycle+0x30>
		prev_duty=prev_duty_2;
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <set_duty_cycle+0x128>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80023ba:	e007      	b.n	80023cc <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_3){
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d104      	bne.n	80023cc <set_duty_cycle+0x40>
		prev_duty=prev_duty_3;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <set_duty_cycle+0x12c>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
//	double duty = rpm_to_duty(rpm,out)-out;

	duty=prev_duty-out;
 80023cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d4:	f7fd ff58 	bl	8000288 <__aeabi_dsub>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <set_duty_cycle+0x130>)
 80023de:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty>100){duty=100;}
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <set_duty_cycle+0x130>)
 80023e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <set_duty_cycle+0x134>)
 80023ee:	f7fe fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <set_duty_cycle+0x78>
 80023f8:	4930      	ldr	r1, [pc, #192]	; (80024bc <set_duty_cycle+0x130>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <set_duty_cycle+0x134>)
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty<0){duty=0;}
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <set_duty_cycle+0x130>)
 8002406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	f7fe fb63 	bl	8000adc <__aeabi_dcmplt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <set_duty_cycle+0x9e>
 800241c:	4927      	ldr	r1, [pc, #156]	; (80024bc <set_duty_cycle+0x130>)
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9c1 2300 	strd	r2, r3, [r1]

	if(motor==MOTOR_1){
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d111      	bne.n	8002454 <set_duty_cycle+0xc8>
//		UARTprintf("duty_1: %d \r\n", (uint8_t)duty);
		__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, duty);
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <set_duty_cycle+0x130>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	4923      	ldr	r1, [pc, #140]	; (80024c4 <set_duty_cycle+0x138>)
 8002438:	680c      	ldr	r4, [r1, #0]
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbb3 	bl	8000ba8 <__aeabi_d2uiz>
 8002442:	4603      	mov	r3, r0
 8002444:	63e3      	str	r3, [r4, #60]	; 0x3c
		prev_duty_1=duty;
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <set_duty_cycle+0x130>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	4918      	ldr	r1, [pc, #96]	; (80024b0 <set_duty_cycle+0x124>)
 800244e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if(motor==MOTOR_3){
		__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty);
		prev_duty_3=duty;
	}
}
 8002452:	e028      	b.n	80024a6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_2){
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d111      	bne.n	800247e <set_duty_cycle+0xf2>
		__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty);
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <set_duty_cycle+0x130>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	4918      	ldr	r1, [pc, #96]	; (80024c4 <set_duty_cycle+0x138>)
 8002462:	680c      	ldr	r4, [r1, #0]
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fb9e 	bl	8000ba8 <__aeabi_d2uiz>
 800246c:	4603      	mov	r3, r0
 800246e:	6423      	str	r3, [r4, #64]	; 0x40
		prev_duty_2=duty;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <set_duty_cycle+0x130>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	490f      	ldr	r1, [pc, #60]	; (80024b4 <set_duty_cycle+0x128>)
 8002478:	e9c1 2300 	strd	r2, r3, [r1]
}
 800247c:	e013      	b.n	80024a6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_3){
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d110      	bne.n	80024a6 <set_duty_cycle+0x11a>
		__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty);
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <set_duty_cycle+0x130>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	490f      	ldr	r1, [pc, #60]	; (80024c8 <set_duty_cycle+0x13c>)
 800248c:	680c      	ldr	r4, [r1, #0]
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fb89 	bl	8000ba8 <__aeabi_d2uiz>
 8002496:	4603      	mov	r3, r0
 8002498:	6363      	str	r3, [r4, #52]	; 0x34
		prev_duty_3=duty;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <set_duty_cycle+0x130>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	4905      	ldr	r1, [pc, #20]	; (80024b8 <set_duty_cycle+0x12c>)
 80024a2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	20000010 	.word	0x20000010
 80024b8:	20000018 	.word	0x20000018
 80024bc:	20000020 	.word	0x20000020
 80024c0:	40590000 	.word	0x40590000
 80024c4:	2000030c 	.word	0x2000030c
 80024c8:	20000354 	.word	0x20000354

080024cc <Rotation>:
void Rotation(int motor, int rotation){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d115      	bne.n	8002508 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d109      	bne.n	80024f6 <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e8:	4822      	ldr	r0, [pc, #136]	; (8002574 <Rotation+0xa8>)
 80024ea:	f001 fa29 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <Rotation+0xac>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e008      	b.n	8002508 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 80024f6:	2200      	movs	r2, #0
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	481d      	ldr	r0, [pc, #116]	; (8002574 <Rotation+0xa8>)
 80024fe:	f001 fa1f 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <Rotation+0xac>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d115      	bne.n	800253a <Rotation+0x6e>
		if(rotation==CLOCK_WISE){
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d109      	bne.n	8002528 <Rotation+0x5c>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 8002514:	2201      	movs	r2, #1
 8002516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800251a:	4816      	ldr	r0, [pc, #88]	; (8002574 <Rotation+0xa8>)
 800251c:	f001 fa10 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <Rotation+0xb0>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e008      	b.n	800253a <Rotation+0x6e>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252e:	4811      	ldr	r0, [pc, #68]	; (8002574 <Rotation+0xa8>)
 8002530:	f001 fa06 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <Rotation+0xb0>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d115      	bne.n	800256c <Rotation+0xa0>
		if(rotation==CLOCK_WISE){
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d109      	bne.n	800255a <Rotation+0x8e>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <Rotation+0xa8>)
 800254e:	f001 f9f7 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <Rotation+0xb4>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 8002558:	e008      	b.n	800256c <Rotation+0xa0>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002560:	4804      	ldr	r0, [pc, #16]	; (8002574 <Rotation+0xa8>)
 8002562:	f001 f9ed 	bl	8003940 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <Rotation+0xb4>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	20000000 	.word	0x20000000
 800257c:	20000001 	.word	0x20000001
 8002580:	20000002 	.word	0x20000002
 8002584:	00000000 	.word	0x00000000

08002588 <v2rpm>:

double v2rpm (double vantoc){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 8002592:	a30e      	add	r3, pc, #56	; (adr r3, 80025cc <v2rpm+0x44>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800259c:	f7fe f956 	bl	800084c <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <v2rpm+0x40>)
 80025ae:	f7fe f823 	bl	80005f8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80025ba:	eeb0 0a47 	vmov.f32	s0, s14
 80025be:	eef0 0a67 	vmov.f32	s1, s15
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	404e0000 	.word	0x404e0000
 80025cc:	5b30428a 	.word	0x5b30428a
 80025d0:	3fd8209f 	.word	0x3fd8209f

080025d4 <PID_init>:
,err_next
,actual_val
,pre_actual_val_1=0
,pre_actual_val_2=0
,pre_actual_val_3=0;
void PID_init(PID_Param_t *par){
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	4913      	ldr	r1, [pc, #76]	; (8002630 <PID_init+0x5c>)
 80025e4:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025ee:	4911      	ldr	r1, [pc, #68]	; (8002634 <PID_init+0x60>)
 80025f0:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025fa:	490f      	ldr	r1, [pc, #60]	; (8002638 <PID_init+0x64>)
 80025fc:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_1=par->target_val_1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <PID_init+0x68>)
 8002608:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_2=par->target_val_2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002612:	490b      	ldr	r1, [pc, #44]	; (8002640 <PID_init+0x6c>)
 8002614:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_3=par->target_val_3;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800261e:	4909      	ldr	r1, [pc, #36]	; (8002644 <PID_init+0x70>)
 8002620:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20000488 	.word	0x20000488
 8002634:	20000490 	.word	0x20000490
 8002638:	20000498 	.word	0x20000498
 800263c:	200004a0 	.word	0x200004a0
 8002640:	200004a8 	.word	0x200004a8
 8002644:	200004b0 	.word	0x200004b0

08002648 <update_motor_values>:

double update_motor_values(double target_val, double actual_val, double prev_actual_val,double err_last, double err_next) {
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b08a      	sub	sp, #40	; 0x28
 800264e:	af00      	add	r7, sp, #0
 8002650:	ed87 0b08 	vstr	d0, [r7, #32]
 8002654:	ed87 1b06 	vstr	d1, [r7, #24]
 8002658:	ed87 2b04 	vstr	d2, [r7, #16]
 800265c:	ed87 3b02 	vstr	d3, [r7, #8]
 8002660:	ed87 4b00 	vstr	d4, [r7]

	if(target_val==0){
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002670:	f7fe fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <update_motor_values+0x42>
		actual_val=-10;
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <update_motor_values+0x17c>)
 8002680:	e9c7 2306 	strd	r2, r3, [r7, #24]
		return actual_val;
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002688:	e091      	b.n	80027ae <update_motor_values+0x166>
	}
	err=target_val-actual_val;
 800268a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002692:	f7fd fdf9 	bl	8000288 <__aeabi_dsub>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	494b      	ldr	r1, [pc, #300]	; (80027c8 <update_motor_values+0x180>)
 800269c:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 80026a0:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <update_motor_values+0x184>)
 80026a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <update_motor_values+0x180>)
 80026a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b0:	f7fd fdea 	bl	8000288 <__aeabi_dsub>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ff9c 	bl	80005f8 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026cc:	f7fd fdde 	bl	800028c <__adddf3>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
				  + pid.Ki*err
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <update_motor_values+0x184>)
 80026da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <update_motor_values+0x180>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd ff88 	bl	80005f8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fdcc 	bl	800028c <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4692      	mov	sl, r2
 80026fa:	469b      	mov	fp, r3
				  + pid.Kd*(err - 2 * err_next + err_last);
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <update_motor_values+0x184>)
 80026fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <update_motor_values+0x180>)
 8002704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	f7fd fdbc 	bl	800028c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4640      	mov	r0, r8
 800271a:	4649      	mov	r1, r9
 800271c:	f7fd fdb4 	bl	8000288 <__aeabi_dsub>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272c:	f7fd fdae 	bl	800028c <__adddf3>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd ff5e 	bl	80005f8 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002740:	4650      	mov	r0, sl
 8002742:	4659      	mov	r1, fp
 8002744:	f7fd fda2 	bl	800028c <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	err_last = err_next;
 8002750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002754:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err_next = err;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <update_motor_values+0x180>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	e9c7 2300 	strd	r2, r3, [r7]
	actual_val=(actual_val>10)?10:actual_val;
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <update_motor_values+0x188>)
 8002768:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800276c:	f7fe f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <update_motor_values+0x136>
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <update_motor_values+0x188>)
 800277c:	e001      	b.n	8002782 <update_motor_values+0x13a>
 800277e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002782:	e9c7 2306 	strd	r2, r3, [r7, #24]
	actual_val=(actual_val<-10)?-10:actual_val;
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <update_motor_values+0x17c>)
 800278c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002790:	f7fe f9a4 	bl	8000adc <__aeabi_dcmplt>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <update_motor_values+0x15a>
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <update_motor_values+0x17c>)
 80027a0:	e001      	b.n	80027a6 <update_motor_values+0x15e>
 80027a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	return actual_val;
 80027aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80027ae:	ec43 2b17 	vmov	d7, r2, r3
 80027b2:	eeb0 0a47 	vmov.f32	s0, s14
 80027b6:	eef0 0a67 	vmov.f32	s1, s15
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c2:	bf00      	nop
 80027c4:	c0240000 	.word	0xc0240000
 80027c8:	200004b8 	.word	0x200004b8
 80027cc:	200003f0 	.word	0x200003f0
 80027d0:	40240000 	.word	0x40240000

080027d4 <save_Err>:
void save_Err(int motor){
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	switch(motor){
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d02f      	beq.n	8002842 <save_Err+0x6e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	dc3f      	bgt.n	8002868 <save_Err+0x94>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d003      	beq.n	80027f6 <save_Err+0x22>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d013      	beq.n	800281c <save_Err+0x48>
		pre_actual_val_3=actual_val;
		err_last_3=err_last;
		err_next_3=err_next;
		break;
	}
}
 80027f4:	e038      	b.n	8002868 <save_Err+0x94>
		pre_actual_val_1=actual_val;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <save_Err+0xa0>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	491e      	ldr	r1, [pc, #120]	; (8002878 <save_Err+0xa4>)
 80027fe:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_1=err_last;
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <save_Err+0xa8>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	491d      	ldr	r1, [pc, #116]	; (8002880 <save_Err+0xac>)
 800280a:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_1=err_next;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <save_Err+0xb0>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	491c      	ldr	r1, [pc, #112]	; (8002888 <save_Err+0xb4>)
 8002816:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800281a:	e025      	b.n	8002868 <save_Err+0x94>
		pre_actual_val_2=actual_val;
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <save_Err+0xa0>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	491a      	ldr	r1, [pc, #104]	; (800288c <save_Err+0xb8>)
 8002824:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_2=err_last;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <save_Err+0xa8>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	4918      	ldr	r1, [pc, #96]	; (8002890 <save_Err+0xbc>)
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_2=err_next;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <save_Err+0xb0>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	4916      	ldr	r1, [pc, #88]	; (8002894 <save_Err+0xc0>)
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002840:	e012      	b.n	8002868 <save_Err+0x94>
		pre_actual_val_3=actual_val;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <save_Err+0xa0>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	4913      	ldr	r1, [pc, #76]	; (8002898 <save_Err+0xc4>)
 800284a:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_3=err_last;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <save_Err+0xa8>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	4911      	ldr	r1, [pc, #68]	; (800289c <save_Err+0xc8>)
 8002856:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_3=err_next;
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <save_Err+0xb0>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	490f      	ldr	r1, [pc, #60]	; (80028a0 <save_Err+0xcc>)
 8002862:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002866:	bf00      	nop
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000500 	.word	0x20000500
 8002878:	20000508 	.word	0x20000508
 800287c:	200004d8 	.word	0x200004d8
 8002880:	200004c0 	.word	0x200004c0
 8002884:	200004f8 	.word	0x200004f8
 8002888:	200004e0 	.word	0x200004e0
 800288c:	20000510 	.word	0x20000510
 8002890:	200004c8 	.word	0x200004c8
 8002894:	200004e8 	.word	0x200004e8
 8002898:	20000518 	.word	0x20000518
 800289c:	200004d0 	.word	0x200004d0
 80028a0:	200004f0 	.word	0x200004f0

080028a4 <PID_Calculation>:
double PID_Calculation(int motor, double actual_val){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	ed87 0b00 	vstr	d0, [r7]

	switch(motor) {
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d04d      	beq.n	8002952 <PID_Calculation+0xae>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	dc6c      	bgt.n	8002996 <PID_Calculation+0xf2>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <PID_Calculation+0x26>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d022      	beq.n	800290e <PID_Calculation+0x6a>
 80028c8:	e065      	b.n	8002996 <PID_Calculation+0xf2>
	    case MOTOR_1:
			actual_val=update_motor_values(target_val_1, actual_val, pre_actual_val_1, err_last_1, err_next_1);
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <PID_Calculation+0x108>)
 80028cc:	ed93 7b00 	vldr	d7, [r3]
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <PID_Calculation+0x10c>)
 80028d2:	ed93 6b00 	vldr	d6, [r3]
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <PID_Calculation+0x110>)
 80028d8:	ed93 5b00 	vldr	d5, [r3]
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <PID_Calculation+0x114>)
 80028de:	ed93 4b00 	vldr	d4, [r3]
 80028e2:	eeb0 3a45 	vmov.f32	s6, s10
 80028e6:	eef0 3a65 	vmov.f32	s7, s11
 80028ea:	eeb0 2a46 	vmov.f32	s4, s12
 80028ee:	eef0 2a66 	vmov.f32	s5, s13
 80028f2:	ed97 1b00 	vldr	d1, [r7]
 80028f6:	eeb0 0a47 	vmov.f32	s0, s14
 80028fa:	eef0 0a67 	vmov.f32	s1, s15
 80028fe:	f7ff fea3 	bl	8002648 <update_motor_values>
 8002902:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_1);
 8002906:	2001      	movs	r0, #1
 8002908:	f7ff ff64 	bl	80027d4 <save_Err>

	        break;
 800290c:	e043      	b.n	8002996 <PID_Calculation+0xf2>
	    case MOTOR_2:
			actual_val=update_motor_values(target_val_2, actual_val, pre_actual_val_2, err_last_2, err_next_2);
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <PID_Calculation+0x118>)
 8002910:	ed93 7b00 	vldr	d7, [r3]
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <PID_Calculation+0x11c>)
 8002916:	ed93 6b00 	vldr	d6, [r3]
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <PID_Calculation+0x120>)
 800291c:	ed93 5b00 	vldr	d5, [r3]
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <PID_Calculation+0x124>)
 8002922:	ed93 4b00 	vldr	d4, [r3]
 8002926:	eeb0 3a45 	vmov.f32	s6, s10
 800292a:	eef0 3a65 	vmov.f32	s7, s11
 800292e:	eeb0 2a46 	vmov.f32	s4, s12
 8002932:	eef0 2a66 	vmov.f32	s5, s13
 8002936:	ed97 1b00 	vldr	d1, [r7]
 800293a:	eeb0 0a47 	vmov.f32	s0, s14
 800293e:	eef0 0a67 	vmov.f32	s1, s15
 8002942:	f7ff fe81 	bl	8002648 <update_motor_values>
 8002946:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_2);
 800294a:	2002      	movs	r0, #2
 800294c:	f7ff ff42 	bl	80027d4 <save_Err>

	        break;
 8002950:	e021      	b.n	8002996 <PID_Calculation+0xf2>
	    case MOTOR_3:
			actual_val=update_motor_values(target_val_3, actual_val, pre_actual_val_3, err_last_3, err_next_3);
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <PID_Calculation+0x128>)
 8002954:	ed93 7b00 	vldr	d7, [r3]
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <PID_Calculation+0x12c>)
 800295a:	ed93 6b00 	vldr	d6, [r3]
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <PID_Calculation+0x130>)
 8002960:	ed93 5b00 	vldr	d5, [r3]
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <PID_Calculation+0x134>)
 8002966:	ed93 4b00 	vldr	d4, [r3]
 800296a:	eeb0 3a45 	vmov.f32	s6, s10
 800296e:	eef0 3a65 	vmov.f32	s7, s11
 8002972:	eeb0 2a46 	vmov.f32	s4, s12
 8002976:	eef0 2a66 	vmov.f32	s5, s13
 800297a:	ed97 1b00 	vldr	d1, [r7]
 800297e:	eeb0 0a47 	vmov.f32	s0, s14
 8002982:	eef0 0a67 	vmov.f32	s1, s15
 8002986:	f7ff fe5f 	bl	8002648 <update_motor_values>
 800298a:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_3);
 800298e:	2003      	movs	r0, #3
 8002990:	f7ff ff20 	bl	80027d4 <save_Err>

	        break;
 8002994:	bf00      	nop
	}
	return actual_val;
 8002996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800299a:	ec43 2b17 	vmov	d7, r2, r3
}
 800299e:	eeb0 0a47 	vmov.f32	s0, s14
 80029a2:	eef0 0a67 	vmov.f32	s1, s15
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200004a0 	.word	0x200004a0
 80029b0:	20000508 	.word	0x20000508
 80029b4:	200004c0 	.word	0x200004c0
 80029b8:	200004e0 	.word	0x200004e0
 80029bc:	200004a8 	.word	0x200004a8
 80029c0:	20000510 	.word	0x20000510
 80029c4:	200004c8 	.word	0x200004c8
 80029c8:	200004e8 	.word	0x200004e8
 80029cc:	200004b0 	.word	0x200004b0
 80029d0:	20000518 	.word	0x20000518
 80029d4:	200004d0 	.word	0x200004d0
 80029d8:	200004f0 	.word	0x200004f0

080029dc <PID>:

void PID(void){
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0

	rpm_1=get_rpm(MOTOR_1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fb05 	bl	8000ff0 <get_rpm>
 80029e6:	eeb0 7a40 	vmov.f32	s14, s0
 80029ea:	eef0 7a60 	vmov.f32	s15, s1
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <PID+0xe8>)
 80029f0:	ed83 7b00 	vstr	d7, [r3]

	rpm_2=get_rpm(MOTOR_2);
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fe fafb 	bl	8000ff0 <get_rpm>
 80029fa:	eeb0 7a40 	vmov.f32	s14, s0
 80029fe:	eef0 7a60 	vmov.f32	s15, s1
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <PID+0xec>)
 8002a04:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f7fe faf1 	bl	8000ff0 <get_rpm>
 8002a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002a12:	eef0 7a60 	vmov.f32	s15, s1
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <PID+0xf0>)
 8002a18:	ed83 7b00 	vstr	d7, [r3]

	out_1=PID_Calculation(MOTOR_1, rpm_1);
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <PID+0xe8>)
 8002a1e:	ed93 7b00 	vldr	d7, [r3]
 8002a22:	eeb0 0a47 	vmov.f32	s0, s14
 8002a26:	eef0 0a67 	vmov.f32	s1, s15
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff ff3a 	bl	80028a4 <PID_Calculation>
 8002a30:	eeb0 7a40 	vmov.f32	s14, s0
 8002a34:	eef0 7a60 	vmov.f32	s15, s1
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <PID+0xf4>)
 8002a3a:	ed83 7b00 	vstr	d7, [r3]
	out_2=PID_Calculation(MOTOR_2, rpm_2);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <PID+0xec>)
 8002a40:	ed93 7b00 	vldr	d7, [r3]
 8002a44:	eeb0 0a47 	vmov.f32	s0, s14
 8002a48:	eef0 0a67 	vmov.f32	s1, s15
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7ff ff29 	bl	80028a4 <PID_Calculation>
 8002a52:	eeb0 7a40 	vmov.f32	s14, s0
 8002a56:	eef0 7a60 	vmov.f32	s15, s1
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <PID+0xf8>)
 8002a5c:	ed83 7b00 	vstr	d7, [r3]
	out_3=PID_Calculation(MOTOR_3, rpm_3);
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <PID+0xf0>)
 8002a62:	ed93 7b00 	vldr	d7, [r3]
 8002a66:	eeb0 0a47 	vmov.f32	s0, s14
 8002a6a:	eef0 0a67 	vmov.f32	s1, s15
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f7ff ff18 	bl	80028a4 <PID_Calculation>
 8002a74:	eeb0 7a40 	vmov.f32	s14, s0
 8002a78:	eef0 7a60 	vmov.f32	s15, s1
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <PID+0xfc>)
 8002a7e:	ed83 7b00 	vstr	d7, [r3]

	set_duty_cycle(MOTOR_1, out_1);
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <PID+0xf4>)
 8002a84:	ed93 7b00 	vldr	d7, [r3]
 8002a88:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8c:	eef0 0a67 	vmov.f32	s1, s15
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7ff fc7b 	bl	800238c <set_duty_cycle>
	set_duty_cycle(MOTOR_2, out_2);
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <PID+0xf8>)
 8002a98:	ed93 7b00 	vldr	d7, [r3]
 8002a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa0:	eef0 0a67 	vmov.f32	s1, s15
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f7ff fc71 	bl	800238c <set_duty_cycle>
	set_duty_cycle(MOTOR_3, out_3);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <PID+0xfc>)
 8002aac:	ed93 7b00 	vldr	d7, [r3]
 8002ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab4:	eef0 0a67 	vmov.f32	s1, s15
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f7ff fc67 	bl	800238c <set_duty_cycle>

//	UARTprintf("SET_POINT >>>>> V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n \t out_1: %f \t out_2: %f \t out_3: %f \r\n \t rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r\n\n", V1,V2,V3,out_1,out_2,out_3, rpm_1, rpm_2, rpm_3);
//	UARTprintf("V1: %d \t V2: %d \t V3: %d \r\n",(uint32_t)V1,(uint32_t)V2,(uint32_t)V3);
//	UARTprintf("out_1: %d \t out_2: %d \t out_3: %d \r \n",(uint32_t)out_1,(uint32_t)out_2,(uint32_t)out_3);
//	UARTprintf("rpm_1: %d \t rpm_2: %d \t rpm_3: %d \r \n \r\n", (uint32_t)rpm_1, (uint32_t)rpm_2, (uint32_t)rpm_3);
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000440 	.word	0x20000440
 8002ac8:	20000448 	.word	0x20000448
 8002acc:	20000450 	.word	0x20000450
 8002ad0:	20000428 	.word	0x20000428
 8002ad4:	20000430 	.word	0x20000430
 8002ad8:	20000438 	.word	0x20000438

08002adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_MspInit+0x54>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_MspInit+0x54>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_MspInit+0x54>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_MspInit+0x54>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_MspInit+0x54>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_MspInit+0x54>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	210f      	movs	r1, #15
 8002b1e:	f06f 0001 	mvn.w	r0, #1
 8002b22:	f000 fcb5 	bl	8003490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800

08002b34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a50      	ldr	r2, [pc, #320]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x160>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d135      	bne.n	8002bc2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a4e      	ldr	r2, [pc, #312]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	4b48      	ldr	r3, [pc, #288]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a47      	ldr	r2, [pc, #284]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	483c      	ldr	r0, [pc, #240]	; (8002c9c <HAL_TIM_Encoder_MspInit+0x168>)
 8002bac:	f000 fd2c 	bl	8003608 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	2019      	movs	r0, #25
 8002bb6:	f000 fc6b 	bl	8003490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bba:	2019      	movs	r0, #25
 8002bbc:	f000 fc84 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bc0:	e063      	b.n	8002c8a <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a36      	ldr	r2, [pc, #216]	; (8002ca0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d12c      	bne.n	8002c26 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	6413      	str	r3, [r2, #64]	; 0x40
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c04:	23c0      	movs	r3, #192	; 0xc0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c14:	2302      	movs	r3, #2
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c20:	f000 fcf2 	bl	8003608 <HAL_GPIO_Init>
}
 8002c24:	e031      	b.n	8002c8a <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM4)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0x174>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d12c      	bne.n	8002c8a <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x164>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c68:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c82:	4619      	mov	r1, r3
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <HAL_TIM_Encoder_MspInit+0x178>)
 8002c86:	f000 fcbf 	bl	8003608 <HAL_GPIO_Init>
}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40020c00 	.word	0x40020c00

08002cb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_TIM_PWM_MspInit+0x3c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10d      	bne.n	8002cde <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_TIM_Base_MspInit+0x3c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10d      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_TIM_Base_MspInit+0x40>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_TIM_Base_MspInit+0x40>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_TIM_Base_MspInit+0x40>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_TIM_MspPostInit+0xb0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d11e      	bne.n	8002d98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d76:	230c      	movs	r3, #12
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d86:	2302      	movs	r3, #2
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4817      	ldr	r0, [pc, #92]	; (8002df0 <HAL_TIM_MspPostInit+0xb8>)
 8002d92:	f000 fc39 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d96:	e022      	b.n	8002dde <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM9)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_TIM_MspPostInit+0xbc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d11d      	bne.n	8002dde <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_TIM_MspPostInit+0xb4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <HAL_TIM_MspPostInit+0xc0>)
 8002dda:	f000 fc15 	bl	8003608 <HAL_GPIO_Init>
}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_UART_MspInit+0x94>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d134      	bne.n	8002e88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e68:	2307      	movs	r3, #7
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4809      	ldr	r0, [pc, #36]	; (8002e98 <HAL_UART_MspInit+0x9c>)
 8002e74:	f000 fbc8 	bl	8003608 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2106      	movs	r1, #6
 8002e7c:	2027      	movs	r0, #39	; 0x27
 8002e7e:	f000 fb07 	bl	8003490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e82:	2027      	movs	r0, #39	; 0x27
 8002e84:	f000 fb20 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e88:	bf00      	nop
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40004800 	.word	0x40004800
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020400 	.word	0x40020400

08002e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_InitTick+0xd0>)
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <HAL_InitTick+0xd0>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_InitTick+0xd0>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec8:	f107 020c 	add.w	r2, r7, #12
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f9a6 	bl	8004224 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f001 f990 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8002edc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_InitTick+0xd4>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_InitTick+0xd8>)
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_InitTick+0xdc>)
 8002ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_InitTick+0xd8>)
 8002ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_InitTick+0xd8>)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_InitTick+0xd8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_InitTick+0xd8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_InitTick+0xd8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <HAL_InitTick+0xd8>)
 8002f14:	f001 f9b8 	bl	8004288 <HAL_TIM_Base_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11b      	bne.n	8002f5e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002f26:	4813      	ldr	r0, [pc, #76]	; (8002f74 <HAL_InitTick+0xd8>)
 8002f28:	f001 f9fe 	bl	8004328 <HAL_TIM_Base_Start_IT>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d111      	bne.n	8002f5e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f3a:	2019      	movs	r0, #25
 8002f3c:	f000 fac4 	bl	80034c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d808      	bhi.n	8002f58 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002f46:	2200      	movs	r2, #0
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	2019      	movs	r0, #25
 8002f4c:	f000 faa0 	bl	8003490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_InitTick+0xe0>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e002      	b.n	8002f5e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3730      	adds	r7, #48	; 0x30
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	20000520 	.word	0x20000520
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	2000002c 	.word	0x2000002c

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f84:	e7fe      	b.n	8002f84 <NMI_Handler+0x4>

08002f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <MemManage_Handler+0x4>

08002f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <BusFault_Handler+0x4>

08002f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <UsageFault_Handler+0x4>

08002f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002fb2:	f001 fc75 	bl	80048a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002fb6:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002fb8:	f001 fc72 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000234 	.word	0x20000234
 8002fc4:	20000520 	.word	0x20000520

08002fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTStdioIntHandler();
 8002fcc:	f007 fcc6 	bl	800a95c <UARTStdioIntHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	msgQueueObj_t msg;
	msg.buffer_index=0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	707b      	strb	r3, [r7, #1]
//
//    UARTgets(msg.buffer,10);
	HAL_UART_Receive(&huart3, (uint8_t*)&msg.buffer[msg.buffer_index++], sizeof(msg.buffer),0);
 8002fde:	787b      	ldrb	r3, [r7, #1]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	707a      	strb	r2, [r7, #1]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	463b      	mov	r3, r7
 8002fea:	1899      	adds	r1, r3, r2
 8002fec:	2300      	movs	r3, #0
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4811      	ldr	r0, [pc, #68]	; (8003038 <USART3_IRQHandler+0x64>)
 8002ff2:	f002 faf3 	bl	80055dc <HAL_UART_Receive>
//	UARTprintf("msg.buffer: %c \r\n",(char)msg.buffer[0]);
	osMessageQueuePut(myButtonsHandle, &msg, 0, 0);
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <USART3_IRQHandler+0x68>)
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	4639      	mov	r1, r7
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2200      	movs	r2, #0
 8003000:	f004 fa46 	bl	8007490 <osMessageQueuePut>
 8003004:	2300      	movs	r3, #0
 8003006:	703b      	strb	r3, [r7, #0]

	memset(msg.buffer, 0, sizeof(msg.buffer));

	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(CONTROLHandle);
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <USART3_IRQHandler+0x6c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fb93 	bl	8008738 <xTaskResumeFromISR>
 8003012:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <USART3_IRQHandler+0x56>
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <USART3_IRQHandler+0x70>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy


  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800302a:	4803      	ldr	r0, [pc, #12]	; (8003038 <USART3_IRQHandler+0x64>)
 800302c:	f002 fb6e 	bl	800570c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	2000039c 	.word	0x2000039c
 800303c:	200003ec 	.word	0x200003ec
 8003040:	200003e4 	.word	0x200003e4
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <ITM_SendChar+0x48>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <ITM_SendChar+0x48>)
 8003058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305c:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <ITM_SendChar+0x4c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <ITM_SendChar+0x4c>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800306a:	bf00      	nop
 800306c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f8      	beq.n	800306c <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800307a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000edfc 	.word	0xe000edfc
 8003094:	e0000e00 	.word	0xe0000e00

08003098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_kill>:

int _kill(int pid, int sig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b2:	f008 fd0f 	bl	800bad4 <__errno>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2216      	movs	r2, #22
 80030ba:	601a      	str	r2, [r3, #0]
  return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_exit>:

void _exit (int status)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ffe7 	bl	80030a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030da:	e7fe      	b.n	80030da <_exit+0x12>

080030dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00a      	b.n	8003104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ee:	f3af 8000 	nop.w
 80030f2:	4601      	mov	r1, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	60ba      	str	r2, [r7, #8]
 80030fa:	b2ca      	uxtb	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3301      	adds	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	dbf0      	blt.n	80030ee <_read+0x12>
  }

  return len;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e009      	b.n	800313c <_write+0x26>
  {
//    __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	60ba      	str	r2, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff89 	bl	8003048 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	dbf1      	blt.n	8003128 <_write+0x12>
  }
  return len;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_close>:

int _close(int file)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003176:	605a      	str	r2, [r3, #4]
  return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_isatty>:

int _isatty(int file)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f008 fc74 	bl	800bad4 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20020000 	.word	0x20020000
 8003218:	00000400 	.word	0x00000400
 800321c:	20000568 	.word	0x20000568
 8003220:	200054a8 	.word	0x200054a8

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003280 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800324c:	f7ff ffea 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	; (8003288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	; (8003294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003276:	f008 fc33 	bl	800bae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7fe f915 	bl	80014a8 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800328c:	08010af0 	.word	0x08010af0
  ldr r2, =_sbss
 8003290:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003294:	200054a8 	.word	0x200054a8

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 f8d8 	bl	800347a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	200f      	movs	r0, #15
 80032cc:	f7ff fde6 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fc04 	bl	8002adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_IncTick+0x20>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_IncTick+0x24>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_IncTick+0x24>)
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000030 	.word	0x20000030
 8003304:	2000056c 	.word	0x2000056c

08003308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_GetTick+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000056c 	.word	0x2000056c

08003320 <__NVIC_SetPriorityGrouping>:
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff4c 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a2:	f7ff ff61 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f7ff ffb1 	bl	8003414 <NVIC_EncodePriority>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff80 	bl	80033c0 <__NVIC_SetPriority>
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff54 	bl	8003384 <__NVIC_EnableIRQ>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034f2:	f7ff ff09 	bl	8003308 <HAL_GetTick>
 80034f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e052      	b.n	80035bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0216 	bic.w	r2, r2, #22
 8003524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_DMA_Abort+0x62>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003566:	e013      	b.n	8003590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003568:	f7ff fece 	bl	8003308 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b05      	cmp	r3, #5
 8003574:	d90c      	bls.n	8003590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2203      	movs	r2, #3
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e015      	b.n	80035bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e4      	bne.n	8003568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	223f      	movs	r2, #63	; 0x3f
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d004      	beq.n	80035e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e00c      	b.n	80035fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e16b      	b.n	80038fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 815a 	bne.w	80038f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d005      	beq.n	800365a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003656:	2b02      	cmp	r3, #2
 8003658:	d130      	bne.n	80036bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 0201 	and.w	r2, r3, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d017      	beq.n	80036f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d123      	bne.n	800374c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	220f      	movs	r2, #15
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80b4 	beq.w	80038f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b60      	ldr	r3, [pc, #384]	; (8003914 <HAL_GPIO_Init+0x30c>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a5f      	ldr	r2, [pc, #380]	; (8003914 <HAL_GPIO_Init+0x30c>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b5d      	ldr	r3, [pc, #372]	; (8003914 <HAL_GPIO_Init+0x30c>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037aa:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <HAL_GPIO_Init+0x310>)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a52      	ldr	r2, [pc, #328]	; (800391c <HAL_GPIO_Init+0x314>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02b      	beq.n	800382e <HAL_GPIO_Init+0x226>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a51      	ldr	r2, [pc, #324]	; (8003920 <HAL_GPIO_Init+0x318>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d025      	beq.n	800382a <HAL_GPIO_Init+0x222>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a50      	ldr	r2, [pc, #320]	; (8003924 <HAL_GPIO_Init+0x31c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01f      	beq.n	8003826 <HAL_GPIO_Init+0x21e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <HAL_GPIO_Init+0x320>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x21a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4e      	ldr	r2, [pc, #312]	; (800392c <HAL_GPIO_Init+0x324>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x216>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4d      	ldr	r2, [pc, #308]	; (8003930 <HAL_GPIO_Init+0x328>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x212>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <HAL_GPIO_Init+0x32c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x20e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4b      	ldr	r2, [pc, #300]	; (8003938 <HAL_GPIO_Init+0x330>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x20a>
 800380e:	2307      	movs	r3, #7
 8003810:	e00e      	b.n	8003830 <HAL_GPIO_Init+0x228>
 8003812:	2308      	movs	r3, #8
 8003814:	e00c      	b.n	8003830 <HAL_GPIO_Init+0x228>
 8003816:	2306      	movs	r3, #6
 8003818:	e00a      	b.n	8003830 <HAL_GPIO_Init+0x228>
 800381a:	2305      	movs	r3, #5
 800381c:	e008      	b.n	8003830 <HAL_GPIO_Init+0x228>
 800381e:	2304      	movs	r3, #4
 8003820:	e006      	b.n	8003830 <HAL_GPIO_Init+0x228>
 8003822:	2303      	movs	r3, #3
 8003824:	e004      	b.n	8003830 <HAL_GPIO_Init+0x228>
 8003826:	2302      	movs	r3, #2
 8003828:	e002      	b.n	8003830 <HAL_GPIO_Init+0x228>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_GPIO_Init+0x228>
 800382e:	2300      	movs	r3, #0
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f002 0203 	and.w	r2, r2, #3
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	4093      	lsls	r3, r2
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003840:	4935      	ldr	r1, [pc, #212]	; (8003918 <HAL_GPIO_Init+0x310>)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	3302      	adds	r3, #2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_GPIO_Init+0x334>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003872:	4a32      	ldr	r2, [pc, #200]	; (800393c <HAL_GPIO_Init+0x334>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_GPIO_Init+0x334>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800389c:	4a27      	ldr	r2, [pc, #156]	; (800393c <HAL_GPIO_Init+0x334>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <HAL_GPIO_Init+0x334>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_GPIO_Init+0x334>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_GPIO_Init+0x334>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_GPIO_Init+0x334>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	f67f ae90 	bls.w	8003624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	40013800 	.word	0x40013800
 800391c:	40020000 	.word	0x40020000
 8003920:	40020400 	.word	0x40020400
 8003924:	40020800 	.word	0x40020800
 8003928:	40020c00 	.word	0x40020c00
 800392c:	40021000 	.word	0x40021000
 8003930:	40021400 	.word	0x40021400
 8003934:	40021800 	.word	0x40021800
 8003938:	40021c00 	.word	0x40021c00
 800393c:	40013c00 	.word	0x40013c00

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800395c:	e003      	b.n	8003966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	619a      	str	r2, [r3, #24]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e267      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b85      	ldr	r3, [pc, #532]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b82      	ldr	r3, [pc, #520]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b7e      	ldr	r3, [pc, #504]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x108>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e242      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x74>
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6c      	ldr	r2, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 8003a0c:	4b69      	ldr	r3, [pc, #420]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b66      	ldr	r3, [pc, #408]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7ff fc6c 	bl	8003308 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7ff fc68 	bl	8003308 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e207      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xc0>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7ff fc58 	bl	8003308 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7ff fc54 	bl	8003308 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1f3      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0xe8>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1c7      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4937      	ldr	r1, [pc, #220]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7ff fc0d 	bl	8003308 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af2:	f7ff fc09 	bl	8003308 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1a8      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4925      	ldr	r1, [pc, #148]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7ff fbec 	bl	8003308 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b34:	f7ff fbe8 	bl	8003308 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e187      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d036      	beq.n	8003bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7ff fbcc 	bl	8003308 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b74:	f7ff fbc8 	bl	8003308 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e167      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x200>
 8003b92:	e01b      	b.n	8003bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7ff fbb5 	bl	8003308 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	e00e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7ff fbb1 	bl	8003308 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d907      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e150      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8097 	beq.w	8003d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b81      	ldr	r3, [pc, #516]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	4b7d      	ldr	r3, [pc, #500]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b77      	ldr	r3, [pc, #476]	; (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d118      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c16:	4b74      	ldr	r3, [pc, #464]	; (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a73      	ldr	r2, [pc, #460]	; (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c22:	f7ff fb71 	bl	8003308 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7ff fb6d 	bl	8003308 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e10c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x2ea>
 8003c50:	4b64      	ldr	r3, [pc, #400]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a63      	ldr	r2, [pc, #396]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x30c>
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	4b5c      	ldr	r3, [pc, #368]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a5b      	ldr	r2, [pc, #364]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c80:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a57      	ldr	r2, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8c:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a54      	ldr	r2, [pc, #336]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0304 	bic.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7ff fb32 	bl	8003308 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7ff fb2e 	bl	8003308 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0cb      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7ff fb1c 	bl	8003308 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7ff fb18 	bl	8003308 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0b5      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a1 	beq.w	8003e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d12:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d05c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d141      	bne.n	8003daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7ff faec 	bl	8003308 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7ff fae8 	bl	8003308 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e087      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	491b      	ldr	r1, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7ff fac1 	bl	8003308 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7ff fabd 	bl	8003308 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e05c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x416>
 8003da8:	e054      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x478>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7ff faaa 	bl	8003308 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7ff faa6 	bl	8003308 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e045      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e038      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x4ec>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0cc      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d90c      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d044      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e067      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4934      	ldr	r1, [pc, #208]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f54:	f7ff f9d8 	bl	8003308 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7ff f9d4 	bl	8003308 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e04f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 020c 	and.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1eb      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d20c      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe ff46 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00
 8004020:	40023800 	.word	0x40023800
 8004024:	080104c4 	.word	0x080104c4
 8004028:	20000028 	.word	0x20000028
 800402c:	2000002c 	.word	0x2000002c

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b090      	sub	sp, #64	; 0x40
 8004036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004040:	2300      	movs	r3, #0
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d00d      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x40>
 8004054:	2b08      	cmp	r3, #8
 8004056:	f200 80a1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x16c>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d003      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x3a>
 8004062:	e09b      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004068:	e09b      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800406e:	e098      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b4d      	ldr	r3, [pc, #308]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d028      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	2200      	movs	r2, #0
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	627a      	str	r2, [r7, #36]	; 0x24
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004098:	2100      	movs	r1, #0
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409c:	fb03 f201 	mul.w	r2, r3, r1
 80040a0:	2300      	movs	r3, #0
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	4a43      	ldr	r2, [pc, #268]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040aa:	fba0 1202 	umull	r1, r2, r0, r2
 80040ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b0:	460a      	mov	r2, r1
 80040b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80040b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b6:	4413      	add	r3, r2
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	2200      	movs	r2, #0
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040ca:	f7fc fddd 	bl	8000c88 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4613      	mov	r3, r2
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d6:	e053      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	2200      	movs	r2, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	617a      	str	r2, [r7, #20]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ea:	f04f 0b00 	mov.w	fp, #0
 80040ee:	4652      	mov	r2, sl
 80040f0:	465b      	mov	r3, fp
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	0159      	lsls	r1, r3, #5
 80040fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004100:	0150      	lsls	r0, r2, #5
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	ebb2 080a 	subs.w	r8, r2, sl
 800410a:	eb63 090b 	sbc.w	r9, r3, fp
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800411a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800411e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004122:	ebb2 0408 	subs.w	r4, r2, r8
 8004126:	eb63 0509 	sbc.w	r5, r3, r9
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	00eb      	lsls	r3, r5, #3
 8004134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004138:	00e2      	lsls	r2, r4, #3
 800413a:	4614      	mov	r4, r2
 800413c:	461d      	mov	r5, r3
 800413e:	eb14 030a 	adds.w	r3, r4, sl
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	eb45 030b 	adc.w	r3, r5, fp
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	2200      	movs	r2, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	60fa      	str	r2, [r7, #12]
 8004170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004174:	f7fc fd88 	bl	8000c88 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3740      	adds	r7, #64	; 0x40
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	017d7840 	.word	0x017d7840

080041bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000028 	.word	0x20000028

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff0 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	080104d4 	.word	0x080104d4

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004200:	f7ff ffdc 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0b5b      	lsrs	r3, r3, #13
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	080104d4 	.word	0x080104d4

08004224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	220f      	movs	r2, #15
 8004232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_GetClockConfig+0x5c>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <HAL_RCC_GetClockConfig+0x5c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RCC_GetClockConfig+0x5c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_GetClockConfig+0x5c>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RCC_GetClockConfig+0x60>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0207 	and.w	r2, r3, #7
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40023c00 	.word	0x40023c00

08004288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e041      	b.n	800431e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe fd20 	bl	8002cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fd8c 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e04e      	b.n	80043de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <HAL_TIM_Base_Start_IT+0xc4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d01d      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_TIM_Base_Start_IT+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIM_Base_Start_IT+0xdc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d010      	beq.n	80043dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ca:	e007      	b.n	80043dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800

08004408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e041      	b.n	800449e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fc3e 	bl	8002cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fccc 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_TIM_PWM_Start+0x24>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e022      	b.n	8004512 <HAL_TIM_PWM_Start+0x6a>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d109      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x3e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e015      	b.n	8004512 <HAL_TIM_PWM_Start+0x6a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d109      	bne.n	8004500 <HAL_TIM_PWM_Start+0x58>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e008      	b.n	8004512 <HAL_TIM_PWM_Start+0x6a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07c      	b.n	8004614 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Start+0x82>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004528:	e013      	b.n	8004552 <HAL_TIM_PWM_Start+0xaa>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Start+0x92>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004538:	e00b      	b.n	8004552 <HAL_TIM_PWM_Start+0xaa>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004548:	e003      	b.n	8004552 <HAL_TIM_PWM_Start+0xaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff38 	bl	80053d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2d      	ldr	r2, [pc, #180]	; (800461c <HAL_TIM_PWM_Start+0x174>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_PWM_Start+0xcc>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <HAL_TIM_PWM_Start+0x178>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_TIM_PWM_Start+0xd0>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_TIM_PWM_Start+0xd2>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a22      	ldr	r2, [pc, #136]	; (800461c <HAL_TIM_PWM_Start+0x174>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d01d      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <HAL_TIM_PWM_Start+0x17c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_TIM_PWM_Start+0x180>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_TIM_PWM_Start+0x184>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_TIM_PWM_Start+0x178>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_TIM_PWM_Start+0x188>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIM_PWM_Start+0x136>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <HAL_TIM_PWM_Start+0x18c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d111      	bne.n	8004602 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d010      	beq.n	8004612 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004600:	e007      	b.n	8004612 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40010000 	.word	0x40010000
 8004620:	40010400 	.word	0x40010400
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40014000 	.word	0x40014000
 8004634:	40001800 	.word	0x40001800

08004638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e097      	b.n	800477c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe fa67 	bl	8002b34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f000 fba9 	bl	8004de4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	4313      	orrs	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046d8:	f023 030c 	bic.w	r3, r3, #12
 80046dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4313      	orrs	r3, r2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	011a      	lsls	r2, r3, #4
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	4313      	orrs	r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	4313      	orrs	r3, r2
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800479c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d102      	bne.n	80047c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047ba:	7b7b      	ldrb	r3, [r7, #13]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e069      	b.n	8004898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d4:	e031      	b.n	800483a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d110      	bne.n	80047fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047e2:	7b3b      	ldrb	r3, [r7, #12]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d001      	beq.n	80047ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e055      	b.n	8004898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047fc:	e01d      	b.n	800483a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d108      	bne.n	8004816 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004804:	7bbb      	ldrb	r3, [r7, #14]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800480a:	7b7b      	ldrb	r3, [r7, #13]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004810:	7b3b      	ldrb	r3, [r7, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d001      	beq.n	800481a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e03e      	b.n	8004898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_Encoder_Start+0xc4>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d008      	beq.n	8004858 <HAL_TIM_Encoder_Start+0xd4>
 8004846:	e00f      	b.n	8004868 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fdbd 	bl	80053d0 <TIM_CCxChannelCmd>
      break;
 8004856:	e016      	b.n	8004886 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	2104      	movs	r1, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fdb5 	bl	80053d0 <TIM_CCxChannelCmd>
      break;
 8004866:	e00e      	b.n	8004886 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2201      	movs	r2, #1
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fdad 	bl	80053d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	2104      	movs	r1, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fda6 	bl	80053d0 <TIM_CCxChannelCmd>
      break;
 8004884:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa5b 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa4d 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa5e 	bl	8004dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0204 	mvn.w	r2, #4
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa35 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa27 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa38 	bl	8004dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa0f 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa01 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa12 	bl	8004dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d020      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9e9 	bl	8004da6 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9db 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f9ec 	bl	8004dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd fa60 	bl	8001ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fd7c 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9bd 	bl	8004dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0220 	mvn.w	r2, #32
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fd4e 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0ae      	b.n	8004bfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f200 809f 	bhi.w	8004bec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bed 	.word	0x08004bed
 8004ac0:	08004bed 	.word	0x08004bed
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004bed 	.word	0x08004bed
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004bed 	.word	0x08004bed
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004bed 	.word	0x08004bed
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bed 	.word	0x08004bed
 8004ae4:	08004bab 	.word	0x08004bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa24 	bl	8004f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e064      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa74 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e043      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fac9 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e023      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fb1d 	bl	80051f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0b4      	b.n	8004d8a <HAL_TIM_ConfigClockSource+0x186>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c58:	d03e      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5e:	f200 8087 	bhi.w	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	f000 8086 	beq.w	8004d76 <HAL_TIM_ConfigClockSource+0x172>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d87f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d01a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0xa6>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d87b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b60      	cmp	r3, #96	; 0x60
 8004c7a:	d050      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x11a>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d877      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b50      	cmp	r3, #80	; 0x50
 8004c82:	d03c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0xfa>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d873      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d058      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x13a>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d86f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d064      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d86b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d060      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d867      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05c      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d05a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	e062      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	f000 fb69 	bl	8005390 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	609a      	str	r2, [r3, #8]
      break;
 8004cd6:	e04f      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	f000 fb52 	bl	8005390 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfa:	609a      	str	r2, [r3, #8]
      break;
 8004cfc:	e03c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f000 fac6 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2150      	movs	r1, #80	; 0x50
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fb1f 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d1c:	e02c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 fae5 	bl	80052fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2160      	movs	r1, #96	; 0x60
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fb0f 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 faa6 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2140      	movs	r1, #64	; 0x40
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 faff 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e00c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 faf6 	bl	800535a <TIM_ITRx_SetConfig>
      break;
 8004d6e:	e003      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e000      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a46      	ldr	r2, [pc, #280]	; (8004f10 <TIM_Base_SetConfig+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a43      	ldr	r2, [pc, #268]	; (8004f14 <TIM_Base_SetConfig+0x130>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <TIM_Base_SetConfig+0x134>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <TIM_Base_SetConfig+0x138>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a40      	ldr	r2, [pc, #256]	; (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d108      	bne.n	8004e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e44:	d027      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <TIM_Base_SetConfig+0x130>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d023      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <TIM_Base_SetConfig+0x134>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01f      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a30      	ldr	r2, [pc, #192]	; (8004f1c <TIM_Base_SetConfig+0x138>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d017      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <TIM_Base_SetConfig+0x140>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <TIM_Base_SetConfig+0x144>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <TIM_Base_SetConfig+0x148>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <TIM_Base_SetConfig+0x14c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <TIM_Base_SetConfig+0x150>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <TIM_Base_SetConfig+0x154>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <TIM_Base_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0xf8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	611a      	str	r2, [r3, #16]
  }
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40001800 	.word	0x40001800
 8004f34:	40001c00 	.word	0x40001c00
 8004f38:	40002000 	.word	0x40002000

08004f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC1_SetConfig+0x64>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10c      	bne.n	8004fba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0308 	bic.w	r3, r3, #8
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0304 	bic.w	r3, r3, #4
 8004fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0x8e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f023 0210 	bic.w	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a22      	ldr	r2, [pc, #136]	; (8005100 <TIM_OC2_SetConfig+0xe4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0x68>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_OC2_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC2_SetConfig+0xe4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC2_SetConfig+0x94>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC2_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d113      	bne.n	80050d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC3_SetConfig+0xe0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x66>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10d      	bne.n	800518a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC3_SetConfig+0xe0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x92>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <TIM_OC4_SetConfig+0xa4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC4_SetConfig+0x68>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a11      	ldr	r2, [pc, #68]	; (8005298 <TIM_OC4_SetConfig+0xa8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 030a 	bic.w	r3, r3, #10
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b087      	sub	sp, #28
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f023 0210 	bic.w	r2, r3, #16
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	f043 0307 	orr.w	r3, r3, #7
 800537c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2201      	movs	r2, #1
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e05a      	b.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d01d      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1d      	ldr	r2, [pc, #116]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10c      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40010400 	.word	0x40010400
 800550c:	40014000 	.word	0x40014000
 8005510:	40001800 	.word	0x40001800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e042      	b.n	80055d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd fc4a 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fd75 	bl	8006070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	f040 8081 	bne.w	8005700 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_UART_Receive+0x2e>
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e079      	b.n	8005702 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	; 0x22
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fd fe71 	bl	8003308 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Receive+0x74>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005658:	e047      	b.n	80056ea <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2120      	movs	r1, #32
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fb0d 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e042      	b.n	8005702 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10c      	bne.n	800569c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	b29a      	uxth	r2, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e01f      	b.n	80056dc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d007      	beq.n	80056b6 <HAL_UART_Receive+0xda>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_UART_Receive+0xe8>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e008      	b.n	80056d6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3301      	adds	r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1b2      	bne.n	800565a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b0ba      	sub	sp, #232	; 0xe8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800574a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_UART_IRQHandler+0x66>
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fbc2 	bl	8005ef4 <UART_Receive_IT>
      return;
 8005770:	e25b      	b.n	8005c2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80de 	beq.w	8005938 <HAL_UART_IRQHandler+0x22c>
 800577c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80d1 	beq.w	8005938 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <HAL_UART_IRQHandler+0xae>
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	f043 0201 	orr.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_UART_IRQHandler+0xd2>
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_UART_IRQHandler+0xf6>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d011      	beq.n	8005832 <HAL_UART_IRQHandler+0x126>
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800581a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	f043 0208 	orr.w	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 81f2 	beq.w	8005c20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_UART_IRQHandler+0x14e>
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb4d 	bl	8005ef4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_UART_IRQHandler+0x17a>
 800587e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d04f      	beq.n	8005926 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa55 	bl	8005d36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d141      	bne.n	800591e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3314      	adds	r3, #20
 80058c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d9      	bne.n	800589a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	4a7e      	ldr	r2, [pc, #504]	; (8005aec <HAL_UART_IRQHandler+0x3e0>)
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fe62 	bl	80035c4 <HAL_DMA_Abort_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e00e      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f99e 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	e00a      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f99a 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f996 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005932:	e175      	b.n	8005c20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	bf00      	nop
    return;
 8005936:	e173      	b.n	8005c20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 814f 	bne.w	8005be0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8148 	beq.w	8005be0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8141 	beq.w	8005be0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	f040 80b6 	bne.w	8005af0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8145 	beq.w	8005c24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800599e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059a2:	429a      	cmp	r2, r3
 80059a4:	f080 813e 	bcs.w	8005c24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ba:	f000 8088 	beq.w	8005ace <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e1      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ab0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ab2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e3      	bne.n	8005a8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd fd0b 	bl	80034e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8c1 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aea:	e09b      	b.n	8005c24 <HAL_UART_IRQHandler+0x518>
 8005aec:	08005dfd 	.word	0x08005dfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 808e 	beq.w	8005c28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8089 	beq.w	8005c28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e3      	bne.n	8005b16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b72:	633a      	str	r2, [r7, #48]	; 0x30
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e3      	bne.n	8005b4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0310 	bic.w	r3, r3, #16
 8005baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bb8:	61fa      	str	r2, [r7, #28]
 8005bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	69b9      	ldr	r1, [r7, #24]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e3      	bne.n	8005b94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f847 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bde:	e023      	b.n	8005c28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <HAL_UART_IRQHandler+0x4f4>
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f913 	bl	8005e24 <UART_Transmit_IT>
    return;
 8005bfe:	e014      	b.n	8005c2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <HAL_UART_IRQHandler+0x51e>
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f953 	bl	8005ec4 <UART_EndTransmit_IT>
    return;
 8005c1e:	e004      	b.n	8005c2a <HAL_UART_IRQHandler+0x51e>
    return;
 8005c20:	bf00      	nop
 8005c22:	e002      	b.n	8005c2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c28:	bf00      	nop
  }
}
 8005c2a:	37e8      	adds	r7, #232	; 0xe8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c94:	e03b      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d037      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fd fb33 	bl	8003308 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e03a      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d023      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d020      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d01d      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d116      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f81d 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2208      	movs	r2, #8
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00f      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d0b4      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b095      	sub	sp, #84	; 0x54
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5e:	643a      	str	r2, [r7, #64]	; 0x40
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e5      	bne.n	8005d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d119      	bne.n	8005de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0310 	bic.w	r3, r3, #16
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dce:	61ba      	str	r2, [r7, #24]
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005df0:	bf00      	nop
 8005df2:	3754      	adds	r7, #84	; 0x54
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff ff1e 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b21      	cmp	r3, #33	; 0x21
 8005e36:	d13e      	bne.n	8005eb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d114      	bne.n	8005e6c <UART_Transmit_IT+0x48>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]
 8005e6a:	e008      	b.n	8005e7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	1c59      	adds	r1, r3, #1
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6211      	str	r1, [r2, #32]
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fea3 	bl	8005c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b22      	cmp	r3, #34	; 0x22
 8005f06:	f040 80ae 	bne.w	8006066 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f12:	d117      	bne.n	8005f44 <UART_Receive_IT+0x50>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d113      	bne.n	8005f44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	629a      	str	r2, [r3, #40]	; 0x28
 8005f42:	e026      	b.n	8005f92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f56:	d007      	beq.n	8005f68 <UART_Receive_IT+0x74>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <UART_Receive_IT+0x82>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e008      	b.n	8005f88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d15d      	bne.n	8006062 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0220 	bic.w	r2, r2, #32
 8005fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d135      	bne.n	8006058 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	623a      	str	r2, [r7, #32]
 8006014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	6a3a      	ldr	r2, [r7, #32]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fe0b 	bl	8005c6c <HAL_UARTEx_RxEventCallback>
 8006056:	e002      	b.n	800605e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fdf3 	bl	8005c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e002      	b.n	8006068 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b0c0      	sub	sp, #256	; 0x100
 8006076:	af00      	add	r7, sp, #0
 8006078:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	68d9      	ldr	r1, [r3, #12]
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	ea40 0301 	orr.w	r3, r0, r1
 8006098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c8:	f021 010c 	bic.w	r1, r1, #12
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060d6:	430b      	orrs	r3, r1
 80060d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	6999      	ldr	r1, [r3, #24]
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	ea40 0301 	orr.w	r3, r0, r1
 80060f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b8f      	ldr	r3, [pc, #572]	; (800633c <UART_SetConfig+0x2cc>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d005      	beq.n	8006110 <UART_SetConfig+0xa0>
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <UART_SetConfig+0x2d0>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d104      	bne.n	800611a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fe f874 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8006114:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006118:	e003      	b.n	8006122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800611a:	f7fe f85b 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 800611e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612c:	f040 810c 	bne.w	8006348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800613a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800613e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	1891      	adds	r1, r2, r2
 8006148:	65b9      	str	r1, [r7, #88]	; 0x58
 800614a:	415b      	adcs	r3, r3
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006152:	4621      	mov	r1, r4
 8006154:	eb12 0801 	adds.w	r8, r2, r1
 8006158:	4629      	mov	r1, r5
 800615a:	eb43 0901 	adc.w	r9, r3, r1
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800616a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800616e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006172:	4690      	mov	r8, r2
 8006174:	4699      	mov	r9, r3
 8006176:	4623      	mov	r3, r4
 8006178:	eb18 0303 	adds.w	r3, r8, r3
 800617c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006180:	462b      	mov	r3, r5
 8006182:	eb49 0303 	adc.w	r3, r9, r3
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006196:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800619a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800619e:	460b      	mov	r3, r1
 80061a0:	18db      	adds	r3, r3, r3
 80061a2:	653b      	str	r3, [r7, #80]	; 0x50
 80061a4:	4613      	mov	r3, r2
 80061a6:	eb42 0303 	adc.w	r3, r2, r3
 80061aa:	657b      	str	r3, [r7, #84]	; 0x54
 80061ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061b4:	f7fa fd68 	bl	8000c88 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b61      	ldr	r3, [pc, #388]	; (8006344 <UART_SetConfig+0x2d4>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011c      	lsls	r4, r3, #4
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	64b9      	str	r1, [r7, #72]	; 0x48
 80061e0:	415b      	adcs	r3, r3
 80061e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e8:	4641      	mov	r1, r8
 80061ea:	eb12 0a01 	adds.w	sl, r2, r1
 80061ee:	4649      	mov	r1, r9
 80061f0:	eb43 0b01 	adc.w	fp, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006208:	4692      	mov	sl, r2
 800620a:	469b      	mov	fp, r3
 800620c:	4643      	mov	r3, r8
 800620e:	eb1a 0303 	adds.w	r3, sl, r3
 8006212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006216:	464b      	mov	r3, r9
 8006218:	eb4b 0303 	adc.w	r3, fp, r3
 800621c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800622c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006234:	460b      	mov	r3, r1
 8006236:	18db      	adds	r3, r3, r3
 8006238:	643b      	str	r3, [r7, #64]	; 0x40
 800623a:	4613      	mov	r3, r2
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	647b      	str	r3, [r7, #68]	; 0x44
 8006242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800624a:	f7fa fd1d 	bl	8000c88 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4611      	mov	r1, r2
 8006254:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <UART_SetConfig+0x2d4>)
 8006256:	fba3 2301 	umull	r2, r3, r3, r1
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2264      	movs	r2, #100	; 0x64
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	1acb      	subs	r3, r1, r3
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800626a:	4b36      	ldr	r3, [pc, #216]	; (8006344 <UART_SetConfig+0x2d4>)
 800626c:	fba3 2302 	umull	r2, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006278:	441c      	add	r4, r3
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006284:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	63b9      	str	r1, [r7, #56]	; 0x38
 8006294:	415b      	adcs	r3, r3
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800629c:	4641      	mov	r1, r8
 800629e:	1851      	adds	r1, r2, r1
 80062a0:	6339      	str	r1, [r7, #48]	; 0x30
 80062a2:	4649      	mov	r1, r9
 80062a4:	414b      	adcs	r3, r1
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062b4:	4659      	mov	r1, fp
 80062b6:	00cb      	lsls	r3, r1, #3
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062be:	4651      	mov	r1, sl
 80062c0:	00ca      	lsls	r2, r1, #3
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	4642      	mov	r2, r8
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d0:	464b      	mov	r3, r9
 80062d2:	460a      	mov	r2, r1
 80062d4:	eb42 0303 	adc.w	r3, r2, r3
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062f0:	460b      	mov	r3, r1
 80062f2:	18db      	adds	r3, r3, r3
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	4613      	mov	r3, r2
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006306:	f7fa fcbf 	bl	8000c88 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x2d4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <UART_SetConfig+0x2d4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 0207 	and.w	r2, r3, #7
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4422      	add	r2, r4
 8006336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006338:	e106      	b.n	8006548 <UART_SetConfig+0x4d8>
 800633a:	bf00      	nop
 800633c:	40011000 	.word	0x40011000
 8006340:	40011400 	.word	0x40011400
 8006344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006352:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800635a:	4642      	mov	r2, r8
 800635c:	464b      	mov	r3, r9
 800635e:	1891      	adds	r1, r2, r2
 8006360:	6239      	str	r1, [r7, #32]
 8006362:	415b      	adcs	r3, r3
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800636a:	4641      	mov	r1, r8
 800636c:	1854      	adds	r4, r2, r1
 800636e:	4649      	mov	r1, r9
 8006370:	eb43 0501 	adc.w	r5, r3, r1
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	00eb      	lsls	r3, r5, #3
 800637e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006382:	00e2      	lsls	r2, r4, #3
 8006384:	4614      	mov	r4, r2
 8006386:	461d      	mov	r5, r3
 8006388:	4643      	mov	r3, r8
 800638a:	18e3      	adds	r3, r4, r3
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006390:	464b      	mov	r3, r9
 8006392:	eb45 0303 	adc.w	r3, r5, r3
 8006396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063b6:	4629      	mov	r1, r5
 80063b8:	008b      	lsls	r3, r1, #2
 80063ba:	4621      	mov	r1, r4
 80063bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c0:	4621      	mov	r1, r4
 80063c2:	008a      	lsls	r2, r1, #2
 80063c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c8:	f7fa fc5e 	bl	8000c88 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b60      	ldr	r3, [pc, #384]	; (8006554 <UART_SetConfig+0x4e4>)
 80063d2:	fba3 2302 	umull	r2, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	011c      	lsls	r4, r3, #4
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	61b9      	str	r1, [r7, #24]
 80063f4:	415b      	adcs	r3, r3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063fc:	4641      	mov	r1, r8
 80063fe:	1851      	adds	r1, r2, r1
 8006400:	6139      	str	r1, [r7, #16]
 8006402:	4649      	mov	r1, r9
 8006404:	414b      	adcs	r3, r1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006414:	4659      	mov	r1, fp
 8006416:	00cb      	lsls	r3, r1, #3
 8006418:	4651      	mov	r1, sl
 800641a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800641e:	4651      	mov	r1, sl
 8006420:	00ca      	lsls	r2, r1, #3
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	4603      	mov	r3, r0
 8006428:	4642      	mov	r2, r8
 800642a:	189b      	adds	r3, r3, r2
 800642c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006430:	464b      	mov	r3, r9
 8006432:	460a      	mov	r2, r1
 8006434:	eb42 0303 	adc.w	r3, r2, r3
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	67bb      	str	r3, [r7, #120]	; 0x78
 8006446:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006454:	4649      	mov	r1, r9
 8006456:	008b      	lsls	r3, r1, #2
 8006458:	4641      	mov	r1, r8
 800645a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800645e:	4641      	mov	r1, r8
 8006460:	008a      	lsls	r2, r1, #2
 8006462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006466:	f7fa fc0f 	bl	8000c88 <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4611      	mov	r1, r2
 8006470:	4b38      	ldr	r3, [pc, #224]	; (8006554 <UART_SetConfig+0x4e4>)
 8006472:	fba3 2301 	umull	r2, r3, r3, r1
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2264      	movs	r2, #100	; 0x64
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	1acb      	subs	r3, r1, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	; 0x32
 8006484:	4a33      	ldr	r2, [pc, #204]	; (8006554 <UART_SetConfig+0x4e4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006490:	441c      	add	r4, r3
 8006492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006496:	2200      	movs	r2, #0
 8006498:	673b      	str	r3, [r7, #112]	; 0x70
 800649a:	677a      	str	r2, [r7, #116]	; 0x74
 800649c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e2:	464b      	mov	r3, r9
 80064e4:	460a      	mov	r2, r1
 80064e6:	eb42 0303 	adc.w	r3, r2, r3
 80064ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
 80064f6:	667a      	str	r2, [r7, #100]	; 0x64
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006504:	4649      	mov	r1, r9
 8006506:	008b      	lsls	r3, r1, #2
 8006508:	4641      	mov	r1, r8
 800650a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650e:	4641      	mov	r1, r8
 8006510:	008a      	lsls	r2, r1, #2
 8006512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006516:	f7fa fbb7 	bl	8000c88 <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <UART_SetConfig+0x4e4>)
 8006520:	fba3 1302 	umull	r1, r3, r3, r2
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	2164      	movs	r1, #100	; 0x64
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	3332      	adds	r3, #50	; 0x32
 8006532:	4a08      	ldr	r2, [pc, #32]	; (8006554 <UART_SetConfig+0x4e4>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4422      	add	r2, r4
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006554:	51eb851f 	.word	0x51eb851f

08006558 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006558:	b480      	push	{r7}
 800655a:	b08b      	sub	sp, #44	; 0x2c
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	613b      	str	r3, [r7, #16]
  return result;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800657e:	2320      	movs	r3, #32
 8006580:	e003      	b.n	800658a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	fab3 f383 	clz	r3, r3
 8006588:	b2db      	uxtb	r3, r3
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	2103      	movs	r1, #3
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	401a      	ands	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	fa93 f3a3 	rbit	r3, r3
 80065a0:	61fb      	str	r3, [r7, #28]
  return result;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80065ac:	2320      	movs	r3, #32
 80065ae:	e003      	b.n	80065b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	fa01 f303 	lsl.w	r3, r1, r3
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	372c      	adds	r7, #44	; 0x2c
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	401a      	ands	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	fb01 f303 	mul.w	r3, r1, r3
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006602:	b480      	push	{r7}
 8006604:	b08b      	sub	sp, #44	; 0x2c
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	fa93 f3a3 	rbit	r3, r3
 800661c:	613b      	str	r3, [r7, #16]
  return result;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006628:	2320      	movs	r3, #32
 800662a:	e003      	b.n	8006634 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	fab3 f383 	clz	r3, r3
 8006632:	b2db      	uxtb	r3, r3
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2103      	movs	r1, #3
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	fa93 f3a3 	rbit	r3, r3
 800664a:	61fb      	str	r3, [r7, #28]
  return result;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006656:	2320      	movs	r3, #32
 8006658:	e003      	b.n	8006662 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	fab3 f383 	clz	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006670:	bf00      	nop
 8006672:	372c      	adds	r7, #44	; 0x2c
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800667c:	b480      	push	{r7}
 800667e:	b08b      	sub	sp, #44	; 0x2c
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa93 f3a3 	rbit	r3, r3
 8006696:	613b      	str	r3, [r7, #16]
  return result;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80066a2:	2320      	movs	r3, #32
 80066a4:	e003      	b.n	80066ae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	fab3 f383 	clz	r3, r3
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	2103      	movs	r1, #3
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	401a      	ands	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	61fb      	str	r3, [r7, #28]
  return result;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80066d0:	2320      	movs	r3, #32
 80066d2:	e003      	b.n	80066dc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	fab3 f383 	clz	r3, r3
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	60da      	str	r2, [r3, #12]
}
 80066ea:	bf00      	nop
 80066ec:	372c      	adds	r7, #44	; 0x2c
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b08b      	sub	sp, #44	; 0x2c
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	fa93 f3a3 	rbit	r3, r3
 8006710:	613b      	str	r3, [r7, #16]
  return result;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800671c:	2320      	movs	r3, #32
 800671e:	e003      	b.n	8006728 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	fab3 f383 	clz	r3, r3
 8006726:	b2db      	uxtb	r3, r3
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	210f      	movs	r1, #15
 800672c:	fa01 f303 	lsl.w	r3, r1, r3
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	fa93 f3a3 	rbit	r3, r3
 800673e:	61fb      	str	r3, [r7, #28]
  return result;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800674a:	2320      	movs	r3, #32
 800674c:	e003      	b.n	8006756 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	fab3 f383 	clz	r3, r3
 8006754:	b2db      	uxtb	r3, r3
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	431a      	orrs	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006764:	bf00      	nop
 8006766:	372c      	adds	r7, #44	; 0x2c
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006770:	b480      	push	{r7}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	fa93 f3a3 	rbit	r3, r3
 800678c:	613b      	str	r3, [r7, #16]
  return result;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006798:	2320      	movs	r3, #32
 800679a:	e003      	b.n	80067a4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	fab3 f383 	clz	r3, r3
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	210f      	movs	r1, #15
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	43db      	mvns	r3, r3
 80067ae:	401a      	ands	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	fa93 f3a3 	rbit	r3, r3
 80067bc:	61fb      	str	r3, [r7, #28]
  return result;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80067c8:	2320      	movs	r3, #32
 80067ca:	e003      	b.n	80067d4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	fab3 f383 	clz	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80067e2:	bf00      	nop
 80067e4:	372c      	adds	r7, #44	; 0x2c
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b08a      	sub	sp, #40	; 0x28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	617b      	str	r3, [r7, #20]
  return result;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <LL_GPIO_Init+0x2e>
    return 32U;
 8006818:	2320      	movs	r3, #32
 800681a:	e003      	b.n	8006824 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	fab3 f383 	clz	r3, r3
 8006822:	b2db      	uxtb	r3, r3
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006826:	e057      	b.n	80068d8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	2101      	movs	r1, #1
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	fa01 f303 	lsl.w	r3, r1, r3
 8006834:	4013      	ands	r3, r2
 8006836:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d049      	beq.n	80068d2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d003      	beq.n	800684e <LL_GPIO_Init+0x60>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d10d      	bne.n	800686a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	461a      	mov	r2, r3
 8006854:	6a39      	ldr	r1, [r7, #32]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fed3 	bl	8006602 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	461a      	mov	r2, r3
 8006862:	6a39      	ldr	r1, [r7, #32]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff feb4 	bl	80065d2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	461a      	mov	r2, r3
 8006870:	6a39      	ldr	r1, [r7, #32]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ff02 	bl	800667c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d121      	bne.n	80068c4 <LL_GPIO_Init+0xd6>
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	fa93 f3a3 	rbit	r3, r3
 800688a:	60bb      	str	r3, [r7, #8]
  return result;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <LL_GPIO_Init+0xac>
    return 32U;
 8006896:	2320      	movs	r3, #32
 8006898:	e003      	b.n	80068a2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	fab3 f383 	clz	r3, r3
 80068a0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80068a2:	2b07      	cmp	r3, #7
 80068a4:	d807      	bhi.n	80068b6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	461a      	mov	r2, r3
 80068ac:	6a39      	ldr	r1, [r7, #32]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ff21 	bl	80066f6 <LL_GPIO_SetAFPin_0_7>
 80068b4:	e006      	b.n	80068c4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6a39      	ldr	r1, [r7, #32]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff56 	bl	8006770 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a39      	ldr	r1, [r7, #32]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fe43 	bl	8006558 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1a0      	bne.n	8006828 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3728      	adds	r7, #40	; 0x28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <LL_RCC_GetSysClkSource+0x18>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 030c 	and.w	r3, r3, #12
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006910:	4b04      	ldr	r3, [pc, #16]	; (8006924 <LL_RCC_GetAHBPrescaler+0x18>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006918:	4618      	mov	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800

08006928 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <LL_RCC_GetAPB1Prescaler+0x18>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800

08006944 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <LL_RCC_GetAPB2Prescaler+0x18>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800

08006960 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <LL_RCC_PLL_GetMainSource+0x18>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40023800 	.word	0x40023800

0800697c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <LL_RCC_PLL_GetN+0x18>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800698a:	4618      	mov	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40023800 	.word	0x40023800

08006998 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <LL_RCC_PLL_GetP+0x18>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800

080069b4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <LL_RCC_PLL_GetDivider+0x18>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800

080069d0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80069d8:	f000 f820 	bl	8006a1c <RCC_GetSystemClockFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f840 	bl	8006a6c <RCC_GetHCLKClockFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f84e 	bl	8006a98 <RCC_GetPCLK1ClockFreq>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f85a 	bl	8006ac0 <RCC_GetPCLK2ClockFreq>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60da      	str	r2, [r3, #12]
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006a26:	f7ff ff63 	bl	80068f0 <LL_RCC_GetSysClkSource>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d00c      	beq.n	8006a4a <RCC_GetSystemClockFreq+0x2e>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d80f      	bhi.n	8006a54 <RCC_GetSystemClockFreq+0x38>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <RCC_GetSystemClockFreq+0x22>
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d003      	beq.n	8006a44 <RCC_GetSystemClockFreq+0x28>
 8006a3c:	e00a      	b.n	8006a54 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <RCC_GetSystemClockFreq+0x48>)
 8006a40:	607b      	str	r3, [r7, #4]
      break;
 8006a42:	e00a      	b.n	8006a5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <RCC_GetSystemClockFreq+0x4c>)
 8006a46:	607b      	str	r3, [r7, #4]
      break;
 8006a48:	e007      	b.n	8006a5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006a4a:	2008      	movs	r0, #8
 8006a4c:	f000 f84c 	bl	8006ae8 <RCC_PLL_GetFreqDomain_SYS>
 8006a50:	6078      	str	r0, [r7, #4]
      break;
 8006a52:	e002      	b.n	8006a5a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <RCC_GetSystemClockFreq+0x48>)
 8006a56:	607b      	str	r3, [r7, #4]
      break;
 8006a58:	bf00      	nop
  }

  return frequency;
 8006a5a:	687b      	ldr	r3, [r7, #4]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	00f42400 	.word	0x00f42400
 8006a68:	017d7840 	.word	0x017d7840

08006a6c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006a74:	f7ff ff4a 	bl	800690c <LL_RCC_GetAHBPrescaler>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <RCC_GetHCLKClockFreq+0x28>)
 8006a82:	5cd3      	ldrb	r3, [r2, r3]
 8006a84:	461a      	mov	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	40d3      	lsrs	r3, r2
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	080104c4 	.word	0x080104c4

08006a98 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006aa0:	f7ff ff42 	bl	8006928 <LL_RCC_GetAPB1Prescaler>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	0a9b      	lsrs	r3, r3, #10
 8006aa8:	4a04      	ldr	r2, [pc, #16]	; (8006abc <RCC_GetPCLK1ClockFreq+0x24>)
 8006aaa:	5cd3      	ldrb	r3, [r2, r3]
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	40d3      	lsrs	r3, r2
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	080104d4 	.word	0x080104d4

08006ac0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006ac8:	f7ff ff3c 	bl	8006944 <LL_RCC_GetAPB2Prescaler>
 8006acc:	4603      	mov	r3, r0
 8006ace:	0b5b      	lsrs	r3, r3, #13
 8006ad0:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <RCC_GetPCLK2ClockFreq+0x24>)
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	40d3      	lsrs	r3, r2
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	080104d4 	.word	0x080104d4

08006ae8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006afc:	f7ff ff30 	bl	8006960 <LL_RCC_PLL_GetMainSource>
 8006b00:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b0e:	d003      	beq.n	8006b18 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006b10:	e005      	b.n	8006b1e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006b14:	617b      	str	r3, [r7, #20]
      break;
 8006b16:	e005      	b.n	8006b24 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006b1a:	617b      	str	r3, [r7, #20]
      break;
 8006b1c:	e002      	b.n	8006b24 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006b20:	617b      	str	r3, [r7, #20]
      break;
 8006b22:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d113      	bne.n	8006b52 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006b2a:	f7ff ff43 	bl	80069b4 <LL_RCC_PLL_GetDivider>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	fbb3 f4f2 	udiv	r4, r3, r2
 8006b36:	f7ff ff21 	bl	800697c <LL_RCC_PLL_GetN>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	fb03 f404 	mul.w	r4, r3, r4
 8006b40:	f7ff ff2a 	bl	8006998 <LL_RCC_PLL_GetP>
 8006b44:	4603      	mov	r3, r0
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	3301      	adds	r3, #1
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b50:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006b52:	693b      	ldr	r3, [r7, #16]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd90      	pop	{r4, r7, pc}
 8006b5c:	00f42400 	.word	0x00f42400
 8006b60:	017d7840 	.word	0x017d7840

08006b64 <LL_USART_IsEnabled>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	bf0c      	ite	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	2300      	movne	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <LL_USART_SetStopBitsLength>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	611a      	str	r2, [r3, #16]
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <LL_USART_SetHWFlowCtrl>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	615a      	str	r2, [r3, #20]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_USART_SetBaudRate>:
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b0c0      	sub	sp, #256	; 0x100
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006be4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8006be8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006bec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf8:	f040 810c 	bne.w	8006e14 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	6639      	str	r1, [r7, #96]	; 0x60
 8006c16:	415b      	adcs	r3, r3
 8006c18:	667b      	str	r3, [r7, #100]	; 0x64
 8006c1a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006c1e:	4621      	mov	r1, r4
 8006c20:	eb12 0801 	adds.w	r8, r2, r1
 8006c24:	4629      	mov	r1, r5
 8006c26:	eb43 0901 	adc.w	r9, r3, r1
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3e:	4690      	mov	r8, r2
 8006c40:	4699      	mov	r9, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	eb18 0303 	adds.w	r3, r8, r3
 8006c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	eb49 0303 	adc.w	r3, r9, r3
 8006c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	4693      	mov	fp, r2
 8006c60:	eb1a 030a 	adds.w	r3, sl, sl
 8006c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c66:	eb4b 030b 	adc.w	r3, fp, fp
 8006c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c74:	f7fa f808 	bl	8000c88 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <LL_USART_SetBaudRate+0x238>)
 8006c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	b29c      	uxth	r4, r3
 8006c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c94:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c98:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	1891      	adds	r1, r2, r2
 8006ca2:	6539      	str	r1, [r7, #80]	; 0x50
 8006ca4:	415b      	adcs	r3, r3
 8006ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cac:	4641      	mov	r1, r8
 8006cae:	1851      	adds	r1, r2, r1
 8006cb0:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	414b      	adcs	r3, r1
 8006cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	00cb      	lsls	r3, r1, #3
 8006cc8:	4651      	mov	r1, sl
 8006cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cce:	4651      	mov	r1, sl
 8006cd0:	00ca      	lsls	r2, r1, #3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4642      	mov	r2, r8
 8006cda:	189b      	adds	r3, r3, r2
 8006cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	eb42 0303 	adc.w	r3, r2, r3
 8006ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cf6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8006cfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006cfe:	460b      	mov	r3, r1
 8006d00:	18db      	adds	r3, r3, r3
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40
 8006d04:	4613      	mov	r3, r2
 8006d06:	eb42 0303 	adc.w	r3, r2, r3
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d10:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006d14:	f7f9 ffb8 	bl	8000c88 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <LL_USART_SetBaudRate+0x238>)
 8006d20:	fba3 2301 	umull	r2, r3, r3, r1
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	2264      	movs	r2, #100	; 0x64
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	1acb      	subs	r3, r1, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d34:	4b36      	ldr	r3, [pc, #216]	; (8006e10 <LL_USART_SetBaudRate+0x238>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4423      	add	r3, r4
 8006d4a:	b29c      	uxth	r4, r3
 8006d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d56:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d5a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	1891      	adds	r1, r2, r2
 8006d64:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d66:	415b      	adcs	r3, r3
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d6e:	4641      	mov	r1, r8
 8006d70:	1851      	adds	r1, r2, r1
 8006d72:	6339      	str	r1, [r7, #48]	; 0x30
 8006d74:	4649      	mov	r1, r9
 8006d76:	414b      	adcs	r3, r1
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d86:	4659      	mov	r1, fp
 8006d88:	00cb      	lsls	r3, r1, #3
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d90:	4651      	mov	r1, sl
 8006d92:	00ca      	lsls	r2, r1, #3
 8006d94:	4610      	mov	r0, r2
 8006d96:	4619      	mov	r1, r3
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4642      	mov	r2, r8
 8006d9c:	189b      	adds	r3, r3, r2
 8006d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da2:	464b      	mov	r3, r9
 8006da4:	460a      	mov	r2, r1
 8006da6:	eb42 0303 	adc.w	r3, r2, r3
 8006daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006dbc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dd2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006dd6:	f7f9 ff57 	bl	8000c88 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <LL_USART_SetBaudRate+0x238>)
 8006de0:	fba3 1302 	umull	r1, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	2164      	movs	r1, #100	; 0x64
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	3332      	adds	r3, #50	; 0x32
 8006df2:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <LL_USART_SetBaudRate+0x238>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4423      	add	r3, r4
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0c:	609a      	str	r2, [r3, #8]
}
 8006e0e:	e108      	b.n	8007022 <LL_USART_SetBaudRate+0x44a>
 8006e10:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e1e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e22:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	1891      	adds	r1, r2, r2
 8006e2c:	6239      	str	r1, [r7, #32]
 8006e2e:	415b      	adcs	r3, r3
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
 8006e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e36:	4641      	mov	r1, r8
 8006e38:	1854      	adds	r4, r2, r1
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	eb43 0501 	adc.w	r5, r3, r1
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	00eb      	lsls	r3, r5, #3
 8006e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e4e:	00e2      	lsls	r2, r4, #3
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	4643      	mov	r3, r8
 8006e56:	18e3      	adds	r3, r4, r3
 8006e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	eb45 0303 	adc.w	r3, r5, r3
 8006e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006e80:	4629      	mov	r1, r5
 8006e82:	008b      	lsls	r3, r1, #2
 8006e84:	4621      	mov	r1, r4
 8006e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	008a      	lsls	r2, r1, #2
 8006e8e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e92:	f7f9 fef9 	bl	8000c88 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b65      	ldr	r3, [pc, #404]	; (8007030 <LL_USART_SetBaudRate+0x458>)
 8006e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	b29c      	uxth	r4, r3
 8006ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eb6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	1891      	adds	r1, r2, r2
 8006ec0:	61b9      	str	r1, [r7, #24]
 8006ec2:	415b      	adcs	r3, r3
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	1851      	adds	r1, r2, r1
 8006ece:	6139      	str	r1, [r7, #16]
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	414b      	adcs	r3, r1
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	00cb      	lsls	r3, r1, #3
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eec:	4651      	mov	r1, sl
 8006eee:	00ca      	lsls	r2, r1, #3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	189b      	adds	r3, r3, r2
 8006efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006efe:	464b      	mov	r3, r9
 8006f00:	460a      	mov	r2, r1
 8006f02:	eb42 0303 	adc.w	r3, r2, r3
 8006f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006f24:	4649      	mov	r1, r9
 8006f26:	008b      	lsls	r3, r1, #2
 8006f28:	4641      	mov	r1, r8
 8006f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2e:	4641      	mov	r1, r8
 8006f30:	008a      	lsls	r2, r1, #2
 8006f32:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006f36:	f7f9 fea7 	bl	8000c88 <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4b3b      	ldr	r3, [pc, #236]	; (8007030 <LL_USART_SetBaudRate+0x458>)
 8006f42:	fba3 2301 	umull	r2, r3, r3, r1
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	1acb      	subs	r3, r1, r3
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	3332      	adds	r3, #50	; 0x32
 8006f54:	4a36      	ldr	r2, [pc, #216]	; (8007030 <LL_USART_SetBaudRate+0x458>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4423      	add	r3, r4
 8006f66:	b29c      	uxth	r4, r3
 8006f68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f70:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f72:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f76:	4642      	mov	r2, r8
 8006f78:	464b      	mov	r3, r9
 8006f7a:	1891      	adds	r1, r2, r2
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	415b      	adcs	r3, r3
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f86:	4641      	mov	r1, r8
 8006f88:	1851      	adds	r1, r2, r1
 8006f8a:	6039      	str	r1, [r7, #0]
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	414b      	adcs	r3, r1
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	00cb      	lsls	r3, r1, #3
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa8:	4651      	mov	r1, sl
 8006faa:	00ca      	lsls	r2, r1, #3
 8006fac:	4610      	mov	r0, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	189b      	adds	r3, r3, r2
 8006fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8006fb8:	464b      	mov	r3, r9
 8006fba:	460a      	mov	r2, r1
 8006fbc:	eb42 0303 	adc.w	r3, r2, r3
 8006fc0:	677b      	str	r3, [r7, #116]	; 0x74
 8006fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8006fd8:	4649      	mov	r1, r9
 8006fda:	008b      	lsls	r3, r1, #2
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	008a      	lsls	r2, r1, #2
 8006fe6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006fea:	f7f9 fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <LL_USART_SetBaudRate+0x458>)
 8006ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	2164      	movs	r1, #100	; 0x64
 8006ffc:	fb01 f303 	mul.w	r3, r1, r3
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	3332      	adds	r3, #50	; 0x32
 8007006:	4a0a      	ldr	r2, [pc, #40]	; (8007030 <LL_USART_SetBaudRate+0x458>)
 8007008:	fba2 2303 	umull	r2, r3, r2, r3
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	b29b      	uxth	r3, r3
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	b29b      	uxth	r3, r3
 8007016:	4423      	add	r3, r4
 8007018:	b29b      	uxth	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007020:	609a      	str	r2, [r3, #8]
}
 8007022:	bf00      	nop
 8007024:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007028:	46bd      	mov	sp, r7
 800702a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800702e:	bf00      	nop
 8007030:	51eb851f 	.word	0x51eb851f

08007034 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fd8c 	bl	8006b64 <LL_USART_IsEnabled>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d15e      	bne.n	8007110 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800705a:	f023 030c 	bic.w	r3, r3, #12
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	6851      	ldr	r1, [r2, #4]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68d2      	ldr	r2, [r2, #12]
 8007066:	4311      	orrs	r1, r2
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	6912      	ldr	r2, [r2, #16]
 800706c:	4311      	orrs	r1, r2
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6992      	ldr	r2, [r2, #24]
 8007072:	430a      	orrs	r2, r1
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fd83 	bl	8006b8c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fd90 	bl	8006bb2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fc9a 	bl	80069d0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1f      	ldr	r2, [pc, #124]	; (800711c <LL_USART_Init+0xe8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d102      	bne.n	80070aa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e021      	b.n	80070ee <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <LL_USART_Init+0xec>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d102      	bne.n	80070b8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e01a      	b.n	80070ee <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <LL_USART_Init+0xf0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d102      	bne.n	80070c6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e013      	b.n	80070ee <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a17      	ldr	r2, [pc, #92]	; (8007128 <LL_USART_Init+0xf4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d102      	bne.n	80070d4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e00c      	b.n	80070ee <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <LL_USART_Init+0xf8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d102      	bne.n	80070e2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e005      	b.n	80070ee <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a12      	ldr	r2, [pc, #72]	; (8007130 <LL_USART_Init+0xfc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d101      	bne.n	80070ee <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80070fc:	2300      	movs	r3, #0
 80070fe:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fd64 	bl	8006bd8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007110:	7ffb      	ldrb	r3, [r7, #31]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40011000 	.word	0x40011000
 8007120:	40004400 	.word	0x40004400
 8007124:	40004800 	.word	0x40004800
 8007128:	40011400 	.word	0x40011400
 800712c:	40004c00 	.word	0x40004c00
 8007130:	40005000 	.word	0x40005000

08007134 <__NVIC_SetPriority>:
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007144:	2b00      	cmp	r3, #0
 8007146:	db0a      	blt.n	800715e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	490c      	ldr	r1, [pc, #48]	; (8007180 <__NVIC_SetPriority+0x4c>)
 800714e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007152:	0112      	lsls	r2, r2, #4
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	440b      	add	r3, r1
 8007158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800715c:	e00a      	b.n	8007174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	b2da      	uxtb	r2, r3
 8007162:	4908      	ldr	r1, [pc, #32]	; (8007184 <__NVIC_SetPriority+0x50>)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	3b04      	subs	r3, #4
 800716c:	0112      	lsls	r2, r2, #4
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	440b      	add	r3, r1
 8007172:	761a      	strb	r2, [r3, #24]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	e000e100 	.word	0xe000e100
 8007184:	e000ed00 	.word	0xe000ed00

08007188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <SysTick_Handler+0x1c>)
 800718e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007190:	f001 ff8c 	bl	80090ac <xTaskGetSchedulerState>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d001      	beq.n	800719e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800719a:	f002 fd75 	bl	8009c88 <xPortSysTickHandler>
  }
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	e000e010 	.word	0xe000e010

080071a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071ac:	2100      	movs	r1, #0
 80071ae:	f06f 0004 	mvn.w	r0, #4
 80071b2:	f7ff ffbf 	bl	8007134 <__NVIC_SetPriority>
#endif
}
 80071b6:	bf00      	nop
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c2:	f3ef 8305 	mrs	r3, IPSR
 80071c6:	603b      	str	r3, [r7, #0]
  return(result);
 80071c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071ce:	f06f 0305 	mvn.w	r3, #5
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e00c      	b.n	80071f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071d6:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <osKernelInitialize+0x44>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071de:	4b08      	ldr	r3, [pc, #32]	; (8007200 <osKernelInitialize+0x44>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	e002      	b.n	80071f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f0:	687b      	ldr	r3, [r7, #4]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000570 	.word	0x20000570

08007204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720a:	f3ef 8305 	mrs	r3, IPSR
 800720e:	603b      	str	r3, [r7, #0]
  return(result);
 8007210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007216:	f06f 0305 	mvn.w	r3, #5
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e010      	b.n	8007240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <osKernelStart+0x48>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d109      	bne.n	800723a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007226:	f7ff ffbf 	bl	80071a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800722a:	4b08      	ldr	r3, [pc, #32]	; (800724c <osKernelStart+0x48>)
 800722c:	2202      	movs	r2, #2
 800722e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007230:	f001 faf4 	bl	800881c <vTaskStartScheduler>
      stat = osOK;
 8007234:	2300      	movs	r3, #0
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	e002      	b.n	8007240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007240:	687b      	ldr	r3, [r7, #4]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000570 	.word	0x20000570

08007250 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	; 0x38
 8007254:	af04      	add	r7, sp, #16
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007260:	f3ef 8305 	mrs	r3, IPSR
 8007264:	617b      	str	r3, [r7, #20]
  return(result);
 8007266:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007268:	2b00      	cmp	r3, #0
 800726a:	d17e      	bne.n	800736a <osThreadNew+0x11a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d07b      	beq.n	800736a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007276:	2318      	movs	r3, #24
 8007278:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800727e:	f04f 33ff 	mov.w	r3, #4294967295
 8007282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d045      	beq.n	8007316 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <osThreadNew+0x48>
        name = attr->name;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <osThreadNew+0x6e>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b38      	cmp	r3, #56	; 0x38
 80072b0:	d805      	bhi.n	80072be <osThreadNew+0x6e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <osThreadNew+0x72>
        return (NULL);
 80072be:	2300      	movs	r3, #0
 80072c0:	e054      	b.n	800736c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	089b      	lsrs	r3, r3, #2
 80072d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <osThreadNew+0xa8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b5b      	cmp	r3, #91	; 0x5b
 80072e0:	d90a      	bls.n	80072f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <osThreadNew+0xa8>
        mem = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e010      	b.n	800731a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10c      	bne.n	800731a <osThreadNew+0xca>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <osThreadNew+0xca>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <osThreadNew+0xca>
          mem = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e001      	b.n	800731a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d110      	bne.n	8007342 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007328:	9202      	str	r2, [sp, #8]
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fff6 	bl	8008328 <xTaskCreateStatic>
 800733c:	4603      	mov	r3, r0
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	e013      	b.n	800736a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d110      	bne.n	800736a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	b29a      	uxth	r2, r3
 800734c:	f107 0310 	add.w	r3, r7, #16
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f001 f841 	bl	80083e2 <xTaskCreate>
 8007360:	4603      	mov	r3, r0
 8007362:	2b01      	cmp	r3, #1
 8007364:	d001      	beq.n	800736a <osThreadNew+0x11a>
            hTask = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800736a:	693b      	ldr	r3, [r7, #16]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3728      	adds	r7, #40	; 0x28
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737c:	f3ef 8305 	mrs	r3, IPSR
 8007380:	60bb      	str	r3, [r7, #8]
  return(result);
 8007382:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <osDelay+0x1c>
    stat = osErrorISR;
 8007388:	f06f 0305 	mvn.w	r3, #5
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	e007      	b.n	80073a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 f966 	bl	800866c <vTaskDelay>
    }
  }

  return (stat);
 80073a0:	68fb      	ldr	r3, [r7, #12]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b08a      	sub	sp, #40	; 0x28
 80073ae:	af02      	add	r7, sp, #8
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ba:	f3ef 8305 	mrs	r3, IPSR
 80073be:	613b      	str	r3, [r7, #16]
  return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d15f      	bne.n	8007486 <osMessageQueueNew+0xdc>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05c      	beq.n	8007486 <osMessageQueueNew+0xdc>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d059      	beq.n	8007486 <osMessageQueueNew+0xdc>
    mem = -1;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d029      	beq.n	8007432 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d012      	beq.n	800740c <osMessageQueueNew+0x62>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b4f      	cmp	r3, #79	; 0x4f
 80073ec:	d90e      	bls.n	800740c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695a      	ldr	r2, [r3, #20]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <osMessageQueueNew+0x62>
        mem = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e014      	b.n	8007436 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d110      	bne.n	8007436 <osMessageQueueNew+0x8c>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007420:	2b00      	cmp	r3, #0
 8007422:	d108      	bne.n	8007436 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <osMessageQueueNew+0x8c>
          mem = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e001      	b.n	8007436 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10b      	bne.n	8007454 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2100      	movs	r1, #0
 8007446:	9100      	str	r1, [sp, #0]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fa2e 	bl	80078ac <xQueueGenericCreateStatic>
 8007450:	61f8      	str	r0, [r7, #28]
 8007452:	e008      	b.n	8007466 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800745a:	2200      	movs	r2, #0
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fa9c 	bl	800799c <xQueueGenericCreate>
 8007464:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00c      	beq.n	8007486 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <osMessageQueueNew+0xd0>
        name = attr->name;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e001      	b.n	800747e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	69f8      	ldr	r0, [r7, #28]
 8007482:	f000 fef3 	bl	800826c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a8:	f3ef 8305 	mrs	r3, IPSR
 80074ac:	617b      	str	r3, [r7, #20]
  return(result);
 80074ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d028      	beq.n	8007506 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <osMessageQueuePut+0x36>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <osMessageQueuePut+0x36>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80074c6:	f06f 0303 	mvn.w	r3, #3
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e038      	b.n	8007540 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80074d2:	f107 0210 	add.w	r2, r7, #16
 80074d6:	2300      	movs	r3, #0
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	69b8      	ldr	r0, [r7, #24]
 80074dc:	f000 fbba 	bl	8007c54 <xQueueGenericSendFromISR>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d003      	beq.n	80074ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80074e6:	f06f 0302 	mvn.w	r3, #2
 80074ea:	61fb      	str	r3, [r7, #28]
 80074ec:	e028      	b.n	8007540 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d025      	beq.n	8007540 <osMessageQueuePut+0xb0>
 80074f4:	4b15      	ldr	r3, [pc, #84]	; (800754c <osMessageQueuePut+0xbc>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	e01c      	b.n	8007540 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <osMessageQueuePut+0x82>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d103      	bne.n	800751a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007512:	f06f 0303 	mvn.w	r3, #3
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e012      	b.n	8007540 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800751a:	2300      	movs	r3, #0
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	69b8      	ldr	r0, [r7, #24]
 8007522:	f000 fa99 	bl	8007a58 <xQueueGenericSend>
 8007526:	4603      	mov	r3, r0
 8007528:	2b01      	cmp	r3, #1
 800752a:	d009      	beq.n	8007540 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007532:	f06f 0301 	mvn.w	r3, #1
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e002      	b.n	8007540 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800753a:	f06f 0302 	mvn.w	r3, #2
 800753e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007540:	69fb      	ldr	r3, [r7, #28]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007566:	f3ef 8305 	mrs	r3, IPSR
 800756a:	617b      	str	r3, [r7, #20]
  return(result);
 800756c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800756e:	2b00      	cmp	r3, #0
 8007570:	d028      	beq.n	80075c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <osMessageQueueGet+0x34>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <osMessageQueueGet+0x34>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007584:	f06f 0303 	mvn.w	r3, #3
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	e037      	b.n	80075fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007590:	f107 0310 	add.w	r3, r7, #16
 8007594:	461a      	mov	r2, r3
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	69b8      	ldr	r0, [r7, #24]
 800759a:	f000 fcd7 	bl	8007f4c <xQueueReceiveFromISR>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d003      	beq.n	80075ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80075a4:	f06f 0302 	mvn.w	r3, #2
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	e027      	b.n	80075fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d024      	beq.n	80075fc <osMessageQueueGet+0xac>
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <osMessageQueueGet+0xb8>)
 80075b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	e01b      	b.n	80075fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <osMessageQueueGet+0x80>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80075d0:	f06f 0303 	mvn.w	r3, #3
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e011      	b.n	80075fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	69b8      	ldr	r0, [r7, #24]
 80075de:	f000 fbd5 	bl	8007d8c <xQueueReceive>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d009      	beq.n	80075fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80075ee:	f06f 0301 	mvn.w	r3, #1
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	e002      	b.n	80075fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80075f6:	f06f 0302 	mvn.w	r3, #2
 80075fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80075fc:	69fb      	ldr	r3, [r7, #28]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a07      	ldr	r2, [pc, #28]	; (8007638 <vApplicationGetIdleTaskMemory+0x2c>)
 800761c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4a06      	ldr	r2, [pc, #24]	; (800763c <vApplicationGetIdleTaskMemory+0x30>)
 8007622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2280      	movs	r2, #128	; 0x80
 8007628:	601a      	str	r2, [r3, #0]
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	20000574 	.word	0x20000574
 800763c:	200005d0 	.word	0x200005d0

08007640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4a07      	ldr	r2, [pc, #28]	; (800766c <vApplicationGetTimerTaskMemory+0x2c>)
 8007650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4a06      	ldr	r2, [pc, #24]	; (8007670 <vApplicationGetTimerTaskMemory+0x30>)
 8007656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	200007d0 	.word	0x200007d0
 8007670:	2000082c 	.word	0x2000082c

08007674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f103 0208 	add.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f103 0208 	add.w	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f103 0208 	add.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d103      	bne.n	8007736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e00c      	b.n	8007750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3308      	adds	r3, #8
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e002      	b.n	8007744 <vListInsert+0x2e>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d2f6      	bcs.n	800773e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6892      	ldr	r2, [r2, #8]
 800779e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6852      	ldr	r2, [r2, #4]
 80077a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d103      	bne.n	80077bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	1e5a      	subs	r2, r3, #1
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007806:	f002 f9ad 	bl	8009b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007836:	3b01      	subs	r3, #1
 8007838:	68f9      	ldr	r1, [r7, #12]
 800783a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	441a      	add	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	22ff      	movs	r2, #255	; 0xff
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d114      	bne.n	8007886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01a      	beq.n	800789a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3310      	adds	r3, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f001 fa61 	bl	8008d30 <xTaskRemoveFromEventList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d012      	beq.n	800789a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <xQueueGenericReset+0xcc>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	e009      	b.n	800789a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3310      	adds	r3, #16
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fef2 	bl	8007674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3324      	adds	r3, #36	; 0x24
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff feed 	bl	8007674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800789a:	f002 f993 	bl	8009bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800789e:	2301      	movs	r3, #1
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08e      	sub	sp, #56	; 0x38
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <xQueueGenericCreateStatic+0x52>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <xQueueGenericCreateStatic+0x56>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <xQueueGenericCreateStatic+0x58>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	623b      	str	r3, [r7, #32]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <xQueueGenericCreateStatic+0x7e>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <xQueueGenericCreateStatic+0x82>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xQueueGenericCreateStatic+0x84>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61fb      	str	r3, [r7, #28]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800794a:	2350      	movs	r3, #80	; 0x50
 800794c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b50      	cmp	r3, #80	; 0x50
 8007952:	d00a      	beq.n	800796a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	61bb      	str	r3, [r7, #24]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800796a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800797e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f83f 	bl	8007a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	fb02 f303 	mul.w	r3, r2, r3
 80079ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3350      	adds	r3, #80	; 0x50
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 f9e7 	bl	8009da8 <pvPortMalloc>
 80079da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d011      	beq.n	8007a06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	3350      	adds	r3, #80	; 0x50
 80079ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4613      	mov	r3, r2
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	68b9      	ldr	r1, [r7, #8]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f805 	bl	8007a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a06:	69bb      	ldr	r3, [r7, #24]
	}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a3e:	2101      	movs	r1, #1
 8007a40:	69b8      	ldr	r0, [r7, #24]
 8007a42:	f7ff fecb 	bl	80077dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08e      	sub	sp, #56	; 0x38
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a66:	2300      	movs	r3, #0
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <xQueueGenericSend+0x32>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <xQueueGenericSend+0x40>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <xQueueGenericSend+0x44>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <xQueueGenericSend+0x46>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <xQueueGenericSend+0x60>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d103      	bne.n	8007ac6 <xQueueGenericSend+0x6e>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <xQueueGenericSend+0x72>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <xQueueGenericSend+0x74>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ae6:	f001 fae1 	bl	80090ac <xTaskGetSchedulerState>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <xQueueGenericSend+0x9e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <xQueueGenericSend+0xa2>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <xQueueGenericSend+0xa4>
 8007afa:	2300      	movs	r3, #0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <xQueueGenericSend+0xbe>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	61fb      	str	r3, [r7, #28]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b16:	f002 f825 	bl	8009b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <xQueueGenericSend+0xd4>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d129      	bne.n	8007b80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b32:	f000 fa8b 	bl	800804c <prvCopyDataToQueue>
 8007b36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	3324      	adds	r3, #36	; 0x24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f8f3 	bl	8008d30 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d013      	beq.n	8007b78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b50:	4b3f      	ldr	r3, [pc, #252]	; (8007c50 <xQueueGenericSend+0x1f8>)
 8007b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	e00a      	b.n	8007b78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b68:	4b39      	ldr	r3, [pc, #228]	; (8007c50 <xQueueGenericSend+0x1f8>)
 8007b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b78:	f002 f824 	bl	8009bc4 <vPortExitCritical>
				return pdPASS;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e063      	b.n	8007c48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b86:	f002 f81d 	bl	8009bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e05c      	b.n	8007c48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f92d 	bl	8008df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ba2:	f002 f80f 	bl	8009bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ba6:	f000 fe9f 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007baa:	f001 ffdb 	bl	8009b64 <vPortEnterCritical>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bb4:	b25b      	sxtb	r3, r3
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d103      	bne.n	8007bc4 <xQueueGenericSend+0x16c>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d103      	bne.n	8007bda <xQueueGenericSend+0x182>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bda:	f001 fff3 	bl	8009bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bde:	1d3a      	adds	r2, r7, #4
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f91c 	bl	8008e24 <xTaskCheckForTimeOut>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d124      	bne.n	8007c3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf4:	f000 fb22 	bl	800823c <prvIsQueueFull>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d018      	beq.n	8007c30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	3310      	adds	r3, #16
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f842 	bl	8008c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0e:	f000 faad 	bl	800816c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c12:	f000 fe77 	bl	8008904 <xTaskResumeAll>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f47f af7c 	bne.w	8007b16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <xQueueGenericSend+0x1f8>)
 8007c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	e772      	b.n	8007b16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c32:	f000 fa9b 	bl	800816c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c36:	f000 fe65 	bl	8008904 <xTaskResumeAll>
 8007c3a:	e76c      	b.n	8007b16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c3e:	f000 fa95 	bl	800816c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c42:	f000 fe5f 	bl	8008904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3738      	adds	r7, #56	; 0x38
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b090      	sub	sp, #64	; 0x40
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <xQueueGenericSendFromISR+0x3c>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <xQueueGenericSendFromISR+0x40>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <xQueueGenericSendFromISR+0x42>
 8007c94:	2300      	movs	r3, #0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d103      	bne.n	8007cbe <xQueueGenericSendFromISR+0x6a>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d101      	bne.n	8007cc2 <xQueueGenericSendFromISR+0x6e>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <xQueueGenericSendFromISR+0x70>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	623b      	str	r3, [r7, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cde:	f002 f823 	bl	8009d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ce2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	61fa      	str	r2, [r7, #28]
 8007cf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <xQueueGenericSendFromISR+0xbc>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d12f      	bne.n	8007d70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d26:	f000 f991 	bl	800804c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d112      	bne.n	8007d5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d016      	beq.n	8007d6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	3324      	adds	r3, #36	; 0x24
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fff5 	bl	8008d30 <xTaskRemoveFromEventList>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00e      	beq.n	8007d6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	e007      	b.n	8007d6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	b25a      	sxtb	r2, r3
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d6e:	e001      	b.n	8007d74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3740      	adds	r7, #64	; 0x40
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08c      	sub	sp, #48	; 0x30
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <xQueueReceive+0x30>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	623b      	str	r3, [r7, #32]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <xQueueReceive+0x3e>
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <xQueueReceive+0x42>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueReceive+0x44>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueReceive+0x5e>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	61fb      	str	r3, [r7, #28]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dea:	f001 f95f 	bl	80090ac <xTaskGetSchedulerState>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <xQueueReceive+0x6e>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <xQueueReceive+0x72>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <xQueueReceive+0x74>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xQueueReceive+0x8e>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61bb      	str	r3, [r7, #24]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e1a:	f001 fea3 	bl	8009b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01f      	beq.n	8007e6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e2e:	f000 f977 	bl	8008120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00f      	beq.n	8007e62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	3310      	adds	r3, #16
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 ff72 	bl	8008d30 <xTaskRemoveFromEventList>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d007      	beq.n	8007e62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e52:	4b3d      	ldr	r3, [pc, #244]	; (8007f48 <xQueueReceive+0x1bc>)
 8007e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e62:	f001 feaf 	bl	8009bc4 <vPortExitCritical>
				return pdPASS;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e069      	b.n	8007f3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e70:	f001 fea8 	bl	8009bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e062      	b.n	8007f3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e7e:	f107 0310 	add.w	r3, r7, #16
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 ffb8 	bl	8008df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e8c:	f001 fe9a 	bl	8009bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e90:	f000 fd2a 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e94:	f001 fe66 	bl	8009b64 <vPortEnterCritical>
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <xQueueReceive+0x122>
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d103      	bne.n	8007ec4 <xQueueReceive+0x138>
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec4:	f001 fe7e 	bl	8009bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec8:	1d3a      	adds	r2, r7, #4
 8007eca:	f107 0310 	add.w	r3, r7, #16
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 ffa7 	bl	8008e24 <xTaskCheckForTimeOut>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d123      	bne.n	8007f24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ede:	f000 f997 	bl	8008210 <prvIsQueueEmpty>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d017      	beq.n	8007f18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	3324      	adds	r3, #36	; 0x24
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fecd 	bl	8008c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef8:	f000 f938 	bl	800816c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007efc:	f000 fd02 	bl	8008904 <xTaskResumeAll>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d189      	bne.n	8007e1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <xQueueReceive+0x1bc>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	e780      	b.n	8007e1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1a:	f000 f927 	bl	800816c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f1e:	f000 fcf1 	bl	8008904 <xTaskResumeAll>
 8007f22:	e77a      	b.n	8007e1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f26:	f000 f921 	bl	800816c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f2a:	f000 fceb 	bl	8008904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f30:	f000 f96e 	bl	8008210 <prvIsQueueEmpty>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f43f af6f 	beq.w	8007e1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3730      	adds	r7, #48	; 0x30
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	623b      	str	r3, [r7, #32]
}
 8007f74:	bf00      	nop
 8007f76:	e7fe      	b.n	8007f76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <xQueueReceiveFromISR+0x3a>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueReceiveFromISR+0x3e>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xQueueReceiveFromISR+0x40>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	61fb      	str	r3, [r7, #28]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fa6:	f001 febf 	bl	8009d28 <vPortValidateInterruptPriority>
	__asm volatile
 8007faa:	f3ef 8211 	mrs	r2, BASEPRI
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	61ba      	str	r2, [r7, #24]
 8007fc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d02f      	beq.n	8008032 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe0:	f000 f89e 	bl	8008120 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	1e5a      	subs	r2, r3, #1
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff4:	d112      	bne.n	800801c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	3310      	adds	r3, #16
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fe94 	bl	8008d30 <xTaskRemoveFromEventList>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00e      	beq.n	800802c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	e007      	b.n	800802c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800801c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008020:	3301      	adds	r3, #1
 8008022:	b2db      	uxtb	r3, r3
 8008024:	b25a      	sxtb	r2, r3
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800802c:	2301      	movs	r3, #1
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
 8008030:	e001      	b.n	8008036 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	613b      	str	r3, [r7, #16]
	__asm volatile
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f383 8811 	msr	BASEPRI, r3
}
 8008040:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008044:	4618      	mov	r0, r3
 8008046:	3738      	adds	r7, #56	; 0x38
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10d      	bne.n	8008086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d14d      	bne.n	800810e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	4618      	mov	r0, r3
 8008078:	f001 f836 	bl	80090e8 <xTaskPriorityDisinherit>
 800807c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	e043      	b.n	800810e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d119      	bne.n	80080c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6858      	ldr	r0, [r3, #4]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	461a      	mov	r2, r3
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	f003 fd49 	bl	800bb2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d32b      	bcc.n	800810e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	605a      	str	r2, [r3, #4]
 80080be:	e026      	b.n	800810e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68d8      	ldr	r0, [r3, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	461a      	mov	r2, r3
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	f003 fd2f 	bl	800bb2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	425b      	negs	r3, r3
 80080da:	441a      	add	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d207      	bcs.n	80080fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	425b      	negs	r3, r3
 80080f6:	441a      	add	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d105      	bne.n	800810e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	3b01      	subs	r3, #1
 800810c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008116:	697b      	ldr	r3, [r7, #20]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	441a      	add	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d303      	bcc.n	8008154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68d9      	ldr	r1, [r3, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	461a      	mov	r2, r3
 800815e:	6838      	ldr	r0, [r7, #0]
 8008160:	f003 fce5 	bl	800bb2e <memcpy>
	}
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008174:	f001 fcf6 	bl	8009b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008180:	e011      	b.n	80081a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d012      	beq.n	80081b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3324      	adds	r3, #36	; 0x24
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fdce 	bl	8008d30 <xTaskRemoveFromEventList>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800819a:	f000 fea5 	bl	8008ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dce9      	bgt.n	8008182 <prvUnlockQueue+0x16>
 80081ae:	e000      	b.n	80081b2 <prvUnlockQueue+0x46>
					break;
 80081b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081ba:	f001 fd03 	bl	8009bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081be:	f001 fcd1 	bl	8009b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ca:	e011      	b.n	80081f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d012      	beq.n	80081fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3310      	adds	r3, #16
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fda9 	bl	8008d30 <xTaskRemoveFromEventList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081e4:	f000 fe80 	bl	8008ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dce9      	bgt.n	80081cc <prvUnlockQueue+0x60>
 80081f8:	e000      	b.n	80081fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	22ff      	movs	r2, #255	; 0xff
 8008200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008204:	f001 fcde 	bl	8009bc4 <vPortExitCritical>
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008218:	f001 fca4 	bl	8009b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e001      	b.n	800822e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800822e:	f001 fcc9 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008244:	f001 fc8e 	bl	8009b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008250:	429a      	cmp	r2, r3
 8008252:	d102      	bne.n	800825a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e001      	b.n	800825e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f001 fcb1 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008262:	68fb      	ldr	r3, [r7, #12]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e014      	b.n	80082a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800827c:	4a0f      	ldr	r2, [pc, #60]	; (80082bc <vQueueAddToRegistry+0x50>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008288:	490c      	ldr	r1, [pc, #48]	; (80082bc <vQueueAddToRegistry+0x50>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <vQueueAddToRegistry+0x50>)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	4413      	add	r3, r2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800829e:	e006      	b.n	80082ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b07      	cmp	r3, #7
 80082aa:	d9e7      	bls.n	800827c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	20000c2c 	.word	0x20000c2c

080082c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082d0:	f001 fc48 	bl	8009b64 <vPortEnterCritical>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082da:	b25b      	sxtb	r3, r3
 80082dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e0:	d103      	bne.n	80082ea <vQueueWaitForMessageRestricted+0x2a>
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f0:	b25b      	sxtb	r3, r3
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d103      	bne.n	8008300 <vQueueWaitForMessageRestricted+0x40>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008300:	f001 fc60 	bl	8009bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d106      	bne.n	800831a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	3324      	adds	r3, #36	; 0x24
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fcdf 	bl	8008cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800831a:	6978      	ldr	r0, [r7, #20]
 800831c:	f7ff ff26 	bl	800816c <prvUnlockQueue>
	}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	; 0x38
 800832c:	af04      	add	r7, sp, #16
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <xTaskCreateStatic+0x2a>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xTaskCreateStatic+0x46>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61fb      	str	r3, [r7, #28]
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800836e:	235c      	movs	r3, #92	; 0x5c
 8008370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b5c      	cmp	r3, #92	; 0x5c
 8008376:	d00a      	beq.n	800838e <xTaskCreateStatic+0x66>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	61bb      	str	r3, [r7, #24]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800838e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01e      	beq.n	80083d4 <xTaskCreateStatic+0xac>
 8008396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01b      	beq.n	80083d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083ae:	2300      	movs	r3, #0
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	9302      	str	r3, [sp, #8]
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f850 	bl	800846c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083ce:	f000 f8dd 	bl	800858c <prvAddNewTaskToReadyList>
 80083d2:	e001      	b.n	80083d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083d8:	697b      	ldr	r3, [r7, #20]
	}
 80083da:	4618      	mov	r0, r3
 80083dc:	3728      	adds	r7, #40	; 0x28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b08c      	sub	sp, #48	; 0x30
 80083e6:	af04      	add	r7, sp, #16
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fcd6 	bl	8009da8 <pvPortMalloc>
 80083fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00e      	beq.n	8008422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008404:	205c      	movs	r0, #92	; 0x5c
 8008406:	f001 fccf 	bl	8009da8 <pvPortMalloc>
 800840a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
 8008418:	e005      	b.n	8008426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800841a:	6978      	ldr	r0, [r7, #20]
 800841c:	f001 fd90 	bl	8009f40 <vPortFree>
 8008420:	e001      	b.n	8008426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d017      	beq.n	800845c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008434:	88fa      	ldrh	r2, [r7, #6]
 8008436:	2300      	movs	r3, #0
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f80e 	bl	800846c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008450:	69f8      	ldr	r0, [r7, #28]
 8008452:	f000 f89b 	bl	800858c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008456:	2301      	movs	r3, #1
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e002      	b.n	8008462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295
 8008460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008462:	69bb      	ldr	r3, [r7, #24]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	461a      	mov	r2, r3
 8008484:	21a5      	movs	r1, #165	; 0xa5
 8008486:	f003 fad2 	bl	800ba2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008494:	3b01      	subs	r3, #1
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f023 0307 	bic.w	r3, r3, #7
 80084a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	617b      	str	r3, [r7, #20]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01f      	beq.n	800850a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ca:	2300      	movs	r3, #0
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	e012      	b.n	80084f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	7819      	ldrb	r1, [r3, #0]
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	3334      	adds	r3, #52	; 0x34
 80084e0:	460a      	mov	r2, r1
 80084e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d006      	beq.n	80084fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	3301      	adds	r3, #1
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	2b0f      	cmp	r3, #15
 80084fa:	d9e9      	bls.n	80084d0 <prvInitialiseNewTask+0x64>
 80084fc:	e000      	b.n	8008500 <prvInitialiseNewTask+0x94>
			{
				break;
 80084fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008508:	e003      	b.n	8008512 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	2b37      	cmp	r3, #55	; 0x37
 8008516:	d901      	bls.n	800851c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008518:	2337      	movs	r3, #55	; 0x37
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008526:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	2200      	movs	r2, #0
 800852c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	3304      	adds	r3, #4
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f8be 	bl	80076b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	3318      	adds	r3, #24
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff f8b9 	bl	80076b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	2200      	movs	r2, #0
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	68f9      	ldr	r1, [r7, #12]
 800856a:	69b8      	ldr	r0, [r7, #24]
 800856c:	f001 f9cc 	bl	8009908 <pxPortInitialiseStack>
 8008570:	4602      	mov	r2, r0
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008580:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008582:	bf00      	nop
 8008584:	3720      	adds	r7, #32
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008594:	f001 fae6 	bl	8009b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008598:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <prvAddNewTaskToReadyList+0xc4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	4a2c      	ldr	r2, [pc, #176]	; (8008650 <prvAddNewTaskToReadyList+0xc4>)
 80085a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085a2:	4b2c      	ldr	r3, [pc, #176]	; (8008654 <prvAddNewTaskToReadyList+0xc8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085aa:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <prvAddNewTaskToReadyList+0xc8>)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <prvAddNewTaskToReadyList+0xc4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d110      	bne.n	80085da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085b8:	f000 fcba 	bl	8008f30 <prvInitialiseTaskLists>
 80085bc:	e00d      	b.n	80085da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085be:	4b26      	ldr	r3, [pc, #152]	; (8008658 <prvAddNewTaskToReadyList+0xcc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085c6:	4b23      	ldr	r3, [pc, #140]	; (8008654 <prvAddNewTaskToReadyList+0xc8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d802      	bhi.n	80085da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085d4:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <prvAddNewTaskToReadyList+0xc8>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085da:	4b20      	ldr	r3, [pc, #128]	; (800865c <prvAddNewTaskToReadyList+0xd0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	4a1e      	ldr	r2, [pc, #120]	; (800865c <prvAddNewTaskToReadyList+0xd0>)
 80085e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085e4:	4b1d      	ldr	r3, [pc, #116]	; (800865c <prvAddNewTaskToReadyList+0xd0>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <prvAddNewTaskToReadyList+0xd4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d903      	bls.n	8008600 <prvAddNewTaskToReadyList+0x74>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	4a18      	ldr	r2, [pc, #96]	; (8008660 <prvAddNewTaskToReadyList+0xd4>)
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008604:	4613      	mov	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4a15      	ldr	r2, [pc, #84]	; (8008664 <prvAddNewTaskToReadyList+0xd8>)
 800860e:	441a      	add	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f7ff f859 	bl	80076ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800861c:	f001 fad2 	bl	8009bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <prvAddNewTaskToReadyList+0xcc>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00e      	beq.n	8008646 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008628:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <prvAddNewTaskToReadyList+0xc8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	429a      	cmp	r2, r3
 8008634:	d207      	bcs.n	8008646 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvAddNewTaskToReadyList+0xdc>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20001140 	.word	0x20001140
 8008654:	20000c6c 	.word	0x20000c6c
 8008658:	2000114c 	.word	0x2000114c
 800865c:	2000115c 	.word	0x2000115c
 8008660:	20001148 	.word	0x20001148
 8008664:	20000c70 	.word	0x20000c70
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d017      	beq.n	80086ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <vTaskDelay+0x60>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <vTaskDelay+0x30>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	60bb      	str	r3, [r7, #8]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800869c:	f000 f924 	bl	80088e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fd8e 	bl	80091c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086a8:	f000 f92c 	bl	8008904 <xTaskResumeAll>
 80086ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d107      	bne.n	80086c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <vTaskDelay+0x64>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20001168 	.word	0x20001168
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60fb      	str	r3, [r7, #12]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <prvTaskIsTaskSuspended+0x5c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d10a      	bne.n	8008720 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	4a09      	ldr	r2, [pc, #36]	; (8008734 <prvTaskIsTaskSuspended+0x60>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d005      	beq.n	8008720 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800871c:	2301      	movs	r3, #1
 800871e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008720:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008722:	4618      	mov	r0, r3
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	2000112c 	.word	0x2000112c
 8008734:	20001100 	.word	0x20001100

08008738 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	61bb      	str	r3, [r7, #24]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008764:	f001 fae0 	bl	8009d28 <vPortValidateInterruptPriority>
	__asm volatile
 8008768:	f3ef 8211 	mrs	r2, BASEPRI
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	617a      	str	r2, [r7, #20]
 800877e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008780:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008782:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008784:	6a38      	ldr	r0, [r7, #32]
 8008786:	f7ff ffa5 	bl	80086d4 <prvTaskIsTaskSuspended>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d030      	beq.n	80087f2 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008790:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <xTaskResumeFromISR+0xd0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d126      	bne.n	80087e6 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4b1b      	ldr	r3, [pc, #108]	; (800880c <xTaskResumeFromISR+0xd4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d301      	bcc.n	80087aa <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe ffea 	bl	8007788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <xTaskResumeFromISR+0xd8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d903      	bls.n	80087c8 <xTaskResumeFromISR+0x90>
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a12      	ldr	r2, [pc, #72]	; (8008810 <xTaskResumeFromISR+0xd8>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4a0f      	ldr	r2, [pc, #60]	; (8008814 <xTaskResumeFromISR+0xdc>)
 80087d6:	441a      	add	r2, r3
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fe ff75 	bl	80076ce <vListInsertEnd>
 80087e4:	e005      	b.n	80087f2 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	3318      	adds	r3, #24
 80087ea:	4619      	mov	r1, r3
 80087ec:	480a      	ldr	r0, [pc, #40]	; (8008818 <xTaskResumeFromISR+0xe0>)
 80087ee:	f7fe ff6e 	bl	80076ce <vListInsertEnd>
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f383 8811 	msr	BASEPRI, r3
}
 80087fc:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008800:	4618      	mov	r0, r3
 8008802:	3728      	adds	r7, #40	; 0x28
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20001168 	.word	0x20001168
 800880c:	20000c6c 	.word	0x20000c6c
 8008810:	20001148 	.word	0x20001148
 8008814:	20000c70 	.word	0x20000c70
 8008818:	20001100 	.word	0x20001100

0800881c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882a:	463a      	mov	r2, r7
 800882c:	1d39      	adds	r1, r7, #4
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe feea 	bl	800760c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	9202      	str	r2, [sp, #8]
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	460a      	mov	r2, r1
 800884a:	4921      	ldr	r1, [pc, #132]	; (80088d0 <vTaskStartScheduler+0xb4>)
 800884c:	4821      	ldr	r0, [pc, #132]	; (80088d4 <vTaskStartScheduler+0xb8>)
 800884e:	f7ff fd6b 	bl	8008328 <xTaskCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <vTaskStartScheduler+0xbc>)
 8008856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008858:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <vTaskStartScheduler+0xbc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e001      	b.n	800886a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008870:	f000 fcfc 	bl	800926c <xTimerCreateTimerTask>
 8008874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d116      	bne.n	80088aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <vTaskStartScheduler+0xc0>)
 8008892:	f04f 32ff 	mov.w	r2, #4294967295
 8008896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <vTaskStartScheduler+0xc4>)
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <vTaskStartScheduler+0xc8>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088a4:	f001 f8bc 	bl	8009a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a8:	e00e      	b.n	80088c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d10a      	bne.n	80088c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <vTaskStartScheduler+0xaa>
}
 80088c8:	bf00      	nop
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	08010424 	.word	0x08010424
 80088d4:	08008f01 	.word	0x08008f01
 80088d8:	20001164 	.word	0x20001164
 80088dc:	20001160 	.word	0x20001160
 80088e0:	2000114c 	.word	0x2000114c
 80088e4:	20001144 	.word	0x20001144

080088e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088ec:	4b04      	ldr	r3, [pc, #16]	; (8008900 <vTaskSuspendAll+0x18>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	4a03      	ldr	r2, [pc, #12]	; (8008900 <vTaskSuspendAll+0x18>)
 80088f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	20001168 	.word	0x20001168

08008904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008912:	4b42      	ldr	r3, [pc, #264]	; (8008a1c <xTaskResumeAll+0x118>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <xTaskResumeAll+0x2c>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	603b      	str	r3, [r7, #0]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008930:	f001 f918 	bl	8009b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008934:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <xTaskResumeAll+0x118>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	4a38      	ldr	r2, [pc, #224]	; (8008a1c <xTaskResumeAll+0x118>)
 800893c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893e:	4b37      	ldr	r3, [pc, #220]	; (8008a1c <xTaskResumeAll+0x118>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d162      	bne.n	8008a0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008946:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <xTaskResumeAll+0x11c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d05e      	beq.n	8008a0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800894e:	e02f      	b.n	80089b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008950:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <xTaskResumeAll+0x120>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3318      	adds	r3, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe ff13 	bl	8007788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3304      	adds	r3, #4
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe ff0e 	bl	8007788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008970:	4b2d      	ldr	r3, [pc, #180]	; (8008a28 <xTaskResumeAll+0x124>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <xTaskResumeAll+0x7c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <xTaskResumeAll+0x124>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4a27      	ldr	r2, [pc, #156]	; (8008a2c <xTaskResumeAll+0x128>)
 800898e:	441a      	add	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe fe99 	bl	80076ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <xTaskResumeAll+0x12c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089aa:	4b22      	ldr	r3, [pc, #136]	; (8008a34 <xTaskResumeAll+0x130>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b0:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xTaskResumeAll+0x120>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1cb      	bne.n	8008950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089be:	f000 fb55 	bl	800906c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089c2:	4b1d      	ldr	r3, [pc, #116]	; (8008a38 <xTaskResumeAll+0x134>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089ce:	f000 f847 	bl	8008a60 <xTaskIncrementTick>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089d8:	4b16      	ldr	r3, [pc, #88]	; (8008a34 <xTaskResumeAll+0x130>)
 80089da:	2201      	movs	r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f1      	bne.n	80089ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <xTaskResumeAll+0x134>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089f0:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <xTaskResumeAll+0x130>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d009      	beq.n	8008a0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <xTaskResumeAll+0x138>)
 80089fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a0c:	f001 f8da 	bl	8009bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a10:	68bb      	ldr	r3, [r7, #8]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20001168 	.word	0x20001168
 8008a20:	20001140 	.word	0x20001140
 8008a24:	20001100 	.word	0x20001100
 8008a28:	20001148 	.word	0x20001148
 8008a2c:	20000c70 	.word	0x20000c70
 8008a30:	20000c6c 	.word	0x20000c6c
 8008a34:	20001154 	.word	0x20001154
 8008a38:	20001150 	.word	0x20001150
 8008a3c:	e000ed04 	.word	0xe000ed04

08008a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <xTaskGetTickCount+0x1c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a4c:	687b      	ldr	r3, [r7, #4]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20001144 	.word	0x20001144

08008a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6a:	4b4f      	ldr	r3, [pc, #316]	; (8008ba8 <xTaskIncrementTick+0x148>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 808f 	bne.w	8008b92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a74:	4b4d      	ldr	r3, [pc, #308]	; (8008bac <xTaskIncrementTick+0x14c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a7c:	4a4b      	ldr	r2, [pc, #300]	; (8008bac <xTaskIncrementTick+0x14c>)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d120      	bne.n	8008aca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a88:	4b49      	ldr	r3, [pc, #292]	; (8008bb0 <xTaskIncrementTick+0x150>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	603b      	str	r3, [r7, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xTaskIncrementTick+0x46>
 8008aa8:	4b41      	ldr	r3, [pc, #260]	; (8008bb0 <xTaskIncrementTick+0x150>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <xTaskIncrementTick+0x154>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a3f      	ldr	r2, [pc, #252]	; (8008bb0 <xTaskIncrementTick+0x150>)
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	; (8008bb4 <xTaskIncrementTick+0x154>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	4b3e      	ldr	r3, [pc, #248]	; (8008bb8 <xTaskIncrementTick+0x158>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	4a3d      	ldr	r2, [pc, #244]	; (8008bb8 <xTaskIncrementTick+0x158>)
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	f000 fad1 	bl	800906c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aca:	4b3c      	ldr	r3, [pc, #240]	; (8008bbc <xTaskIncrementTick+0x15c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d349      	bcc.n	8008b68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <xTaskIncrementTick+0x150>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ade:	4b37      	ldr	r3, [pc, #220]	; (8008bbc <xTaskIncrementTick+0x15c>)
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	601a      	str	r2, [r3, #0]
					break;
 8008ae6:	e03f      	b.n	8008b68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae8:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xTaskIncrementTick+0x150>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d203      	bcs.n	8008b08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b00:	4a2e      	ldr	r2, [pc, #184]	; (8008bbc <xTaskIncrementTick+0x15c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b06:	e02f      	b.n	8008b68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fe3b 	bl	8007788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	3318      	adds	r3, #24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fe32 	bl	8007788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <xTaskIncrementTick+0x160>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d903      	bls.n	8008b38 <xTaskIncrementTick+0xd8>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4a22      	ldr	r2, [pc, #136]	; (8008bc0 <xTaskIncrementTick+0x160>)
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <xTaskIncrementTick+0x164>)
 8008b46:	441a      	add	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f7fe fdbd 	bl	80076ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <xTaskIncrementTick+0x168>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d3b8      	bcc.n	8008ad4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b62:	2301      	movs	r3, #1
 8008b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b66:	e7b5      	b.n	8008ad4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b68:	4b17      	ldr	r3, [pc, #92]	; (8008bc8 <xTaskIncrementTick+0x168>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6e:	4915      	ldr	r1, [pc, #84]	; (8008bc4 <xTaskIncrementTick+0x164>)
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d901      	bls.n	8008b84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <xTaskIncrementTick+0x16c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e004      	b.n	8008b9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <xTaskIncrementTick+0x170>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3301      	adds	r3, #1
 8008b98:	4a0d      	ldr	r2, [pc, #52]	; (8008bd0 <xTaskIncrementTick+0x170>)
 8008b9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b9c:	697b      	ldr	r3, [r7, #20]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20001168 	.word	0x20001168
 8008bac:	20001144 	.word	0x20001144
 8008bb0:	200010f8 	.word	0x200010f8
 8008bb4:	200010fc 	.word	0x200010fc
 8008bb8:	20001158 	.word	0x20001158
 8008bbc:	20001160 	.word	0x20001160
 8008bc0:	20001148 	.word	0x20001148
 8008bc4:	20000c70 	.word	0x20000c70
 8008bc8:	20000c6c 	.word	0x20000c6c
 8008bcc:	20001154 	.word	0x20001154
 8008bd0:	20001150 	.word	0x20001150

08008bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bda:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <vTaskSwitchContext+0xa8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008be2:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <vTaskSwitchContext+0xac>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008be8:	e041      	b.n	8008c6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008bea:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <vTaskSwitchContext+0xac>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf0:	4b24      	ldr	r3, [pc, #144]	; (8008c84 <vTaskSwitchContext+0xb0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e010      	b.n	8008c1a <vTaskSwitchContext+0x46>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <vTaskSwitchContext+0x40>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vTaskSwitchContext+0x3e>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	491b      	ldr	r1, [pc, #108]	; (8008c88 <vTaskSwitchContext+0xb4>)
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0e4      	beq.n	8008bf8 <vTaskSwitchContext+0x24>
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <vTaskSwitchContext+0xb4>)
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	605a      	str	r2, [r3, #4]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d104      	bne.n	8008c5e <vTaskSwitchContext+0x8a>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	605a      	str	r2, [r3, #4]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <vTaskSwitchContext+0xb8>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4a06      	ldr	r2, [pc, #24]	; (8008c84 <vTaskSwitchContext+0xb0>)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20001168 	.word	0x20001168
 8008c80:	20001154 	.word	0x20001154
 8008c84:	20001148 	.word	0x20001148
 8008c88:	20000c70 	.word	0x20000c70
 8008c8c:	20000c6c 	.word	0x20000c6c

08008c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60fb      	str	r3, [r7, #12]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cb6:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <vTaskPlaceOnEventList+0x44>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3318      	adds	r3, #24
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fe fd29 	bl	8007716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	6838      	ldr	r0, [r7, #0]
 8008cc8:	f000 fa7c 	bl	80091c4 <prvAddCurrentTaskToDelayedList>
}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000c6c 	.word	0x20000c6c

08008cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	617b      	str	r3, [r7, #20]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d00:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3318      	adds	r3, #24
 8008d06:	4619      	mov	r1, r3
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7fe fce0 	bl	80076ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d14:	f04f 33ff 	mov.w	r3, #4294967295
 8008d18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	68b8      	ldr	r0, [r7, #8]
 8008d1e:	f000 fa51 	bl	80091c4 <prvAddCurrentTaskToDelayedList>
	}
 8008d22:	bf00      	nop
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000c6c 	.word	0x20000c6c

08008d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60fb      	str	r3, [r7, #12]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3318      	adds	r3, #24
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe fd11 	bl	8007788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d66:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <xTaskRemoveFromEventList+0xb0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d11d      	bne.n	8008daa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe fd08 	bl	8007788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <xTaskRemoveFromEventList+0xb4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d903      	bls.n	8008d8c <xTaskRemoveFromEventList+0x5c>
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <xTaskRemoveFromEventList+0xb4>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <xTaskRemoveFromEventList+0xb8>)
 8008d9a:	441a      	add	r2, r3
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fe fc93 	bl	80076ce <vListInsertEnd>
 8008da8:	e005      	b.n	8008db6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3318      	adds	r3, #24
 8008dae:	4619      	mov	r1, r3
 8008db0:	480e      	ldr	r0, [pc, #56]	; (8008dec <xTaskRemoveFromEventList+0xbc>)
 8008db2:	f7fe fc8c 	bl	80076ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <xTaskRemoveFromEventList+0xc0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d905      	bls.n	8008dd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <xTaskRemoveFromEventList+0xc4>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e001      	b.n	8008dd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dd4:	697b      	ldr	r3, [r7, #20]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20001168 	.word	0x20001168
 8008de4:	20001148 	.word	0x20001148
 8008de8:	20000c70 	.word	0x20000c70
 8008dec:	20001100 	.word	0x20001100
 8008df0:	20000c6c 	.word	0x20000c6c
 8008df4:	20001154 	.word	0x20001154

08008df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <vTaskInternalSetTimeOutState+0x24>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <vTaskInternalSetTimeOutState+0x28>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	605a      	str	r2, [r3, #4]
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	20001158 	.word	0x20001158
 8008e20:	20001144 	.word	0x20001144

08008e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	613b      	str	r3, [r7, #16]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e66:	f000 fe7d 	bl	8009b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <xTaskCheckForTimeOut+0xbc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d102      	bne.n	8008e8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e023      	b.n	8008ed2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b15      	ldr	r3, [pc, #84]	; (8008ee4 <xTaskCheckForTimeOut+0xc0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d007      	beq.n	8008ea6 <xTaskCheckForTimeOut+0x82>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e015      	b.n	8008ed2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d20b      	bcs.n	8008ec8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff ff9b 	bl	8008df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	e004      	b.n	8008ed2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ed2:	f000 fe77 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20001144 	.word	0x20001144
 8008ee4:	20001158 	.word	0x20001158

08008ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008eec:	4b03      	ldr	r3, [pc, #12]	; (8008efc <vTaskMissedYield+0x14>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	20001154 	.word	0x20001154

08008f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f08:	f000 f852 	bl	8008fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <prvIdleTask+0x28>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d9f9      	bls.n	8008f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <prvIdleTask+0x2c>)
 8008f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f24:	e7f0      	b.n	8008f08 <prvIdleTask+0x8>
 8008f26:	bf00      	nop
 8008f28:	20000c70 	.word	0x20000c70
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f36:	2300      	movs	r3, #0
 8008f38:	607b      	str	r3, [r7, #4]
 8008f3a:	e00c      	b.n	8008f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4a12      	ldr	r2, [pc, #72]	; (8008f90 <prvInitialiseTaskLists+0x60>)
 8008f48:	4413      	add	r3, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fb92 	bl	8007674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3301      	adds	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b37      	cmp	r3, #55	; 0x37
 8008f5a:	d9ef      	bls.n	8008f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f5c:	480d      	ldr	r0, [pc, #52]	; (8008f94 <prvInitialiseTaskLists+0x64>)
 8008f5e:	f7fe fb89 	bl	8007674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <prvInitialiseTaskLists+0x68>)
 8008f64:	f7fe fb86 	bl	8007674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f68:	480c      	ldr	r0, [pc, #48]	; (8008f9c <prvInitialiseTaskLists+0x6c>)
 8008f6a:	f7fe fb83 	bl	8007674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f6e:	480c      	ldr	r0, [pc, #48]	; (8008fa0 <prvInitialiseTaskLists+0x70>)
 8008f70:	f7fe fb80 	bl	8007674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f74:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <prvInitialiseTaskLists+0x74>)
 8008f76:	f7fe fb7d 	bl	8007674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <prvInitialiseTaskLists+0x78>)
 8008f7c:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <prvInitialiseTaskLists+0x64>)
 8008f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <prvInitialiseTaskLists+0x7c>)
 8008f82:	4a05      	ldr	r2, [pc, #20]	; (8008f98 <prvInitialiseTaskLists+0x68>)
 8008f84:	601a      	str	r2, [r3, #0]
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000c70 	.word	0x20000c70
 8008f94:	200010d0 	.word	0x200010d0
 8008f98:	200010e4 	.word	0x200010e4
 8008f9c:	20001100 	.word	0x20001100
 8008fa0:	20001114 	.word	0x20001114
 8008fa4:	2000112c 	.word	0x2000112c
 8008fa8:	200010f8 	.word	0x200010f8
 8008fac:	200010fc 	.word	0x200010fc

08008fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb6:	e019      	b.n	8008fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fb8:	f000 fdd4 	bl	8009b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fbc:	4b10      	ldr	r3, [pc, #64]	; (8009000 <prvCheckTasksWaitingTermination+0x50>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fbdd 	bl	8007788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <prvCheckTasksWaitingTermination+0x54>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	4a0b      	ldr	r2, [pc, #44]	; (8009004 <prvCheckTasksWaitingTermination+0x54>)
 8008fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <prvCheckTasksWaitingTermination+0x58>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <prvCheckTasksWaitingTermination+0x58>)
 8008fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fe2:	f000 fdef 	bl	8009bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f810 	bl	800900c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <prvCheckTasksWaitingTermination+0x58>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e1      	bne.n	8008fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20001114 	.word	0x20001114
 8009004:	20001140 	.word	0x20001140
 8009008:	20001128 	.word	0x20001128

0800900c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800901a:	2b00      	cmp	r3, #0
 800901c:	d108      	bne.n	8009030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	4618      	mov	r0, r3
 8009024:	f000 ff8c 	bl	8009f40 <vPortFree>
				vPortFree( pxTCB );
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 ff89 	bl	8009f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800902e:	e018      	b.n	8009062 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009036:	2b01      	cmp	r3, #1
 8009038:	d103      	bne.n	8009042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 ff80 	bl	8009f40 <vPortFree>
	}
 8009040:	e00f      	b.n	8009062 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009048:	2b02      	cmp	r3, #2
 800904a:	d00a      	beq.n	8009062 <prvDeleteTCB+0x56>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	60fb      	str	r3, [r7, #12]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <prvDeleteTCB+0x54>
	}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <prvResetNextTaskUnblockTime+0x38>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <prvResetNextTaskUnblockTime+0x3c>)
 800907e:	f04f 32ff 	mov.w	r2, #4294967295
 8009082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009084:	e008      	b.n	8009098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009086:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <prvResetNextTaskUnblockTime+0x38>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <prvResetNextTaskUnblockTime+0x3c>)
 8009096:	6013      	str	r3, [r2, #0]
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	200010f8 	.word	0x200010f8
 80090a8:	20001160 	.word	0x20001160

080090ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <xTaskGetSchedulerState+0x34>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090ba:	2301      	movs	r3, #1
 80090bc:	607b      	str	r3, [r7, #4]
 80090be:	e008      	b.n	80090d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c0:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <xTaskGetSchedulerState+0x38>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090c8:	2302      	movs	r3, #2
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	e001      	b.n	80090d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090d2:	687b      	ldr	r3, [r7, #4]
	}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	2000114c 	.word	0x2000114c
 80090e4:	20001168 	.word	0x20001168

080090e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090f4:	2300      	movs	r3, #0
 80090f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d056      	beq.n	80091ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090fe:	4b2e      	ldr	r3, [pc, #184]	; (80091b8 <xTaskPriorityDisinherit+0xd0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d00a      	beq.n	800911e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	60fb      	str	r3, [r7, #12]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009140:	1e5a      	subs	r2, r3, #1
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914e:	429a      	cmp	r2, r3
 8009150:	d02c      	beq.n	80091ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009156:	2b00      	cmp	r3, #0
 8009158:	d128      	bne.n	80091ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	3304      	adds	r3, #4
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fb12 	bl	8007788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917c:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <xTaskPriorityDisinherit+0xd4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d903      	bls.n	800918c <xTaskPriorityDisinherit+0xa4>
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <xTaskPriorityDisinherit+0xd4>)
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <xTaskPriorityDisinherit+0xd8>)
 800919a:	441a      	add	r2, r3
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7fe fa93 	bl	80076ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091ac:	697b      	ldr	r3, [r7, #20]
	}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000c6c 	.word	0x20000c6c
 80091bc:	20001148 	.word	0x20001148
 80091c0:	20000c70 	.word	0x20000c70

080091c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <prvAddCurrentTaskToDelayedList+0x90>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d4:	4b20      	ldr	r3, [pc, #128]	; (8009258 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fad4 	bl	8007788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d10a      	bne.n	80091fe <prvAddCurrentTaskToDelayedList+0x3a>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ee:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <prvAddCurrentTaskToDelayedList+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4819      	ldr	r0, [pc, #100]	; (800925c <prvAddCurrentTaskToDelayedList+0x98>)
 80091f8:	f7fe fa69 	bl	80076ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091fc:	e026      	b.n	800924c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4413      	add	r3, r2
 8009204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <prvAddCurrentTaskToDelayedList+0x94>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	429a      	cmp	r2, r3
 8009214:	d209      	bcs.n	800922a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <prvAddCurrentTaskToDelayedList+0x94>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe fa77 	bl	8007716 <vListInsert>
}
 8009228:	e010      	b.n	800924c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800922a:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <prvAddCurrentTaskToDelayedList+0x94>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe fa6d 	bl	8007716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800923c:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	429a      	cmp	r2, r3
 8009244:	d202      	bcs.n	800924c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009246:	4a08      	ldr	r2, [pc, #32]	; (8009268 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	6013      	str	r3, [r2, #0]
}
 800924c:	bf00      	nop
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20001144 	.word	0x20001144
 8009258:	20000c6c 	.word	0x20000c6c
 800925c:	2000112c 	.word	0x2000112c
 8009260:	200010fc 	.word	0x200010fc
 8009264:	200010f8 	.word	0x200010f8
 8009268:	20001160 	.word	0x20001160

0800926c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009276:	f000 fb07 	bl	8009888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800927a:	4b1c      	ldr	r3, [pc, #112]	; (80092ec <xTimerCreateTimerTask+0x80>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d021      	beq.n	80092c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800928a:	1d3a      	adds	r2, r7, #4
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	f107 030c 	add.w	r3, r7, #12
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe f9d3 	bl	8007640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	9202      	str	r2, [sp, #8]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	2302      	movs	r3, #2
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	2300      	movs	r3, #0
 80092aa:	460a      	mov	r2, r1
 80092ac:	4910      	ldr	r1, [pc, #64]	; (80092f0 <xTimerCreateTimerTask+0x84>)
 80092ae:	4811      	ldr	r0, [pc, #68]	; (80092f4 <xTimerCreateTimerTask+0x88>)
 80092b0:	f7ff f83a 	bl	8008328 <xTaskCreateStatic>
 80092b4:	4603      	mov	r3, r0
 80092b6:	4a10      	ldr	r2, [pc, #64]	; (80092f8 <xTimerCreateTimerTask+0x8c>)
 80092b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092ba:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <xTimerCreateTimerTask+0x8c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092c2:	2301      	movs	r3, #1
 80092c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	613b      	str	r3, [r7, #16]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092e2:	697b      	ldr	r3, [r7, #20]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	2000119c 	.word	0x2000119c
 80092f0:	0801042c 	.word	0x0801042c
 80092f4:	08009431 	.word	0x08009431
 80092f8:	200011a0 	.word	0x200011a0

080092fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	; 0x28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800930a:	2300      	movs	r3, #0
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	623b      	str	r3, [r7, #32]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800932a:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <xTimerGenericCommand+0x98>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d02a      	beq.n	8009388 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b05      	cmp	r3, #5
 8009342:	dc18      	bgt.n	8009376 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009344:	f7ff feb2 	bl	80090ac <xTaskGetSchedulerState>
 8009348:	4603      	mov	r3, r0
 800934a:	2b02      	cmp	r3, #2
 800934c:	d109      	bne.n	8009362 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <xTimerGenericCommand+0x98>)
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f107 0110 	add.w	r1, r7, #16
 8009356:	2300      	movs	r3, #0
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	f7fe fb7d 	bl	8007a58 <xQueueGenericSend>
 800935e:	6278      	str	r0, [r7, #36]	; 0x24
 8009360:	e012      	b.n	8009388 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <xTimerGenericCommand+0x98>)
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	f107 0110 	add.w	r1, r7, #16
 800936a:	2300      	movs	r3, #0
 800936c:	2200      	movs	r2, #0
 800936e:	f7fe fb73 	bl	8007a58 <xQueueGenericSend>
 8009372:	6278      	str	r0, [r7, #36]	; 0x24
 8009374:	e008      	b.n	8009388 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009376:	4b07      	ldr	r3, [pc, #28]	; (8009394 <xTimerGenericCommand+0x98>)
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f107 0110 	add.w	r1, r7, #16
 800937e:	2300      	movs	r3, #0
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	f7fe fc67 	bl	8007c54 <xQueueGenericSendFromISR>
 8009386:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800938a:	4618      	mov	r0, r3
 800938c:	3728      	adds	r7, #40	; 0x28
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000119c 	.word	0x2000119c

08009398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af02      	add	r7, sp, #8
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <prvProcessExpiredTimer+0x94>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe f9e9 	bl	8007788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d022      	beq.n	800940a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	699a      	ldr	r2, [r3, #24]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	18d1      	adds	r1, r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	6978      	ldr	r0, [r7, #20]
 80093d2:	f000 f8d1 	bl	8009578 <prvInsertTimerInActiveList>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01f      	beq.n	800941c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093dc:	2300      	movs	r3, #0
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	2300      	movs	r3, #0
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	2100      	movs	r1, #0
 80093e6:	6978      	ldr	r0, [r7, #20]
 80093e8:	f7ff ff88 	bl	80092fc <xTimerGenericCommand>
 80093ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d113      	bne.n	800941c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	60fb      	str	r3, [r7, #12]
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	6a1b      	ldr	r3, [r3, #32]
 8009420:	6978      	ldr	r0, [r7, #20]
 8009422:	4798      	blx	r3
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20001194 	.word	0x20001194

08009430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f000 f857 	bl	80094f0 <prvGetNextExpireTime>
 8009442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4619      	mov	r1, r3
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f803 	bl	8009454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800944e:	f000 f8d5 	bl	80095fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009452:	e7f1      	b.n	8009438 <prvTimerTask+0x8>

08009454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800945e:	f7ff fa43 	bl	80088e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009462:	f107 0308 	add.w	r3, r7, #8
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f866 	bl	8009538 <prvSampleTimeNow>
 800946c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d130      	bne.n	80094d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <prvProcessTimerOrBlockTask+0x3c>
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	429a      	cmp	r2, r3
 8009480:	d806      	bhi.n	8009490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009482:	f7ff fa3f 	bl	8008904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff ff85 	bl	8009398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800948e:	e024      	b.n	80094da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d008      	beq.n	80094a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009496:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <prvProcessTimerOrBlockTask+0x90>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <prvProcessTimerOrBlockTask+0x50>
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <prvProcessTimerOrBlockTask+0x52>
 80094a4:	2300      	movs	r3, #0
 80094a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <prvProcessTimerOrBlockTask+0x94>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f7fe ff03 	bl	80082c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094ba:	f7ff fa23 	bl	8008904 <xTaskResumeAll>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094c4:	4b09      	ldr	r3, [pc, #36]	; (80094ec <prvProcessTimerOrBlockTask+0x98>)
 80094c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	f3bf 8f6f 	isb	sy
}
 80094d4:	e001      	b.n	80094da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094d6:	f7ff fa15 	bl	8008904 <xTaskResumeAll>
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20001198 	.word	0x20001198
 80094e8:	2000119c 	.word	0x2000119c
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094f8:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <prvGetNextExpireTime+0x44>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <prvGetNextExpireTime+0x16>
 8009502:	2201      	movs	r2, #1
 8009504:	e000      	b.n	8009508 <prvGetNextExpireTime+0x18>
 8009506:	2200      	movs	r2, #0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009514:	4b07      	ldr	r3, [pc, #28]	; (8009534 <prvGetNextExpireTime+0x44>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	e001      	b.n	8009524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009524:	68fb      	ldr	r3, [r7, #12]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20001194 	.word	0x20001194

08009538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009540:	f7ff fa7e 	bl	8008a40 <xTaskGetTickCount>
 8009544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <prvSampleTimeNow+0x3c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	429a      	cmp	r2, r3
 800954e:	d205      	bcs.n	800955c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009550:	f000 f936 	bl	80097c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e002      	b.n	8009562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009562:	4a04      	ldr	r2, [pc, #16]	; (8009574 <prvSampleTimeNow+0x3c>)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009568:	68fb      	ldr	r3, [r7, #12]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200011a4 	.word	0x200011a4

08009578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d812      	bhi.n	80095c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d302      	bcc.n	80095b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	e01b      	b.n	80095ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <prvInsertTimerInActiveList+0x7c>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fe f8aa 	bl	8007716 <vListInsert>
 80095c2:	e012      	b.n	80095ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d206      	bcs.n	80095da <prvInsertTimerInActiveList+0x62>
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d302      	bcc.n	80095da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095d4:	2301      	movs	r3, #1
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e007      	b.n	80095ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095da:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <prvInsertTimerInActiveList+0x80>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f7fe f896 	bl	8007716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095ea:	697b      	ldr	r3, [r7, #20]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	20001198 	.word	0x20001198
 80095f8:	20001194 	.word	0x20001194

080095fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08e      	sub	sp, #56	; 0x38
 8009600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009602:	e0ca      	b.n	800979a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	da18      	bge.n	800963c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800960a:	1d3b      	adds	r3, r7, #4
 800960c:	3304      	adds	r3, #4
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	61fb      	str	r3, [r7, #28]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009632:	6850      	ldr	r0, [r2, #4]
 8009634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009636:	6892      	ldr	r2, [r2, #8]
 8009638:	4611      	mov	r1, r2
 800963a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f2c0 80ab 	blt.w	800979a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe f897 	bl	8007788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800965a:	463b      	mov	r3, r7
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff ff6b 	bl	8009538 <prvSampleTimeNow>
 8009662:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b09      	cmp	r3, #9
 8009668:	f200 8096 	bhi.w	8009798 <prvProcessReceivedCommands+0x19c>
 800966c:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <prvProcessReceivedCommands+0x78>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	0800969d 	.word	0x0800969d
 8009678:	0800969d 	.word	0x0800969d
 800967c:	0800969d 	.word	0x0800969d
 8009680:	08009711 	.word	0x08009711
 8009684:	08009725 	.word	0x08009725
 8009688:	0800976f 	.word	0x0800976f
 800968c:	0800969d 	.word	0x0800969d
 8009690:	0800969d 	.word	0x0800969d
 8009694:	08009711 	.word	0x08009711
 8009698:	08009725 	.word	0x08009725
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	18d1      	adds	r1, r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096bc:	f7ff ff5c 	bl	8009578 <prvInsertTimerInActiveList>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d069      	beq.n	800979a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d05e      	beq.n	800979a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	441a      	add	r2, r3
 80096e4:	2300      	movs	r3, #0
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2300      	movs	r3, #0
 80096ea:	2100      	movs	r1, #0
 80096ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ee:	f7ff fe05 	bl	80092fc <xTimerGenericCommand>
 80096f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d14f      	bne.n	800979a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	61bb      	str	r3, [r7, #24]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009716:	f023 0301 	bic.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009722:	e03a      	b.n	800979a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	b2da      	uxtb	r2, r3
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	617b      	str	r3, [r7, #20]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	18d1      	adds	r1, r2, r3
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009768:	f7ff ff06 	bl	8009578 <prvInsertTimerInActiveList>
					break;
 800976c:	e015      	b.n	800979a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800977c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977e:	f000 fbdf 	bl	8009f40 <vPortFree>
 8009782:	e00a      	b.n	800979a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800978a:	f023 0301 	bic.w	r3, r3, #1
 800978e:	b2da      	uxtb	r2, r3
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009796:	e000      	b.n	800979a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800979a:	4b08      	ldr	r3, [pc, #32]	; (80097bc <prvProcessReceivedCommands+0x1c0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	1d39      	adds	r1, r7, #4
 80097a0:	2200      	movs	r2, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe faf2 	bl	8007d8c <xQueueReceive>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f47f af2a 	bne.w	8009604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	3730      	adds	r7, #48	; 0x30
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	2000119c 	.word	0x2000119c

080097c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c6:	e048      	b.n	800985a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c8:	4b2d      	ldr	r3, [pc, #180]	; (8009880 <prvSwitchTimerLists+0xc0>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d2:	4b2b      	ldr	r3, [pc, #172]	; (8009880 <prvSwitchTimerLists+0xc0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fd ffd1 	bl	8007788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d02e      	beq.n	800985a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4413      	add	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	429a      	cmp	r2, r3
 800980c:	d90e      	bls.n	800982c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800981a:	4b19      	ldr	r3, [pc, #100]	; (8009880 <prvSwitchTimerLists+0xc0>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3304      	adds	r3, #4
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7fd ff76 	bl	8007716 <vListInsert>
 800982a:	e016      	b.n	800985a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800982c:	2300      	movs	r3, #0
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	2300      	movs	r3, #0
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	2100      	movs	r1, #0
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fd60 	bl	80092fc <xTimerGenericCommand>
 800983c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	603b      	str	r3, [r7, #0]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800985a:	4b09      	ldr	r3, [pc, #36]	; (8009880 <prvSwitchTimerLists+0xc0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1b1      	bne.n	80097c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <prvSwitchTimerLists+0xc0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800986a:	4b06      	ldr	r3, [pc, #24]	; (8009884 <prvSwitchTimerLists+0xc4>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a04      	ldr	r2, [pc, #16]	; (8009880 <prvSwitchTimerLists+0xc0>)
 8009870:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009872:	4a04      	ldr	r2, [pc, #16]	; (8009884 <prvSwitchTimerLists+0xc4>)
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	6013      	str	r3, [r2, #0]
}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20001194 	.word	0x20001194
 8009884:	20001198 	.word	0x20001198

08009888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800988e:	f000 f969 	bl	8009b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <prvCheckForValidListAndQueue+0x60>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d120      	bne.n	80098dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800989a:	4814      	ldr	r0, [pc, #80]	; (80098ec <prvCheckForValidListAndQueue+0x64>)
 800989c:	f7fd feea 	bl	8007674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098a0:	4813      	ldr	r0, [pc, #76]	; (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098a2:	f7fd fee7 	bl	8007674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <prvCheckForValidListAndQueue+0x6c>)
 80098a8:	4a10      	ldr	r2, [pc, #64]	; (80098ec <prvCheckForValidListAndQueue+0x64>)
 80098aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098ac:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <prvCheckForValidListAndQueue+0x70>)
 80098ae:	4a10      	ldr	r2, [pc, #64]	; (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	4b11      	ldr	r3, [pc, #68]	; (80098fc <prvCheckForValidListAndQueue+0x74>)
 80098b8:	4a11      	ldr	r2, [pc, #68]	; (8009900 <prvCheckForValidListAndQueue+0x78>)
 80098ba:	2110      	movs	r1, #16
 80098bc:	200a      	movs	r0, #10
 80098be:	f7fd fff5 	bl	80078ac <xQueueGenericCreateStatic>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098c8:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	490b      	ldr	r1, [pc, #44]	; (8009904 <prvCheckForValidListAndQueue+0x7c>)
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fcc8 	bl	800826c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098dc:	f000 f972 	bl	8009bc4 <vPortExitCritical>
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	2000119c 	.word	0x2000119c
 80098ec:	2000116c 	.word	0x2000116c
 80098f0:	20001180 	.word	0x20001180
 80098f4:	20001194 	.word	0x20001194
 80098f8:	20001198 	.word	0x20001198
 80098fc:	20001248 	.word	0x20001248
 8009900:	200011a8 	.word	0x200011a8
 8009904:	08010434 	.word	0x08010434

08009908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3b04      	subs	r3, #4
 8009918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3b04      	subs	r3, #4
 8009926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f023 0201 	bic.w	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b04      	subs	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009938:	4a0c      	ldr	r2, [pc, #48]	; (800996c <pxPortInitialiseStack+0x64>)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b14      	subs	r3, #20
 8009942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3b04      	subs	r3, #4
 800994e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f06f 0202 	mvn.w	r2, #2
 8009956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3b20      	subs	r3, #32
 800995c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	08009971 	.word	0x08009971

08009970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <prvTaskExitError+0x54>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009982:	d00a      	beq.n	800999a <prvTaskExitError+0x2a>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	60fb      	str	r3, [r7, #12]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <prvTaskExitError+0x28>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60bb      	str	r3, [r7, #8]
}
 80099ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ae:	bf00      	nop
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0fc      	beq.n	80099b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	20000034 	.word	0x20000034
	...

080099d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <pxCurrentTCBConst2>)
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	f380 8809 	msr	PSP, r0
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	4770      	bx	lr
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst2>:
 80099f0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099f8:	4808      	ldr	r0, [pc, #32]	; (8009a1c <prvPortStartFirstTask+0x24>)
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f380 8808 	msr	MSP, r0
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8814 	msr	CONTROL, r0
 8009a0a:	b662      	cpsie	i
 8009a0c:	b661      	cpsie	f
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	df00      	svc	0
 8009a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a1a:	bf00      	nop
 8009a1c:	e000ed08 	.word	0xe000ed08

08009a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a26:	4b46      	ldr	r3, [pc, #280]	; (8009b40 <xPortStartScheduler+0x120>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a46      	ldr	r2, [pc, #280]	; (8009b44 <xPortStartScheduler+0x124>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10a      	bne.n	8009a46 <xPortStartScheduler+0x26>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a46:	4b3e      	ldr	r3, [pc, #248]	; (8009b40 <xPortStartScheduler+0x120>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a3f      	ldr	r2, [pc, #252]	; (8009b48 <xPortStartScheduler+0x128>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d10a      	bne.n	8009a66 <xPortStartScheduler+0x46>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a66:	4b39      	ldr	r3, [pc, #228]	; (8009b4c <xPortStartScheduler+0x12c>)
 8009a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	22ff      	movs	r2, #255	; 0xff
 8009a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	4b31      	ldr	r3, [pc, #196]	; (8009b50 <xPortStartScheduler+0x130>)
 8009a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a8e:	4b31      	ldr	r3, [pc, #196]	; (8009b54 <xPortStartScheduler+0x134>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a94:	e009      	b.n	8009aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a96:	4b2f      	ldr	r3, [pc, #188]	; (8009b54 <xPortStartScheduler+0x134>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	4a2d      	ldr	r2, [pc, #180]	; (8009b54 <xPortStartScheduler+0x134>)
 8009a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d0ef      	beq.n	8009a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ab6:	4b27      	ldr	r3, [pc, #156]	; (8009b54 <xPortStartScheduler+0x134>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1c3 0307 	rsb	r3, r3, #7
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d00a      	beq.n	8009ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	60bb      	str	r3, [r7, #8]
}
 8009ad4:	bf00      	nop
 8009ad6:	e7fe      	b.n	8009ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ad8:	4b1e      	ldr	r3, [pc, #120]	; (8009b54 <xPortStartScheduler+0x134>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <xPortStartScheduler+0x134>)
 8009ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <xPortStartScheduler+0x134>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aea:	4a1a      	ldr	r2, [pc, #104]	; (8009b54 <xPortStartScheduler+0x134>)
 8009aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009af6:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <xPortStartScheduler+0x138>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a17      	ldr	r2, [pc, #92]	; (8009b58 <xPortStartScheduler+0x138>)
 8009afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b02:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <xPortStartScheduler+0x138>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a14      	ldr	r2, [pc, #80]	; (8009b58 <xPortStartScheduler+0x138>)
 8009b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b0e:	f000 f8dd 	bl	8009ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b12:	4b12      	ldr	r3, [pc, #72]	; (8009b5c <xPortStartScheduler+0x13c>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b18:	f000 f8fc 	bl	8009d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b1c:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <xPortStartScheduler+0x140>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a0f      	ldr	r2, [pc, #60]	; (8009b60 <xPortStartScheduler+0x140>)
 8009b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b28:	f7ff ff66 	bl	80099f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b2c:	f7ff f852 	bl	8008bd4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b30:	f7ff ff1e 	bl	8009970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	e000ed00 	.word	0xe000ed00
 8009b44:	410fc271 	.word	0x410fc271
 8009b48:	410fc270 	.word	0x410fc270
 8009b4c:	e000e400 	.word	0xe000e400
 8009b50:	20001298 	.word	0x20001298
 8009b54:	2000129c 	.word	0x2000129c
 8009b58:	e000ed20 	.word	0xe000ed20
 8009b5c:	20000034 	.word	0x20000034
 8009b60:	e000ef34 	.word	0xe000ef34

08009b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	607b      	str	r3, [r7, #4]
}
 8009b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <vPortEnterCritical+0x58>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	4a0d      	ldr	r2, [pc, #52]	; (8009bbc <vPortEnterCritical+0x58>)
 8009b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <vPortEnterCritical+0x58>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d10f      	bne.n	8009bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <vPortEnterCritical+0x5c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	603b      	str	r3, [r7, #0]
}
 8009bac:	bf00      	nop
 8009bae:	e7fe      	b.n	8009bae <vPortEnterCritical+0x4a>
	}
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20000034 	.word	0x20000034
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bca:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <vPortExitCritical+0x50>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <vPortExitCritical+0x24>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	607b      	str	r3, [r7, #4]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <vPortExitCritical+0x50>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	4a09      	ldr	r2, [pc, #36]	; (8009c14 <vPortExitCritical+0x50>)
 8009bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bf2:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <vPortExitCritical+0x50>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <vPortExitCritical+0x42>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f383 8811 	msr	BASEPRI, r3
}
 8009c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000034 	.word	0x20000034
	...

08009c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c20:	f3ef 8009 	mrs	r0, PSP
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <pxCurrentTCBConst>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	f01e 0f10 	tst.w	lr, #16
 8009c30:	bf08      	it	eq
 8009c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	6010      	str	r0, [r2, #0]
 8009c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c44:	f380 8811 	msr	BASEPRI, r0
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f7fe ffc0 	bl	8008bd4 <vTaskSwitchContext>
 8009c54:	f04f 0000 	mov.w	r0, #0
 8009c58:	f380 8811 	msr	BASEPRI, r0
 8009c5c:	bc09      	pop	{r0, r3}
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	6808      	ldr	r0, [r1, #0]
 8009c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c66:	f01e 0f10 	tst.w	lr, #16
 8009c6a:	bf08      	it	eq
 8009c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c70:	f380 8809 	msr	PSP, r0
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst>:
 8009c80:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	607b      	str	r3, [r7, #4]
}
 8009ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ca2:	f7fe fedd 	bl	8008a60 <xTaskIncrementTick>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cac:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <xPortSysTickHandler+0x40>)
 8009cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f383 8811 	msr	BASEPRI, r3
}
 8009cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <vPortSetupTimerInterrupt+0x38>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <vPortSetupTimerInterrupt+0x3c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a0a      	ldr	r2, [pc, #40]	; (8009d0c <vPortSetupTimerInterrupt+0x40>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	099b      	lsrs	r3, r3, #6
 8009ce8:	4a09      	ldr	r2, [pc, #36]	; (8009d10 <vPortSetupTimerInterrupt+0x44>)
 8009cea:	3b01      	subs	r3, #1
 8009cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cee:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	601a      	str	r2, [r3, #0]
}
 8009cf4:	bf00      	nop
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	e000e010 	.word	0xe000e010
 8009d04:	e000e018 	.word	0xe000e018
 8009d08:	20000028 	.word	0x20000028
 8009d0c:	10624dd3 	.word	0x10624dd3
 8009d10:	e000e014 	.word	0xe000e014

08009d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d24 <vPortEnableVFP+0x10>
 8009d18:	6801      	ldr	r1, [r0, #0]
 8009d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d1e:	6001      	str	r1, [r0, #0]
 8009d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d22:	bf00      	nop
 8009d24:	e000ed88 	.word	0xe000ed88

08009d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d914      	bls.n	8009d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d3a:	4a17      	ldr	r2, [pc, #92]	; (8009d98 <vPortValidateInterruptPriority+0x70>)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d44:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <vPortValidateInterruptPriority+0x74>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	7afa      	ldrb	r2, [r7, #11]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d20a      	bcs.n	8009d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d64:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <vPortValidateInterruptPriority+0x78>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <vPortValidateInterruptPriority+0x7c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d90a      	bls.n	8009d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	603b      	str	r3, [r7, #0]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <vPortValidateInterruptPriority+0x60>
	}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	e000e3f0 	.word	0xe000e3f0
 8009d9c:	20001298 	.word	0x20001298
 8009da0:	e000ed0c 	.word	0xe000ed0c
 8009da4:	2000129c 	.word	0x2000129c

08009da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	; 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009db4:	f7fe fd98 	bl	80088e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009db8:	4b5b      	ldr	r3, [pc, #364]	; (8009f28 <pvPortMalloc+0x180>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dc0:	f000 f920 	bl	800a004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dc4:	4b59      	ldr	r3, [pc, #356]	; (8009f2c <pvPortMalloc+0x184>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f040 8093 	bne.w	8009ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01d      	beq.n	8009e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009dd8:	2208      	movs	r2, #8
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d014      	beq.n	8009e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	3308      	adds	r3, #8
 8009df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <pvPortMalloc+0x6c>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	617b      	str	r3, [r7, #20]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d06e      	beq.n	8009ef8 <pvPortMalloc+0x150>
 8009e1a:	4b45      	ldr	r3, [pc, #276]	; (8009f30 <pvPortMalloc+0x188>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d869      	bhi.n	8009ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e24:	4b43      	ldr	r3, [pc, #268]	; (8009f34 <pvPortMalloc+0x18c>)
 8009e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e28:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <pvPortMalloc+0x18c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e2e:	e004      	b.n	8009e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d903      	bls.n	8009e4c <pvPortMalloc+0xa4>
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f1      	bne.n	8009e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e4c:	4b36      	ldr	r3, [pc, #216]	; (8009f28 <pvPortMalloc+0x180>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d050      	beq.n	8009ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2208      	movs	r2, #8
 8009e5c:	4413      	add	r3, r2
 8009e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	2308      	movs	r3, #8
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d91f      	bls.n	8009eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	613b      	str	r3, [r7, #16]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	1ad2      	subs	r2, r2, r3
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009eb2:	69b8      	ldr	r0, [r7, #24]
 8009eb4:	f000 f908 	bl	800a0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009eb8:	4b1d      	ldr	r3, [pc, #116]	; (8009f30 <pvPortMalloc+0x188>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	4a1b      	ldr	r2, [pc, #108]	; (8009f30 <pvPortMalloc+0x188>)
 8009ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ec6:	4b1a      	ldr	r3, [pc, #104]	; (8009f30 <pvPortMalloc+0x188>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <pvPortMalloc+0x190>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d203      	bcs.n	8009eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ed2:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <pvPortMalloc+0x188>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a18      	ldr	r2, [pc, #96]	; (8009f38 <pvPortMalloc+0x190>)
 8009ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <pvPortMalloc+0x184>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <pvPortMalloc+0x194>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a11      	ldr	r2, [pc, #68]	; (8009f3c <pvPortMalloc+0x194>)
 8009ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ef8:	f7fe fd04 	bl	8008904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <pvPortMalloc+0x174>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	60fb      	str	r3, [r7, #12]
}
 8009f18:	bf00      	nop
 8009f1a:	e7fe      	b.n	8009f1a <pvPortMalloc+0x172>
	return pvReturn;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3728      	adds	r7, #40	; 0x28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20004ea8 	.word	0x20004ea8
 8009f2c:	20004ebc 	.word	0x20004ebc
 8009f30:	20004eac 	.word	0x20004eac
 8009f34:	20004ea0 	.word	0x20004ea0
 8009f38:	20004eb0 	.word	0x20004eb0
 8009f3c:	20004eb4 	.word	0x20004eb4

08009f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d04d      	beq.n	8009fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f52:	2308      	movs	r3, #8
 8009f54:	425b      	negs	r3, r3
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	4413      	add	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	4b24      	ldr	r3, [pc, #144]	; (8009ff8 <vPortFree+0xb8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <vPortFree+0x44>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	60fb      	str	r3, [r7, #12]
}
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <vPortFree+0x62>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	60bb      	str	r3, [r7, #8]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	4b14      	ldr	r3, [pc, #80]	; (8009ff8 <vPortFree+0xb8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01e      	beq.n	8009fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d11a      	bne.n	8009fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <vPortFree+0xb8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fc8:	f7fe fc8e 	bl	80088e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <vPortFree+0xbc>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4a09      	ldr	r2, [pc, #36]	; (8009ffc <vPortFree+0xbc>)
 8009fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fda:	6938      	ldr	r0, [r7, #16]
 8009fdc:	f000 f874 	bl	800a0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <vPortFree+0xc0>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	4a06      	ldr	r2, [pc, #24]	; (800a000 <vPortFree+0xc0>)
 8009fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fea:	f7fe fc8b 	bl	8008904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fee:	bf00      	nop
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20004ebc 	.word	0x20004ebc
 8009ffc:	20004eac 	.word	0x20004eac
 800a000:	20004eb8 	.word	0x20004eb8

0800a004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a00a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a010:	4b27      	ldr	r3, [pc, #156]	; (800a0b0 <prvHeapInit+0xac>)
 800a012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00c      	beq.n	800a038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3307      	adds	r3, #7
 800a022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0307 	bic.w	r3, r3, #7
 800a02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <prvHeapInit+0xac>)
 800a034:	4413      	add	r3, r2
 800a036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a03c:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <prvHeapInit+0xb0>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <prvHeapInit+0xb0>)
 800a044:	2200      	movs	r2, #0
 800a046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	4413      	add	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a050:	2208      	movs	r2, #8
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0307 	bic.w	r3, r3, #7
 800a05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <prvHeapInit+0xb4>)
 800a064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <prvHeapInit+0xb4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a06e:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <prvHeapInit+0xb4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a084:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <prvHeapInit+0xb4>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	4a0a      	ldr	r2, [pc, #40]	; (800a0bc <prvHeapInit+0xb8>)
 800a092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <prvHeapInit+0xbc>)
 800a09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a09c:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <prvHeapInit+0xc0>)
 800a09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	200012a0 	.word	0x200012a0
 800a0b4:	20004ea0 	.word	0x20004ea0
 800a0b8:	20004ea8 	.word	0x20004ea8
 800a0bc:	20004eb0 	.word	0x20004eb0
 800a0c0:	20004eac 	.word	0x20004eac
 800a0c4:	20004ebc 	.word	0x20004ebc

0800a0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <prvInsertBlockIntoFreeList+0xac>)
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	e002      	b.n	800a0dc <prvInsertBlockIntoFreeList+0x14>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d8f7      	bhi.n	800a0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d108      	bne.n	800a10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	441a      	add	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d118      	bne.n	800a150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <prvInsertBlockIntoFreeList+0xb0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d00d      	beq.n	800a146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	441a      	add	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	e008      	b.n	800a158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <prvInsertBlockIntoFreeList+0xb0>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e003      	b.n	800a158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d002      	beq.n	800a166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20004ea0 	.word	0x20004ea0
 800a178:	20004ea8 	.word	0x20004ea8

0800a17c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18c:	2b80      	cmp	r3, #128	; 0x80
 800a18e:	bf0c      	ite	eq
 800a190:	2301      	moveq	r3, #1
 800a192:	2300      	movne	r3, #0
 800a194:	b2db      	uxtb	r3, r3
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b089      	sub	sp, #36	; 0x24
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f043 0320 	orr.w	r3, r3, #32
 800a1be:	61fb      	str	r3, [r7, #28]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	330c      	adds	r3, #12
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	61ba      	str	r2, [r7, #24]
 800a1c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	6979      	ldr	r1, [r7, #20]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	e841 2300 	strex	r3, r2, [r1]
 800a1d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e7      	bne.n	800a1aa <LL_USART_EnableIT_RXNE+0x8>
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	3724      	adds	r7, #36	; 0x24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	330c      	adds	r3, #12
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	61ba      	str	r2, [r7, #24]
 800a20e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6979      	ldr	r1, [r7, #20]
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	613b      	str	r3, [r7, #16]
   return(result);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e7      	bne.n	800a1f0 <LL_USART_EnableIT_TXE+0x8>
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	3724      	adds	r7, #36	; 0x24
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 800a22e:	b480      	push	{r7}
 800a230:	b089      	sub	sp, #36	; 0x24
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	330c      	adds	r3, #12
 800a23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60bb      	str	r3, [r7, #8]
   return(result);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f023 0320 	bic.w	r3, r3, #32
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	330c      	adds	r3, #12
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	61ba      	str	r2, [r7, #24]
 800a254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6979      	ldr	r1, [r7, #20]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	613b      	str	r3, [r7, #16]
   return(result);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e7      	bne.n	800a236 <LL_USART_DisableIT_RXNE+0x8>
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	3724      	adds	r7, #36	; 0x24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800a274:	b480      	push	{r7}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	330c      	adds	r3, #12
 800a280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	e853 3f00 	ldrex	r3, [r3]
 800a288:	60bb      	str	r3, [r7, #8]
   return(result);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	330c      	adds	r3, #12
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	61ba      	str	r2, [r7, #24]
 800a29a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6979      	ldr	r1, [r7, #20]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e7      	bne.n	800a27c <LL_USART_DisableIT_TXE+0x8>
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3724      	adds	r7, #36	; 0x24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800a2c6:	78fa      	ldrb	r2, [r7, #3]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	605a      	str	r2, [r3, #4]
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <IsBufferFull>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferFull(volatile uint32_t *pui32Read,
             volatile uint32_t *pui32Write, uint32_t ui32Size)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	617b      	str	r3, [r7, #20]
    ui32Read = *pui32Read;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	613b      	str	r3, [r7, #16]

    return((((ui32Write + 1) % ui32Size) == ui32Read) ? true : false);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	fb01 f202 	mul.w	r2, r1, r2
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	429a      	cmp	r2, r3
 800a306:	bf0c      	ite	eq
 800a308:	2301      	moveq	r3, #1
 800a30a:	2300      	movne	r3, #0
 800a30c:	b2db      	uxtb	r3, r3
}
 800a30e:	4618      	mov	r0, r3
 800a310:	371c      	adds	r7, #28
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <IsBufferEmpty>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60bb      	str	r3, [r7, #8]

    return((ui32Write == ui32Read) ? true : false);
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	429a      	cmp	r2, r3
 800a336:	bf0c      	ite	eq
 800a338:	2301      	moveq	r3, #1
 800a33a:	2300      	movne	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <UARTPrimeTransmit>:
//
//*****************************************************************************
#ifdef UART_BUFFERED
static void
UARTPrimeTransmit(USART_TypeDef *stdUsart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 800a354:	4914      	ldr	r1, [pc, #80]	; (800a3a8 <UARTPrimeTransmit+0x5c>)
 800a356:	4815      	ldr	r0, [pc, #84]	; (800a3ac <UARTPrimeTransmit+0x60>)
 800a358:	f7ff ffdf 	bl	800a31a <IsBufferEmpty>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f083 0301 	eor.w	r3, r3, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d01a      	beq.n	800a39e <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
    	LL_USART_DisableIT_TXE(stdUsart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff ff83 	bl	800a274 <LL_USART_DisableIT_TXE>

        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //
    	if (LL_USART_IsActiveFlag_TXE(stdUsart))
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff ff04 	bl	800a17c <LL_USART_IsActiveFlag_TXE>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <UARTPrimeTransmit+0x4c>
    	{
        	LL_USART_TransmitData8(stdUsart,
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <UARTPrimeTransmit+0x60>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a0c      	ldr	r2, [pc, #48]	; (800a3b0 <UARTPrimeTransmit+0x64>)
 800a380:	5cd3      	ldrb	r3, [r2, r3]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ff98 	bl	800a2ba <LL_USART_TransmitData8>
                                      g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <UARTPrimeTransmit+0x60>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a394:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <UARTPrimeTransmit+0x60>)
 800a396:	6013      	str	r3, [r2, #0]
    	}
        //
        // Reenable the UART interrupt.
        //
        LL_USART_EnableIT_TXE(stdUsart);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff ff25 	bl	800a1e8 <LL_USART_EnableIT_TXE>
    }
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200052c4 	.word	0x200052c4
 800a3ac:	200052c8 	.word	0x200052c8
 800a3b0:	20004ec4 	.word	0x20004ec4

0800a3b4 <UARTStdioConfig>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(USART_TypeDef *Usart, bool bDisableEcho)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]

    stdUsart = Usart;
 800a3c0:	4a09      	ldr	r2, [pc, #36]	; (800a3e8 <UARTStdioConfig+0x34>)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6013      	str	r3, [r2, #0]
    g_bDisableEcho = bDisableEcho;
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <UARTStdioConfig+0x38>)
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	7013      	strb	r3, [r2, #0]


    //
    // Flush both the buffers.
    //
    UARTFlushRx();
 800a3cc:	f000 fa82 	bl	800a8d4 <UARTFlushRx>
    UARTFlushTx(true);
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	f000 fa99 	bl	800a908 <UARTFlushTx>
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    LL_USART_EnableIT_RXNE(stdUsart);
 800a3d6:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <UARTStdioConfig+0x34>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fee1 	bl	800a1a2 <LL_USART_EnableIT_RXNE>

#endif

}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	20005354 	.word	0x20005354
 800a3ec:	20004ec0 	.word	0x20004ec0

0800a3f0 <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
    //
    // Check for valid arguments.
    //
    assert_param(pcBuf != 0);

    LL_USART_DisableIT_TXE(stdUsart);
 800a3fa:	4b2f      	ldr	r3, [pc, #188]	; (800a4b8 <UARTwrite+0xc8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff ff38 	bl	800a274 <LL_USART_DisableIT_TXE>
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	e042      	b.n	800a490 <UARTwrite+0xa0>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4413      	add	r3, r2
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b0a      	cmp	r3, #10
 800a414:	d118      	bne.n	800a448 <UARTwrite+0x58>
        {
            if(!TX_BUFFER_FULL)
 800a416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a41a:	4928      	ldr	r1, [pc, #160]	; (800a4bc <UARTwrite+0xcc>)
 800a41c:	4828      	ldr	r0, [pc, #160]	; (800a4c0 <UARTwrite+0xd0>)
 800a41e:	f7ff ff5b 	bl	800a2d8 <IsBufferFull>
 800a422:	4603      	mov	r3, r0
 800a424:	f083 0301 	eor.w	r3, r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d035      	beq.n	800a49a <UARTwrite+0xaa>
            {
                g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = '\r';
 800a42e:	4b23      	ldr	r3, [pc, #140]	; (800a4bc <UARTwrite+0xcc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <UARTwrite+0xd4>)
 800a434:	210d      	movs	r1, #13
 800a436:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 800a438:	4b20      	ldr	r3, [pc, #128]	; (800a4bc <UARTwrite+0xcc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a442:	4a1e      	ldr	r2, [pc, #120]	; (800a4bc <UARTwrite+0xcc>)
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	e005      	b.n	800a454 <UARTwrite+0x64>
                // Buffer is full - discard remaining characters and return.
                //
                break;
            }
        }
        else if(pcBuf[uIdx] == 0)
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d024      	beq.n	800a49e <UARTwrite+0xae>
		}

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 800a454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a458:	4918      	ldr	r1, [pc, #96]	; (800a4bc <UARTwrite+0xcc>)
 800a45a:	4819      	ldr	r0, [pc, #100]	; (800a4c0 <UARTwrite+0xd0>)
 800a45c:	f7ff ff3c 	bl	800a2d8 <IsBufferFull>
 800a460:	4603      	mov	r3, r0
 800a462:	f083 0301 	eor.w	r3, r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01a      	beq.n	800a4a2 <UARTwrite+0xb2>
        {
            g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = pcBuf[uIdx];
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	441a      	add	r2, r3
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <UARTwrite+0xcc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	7811      	ldrb	r1, [r2, #0]
 800a478:	4a12      	ldr	r2, [pc, #72]	; (800a4c4 <UARTwrite+0xd4>)
 800a47a:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 800a47c:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <UARTwrite+0xcc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a486:	4a0d      	ldr	r2, [pc, #52]	; (800a4bc <UARTwrite+0xcc>)
 800a488:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d3b8      	bcc.n	800a40a <UARTwrite+0x1a>
 800a498:	e004      	b.n	800a4a4 <UARTwrite+0xb4>
                break;
 800a49a:	bf00      	nop
 800a49c:	e002      	b.n	800a4a4 <UARTwrite+0xb4>
        	break;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <UARTwrite+0xb4>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 800a4a2:	bf00      	nop
    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //

        UARTPrimeTransmit(stdUsart);
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <UARTwrite+0xc8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff ff4f 	bl	800a34c <UARTPrimeTransmit>

    //
    // Return the number of characters written.
    //
    return(uIdx);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	20005354 	.word	0x20005354
 800a4bc:	200052c4 	.word	0x200052c4
 800a4c0:	200052c8 	.word	0x200052c8
 800a4c4:	20004ec4 	.word	0x20004ec4

0800a4c8 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	; 0x38
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
    assert_param(pcString != 0);

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 800a4d2:	e1dc      	b.n	800a88e <UARTvprintf+0x3c6>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d8:	e002      	b.n	800a4e0 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 800a4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4dc:	3301      	adds	r3, #1
 800a4de:	637b      	str	r3, [r7, #52]	; 0x34
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e4:	4413      	add	r3, r2
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b25      	cmp	r3, #37	; 0x25
 800a4ea:	d005      	beq.n	800a4f8 <UARTvprintf+0x30>
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	4413      	add	r3, r2
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f0      	bne.n	800a4da <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
 800a4f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff ff78 	bl	800a3f0 <UARTwrite>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a504:	4413      	add	r3, r2
 800a506:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b25      	cmp	r3, #37	; 0x25
 800a50e:	f040 81be 	bne.w	800a88e <UARTvprintf+0x3c6>
        {
            //
            // Skip the %.
            //
            pcString++;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3301      	adds	r3, #1
 800a516:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	62fb      	str	r3, [r7, #44]	; 0x2c
            cFill = ' ';
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	3b25      	subs	r3, #37	; 0x25
 800a52c:	2b53      	cmp	r3, #83	; 0x53
 800a52e:	f200 81a9 	bhi.w	800a884 <UARTvprintf+0x3bc>
 800a532:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UARTvprintf+0x70>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a877 	.word	0x0800a877
 800a53c:	0800a885 	.word	0x0800a885
 800a540:	0800a885 	.word	0x0800a885
 800a544:	0800a885 	.word	0x0800a885
 800a548:	0800a885 	.word	0x0800a885
 800a54c:	0800a885 	.word	0x0800a885
 800a550:	0800a885 	.word	0x0800a885
 800a554:	0800a885 	.word	0x0800a885
 800a558:	0800a885 	.word	0x0800a885
 800a55c:	0800a885 	.word	0x0800a885
 800a560:	0800a885 	.word	0x0800a885
 800a564:	0800a689 	.word	0x0800a689
 800a568:	0800a689 	.word	0x0800a689
 800a56c:	0800a689 	.word	0x0800a689
 800a570:	0800a689 	.word	0x0800a689
 800a574:	0800a689 	.word	0x0800a689
 800a578:	0800a689 	.word	0x0800a689
 800a57c:	0800a689 	.word	0x0800a689
 800a580:	0800a689 	.word	0x0800a689
 800a584:	0800a689 	.word	0x0800a689
 800a588:	0800a689 	.word	0x0800a689
 800a58c:	0800a885 	.word	0x0800a885
 800a590:	0800a885 	.word	0x0800a885
 800a594:	0800a885 	.word	0x0800a885
 800a598:	0800a885 	.word	0x0800a885
 800a59c:	0800a885 	.word	0x0800a885
 800a5a0:	0800a885 	.word	0x0800a885
 800a5a4:	0800a885 	.word	0x0800a885
 800a5a8:	0800a885 	.word	0x0800a885
 800a5ac:	0800a885 	.word	0x0800a885
 800a5b0:	0800a885 	.word	0x0800a885
 800a5b4:	0800a885 	.word	0x0800a885
 800a5b8:	0800a885 	.word	0x0800a885
 800a5bc:	0800a885 	.word	0x0800a885
 800a5c0:	0800a885 	.word	0x0800a885
 800a5c4:	0800a885 	.word	0x0800a885
 800a5c8:	0800a885 	.word	0x0800a885
 800a5cc:	0800a885 	.word	0x0800a885
 800a5d0:	0800a885 	.word	0x0800a885
 800a5d4:	0800a885 	.word	0x0800a885
 800a5d8:	0800a885 	.word	0x0800a885
 800a5dc:	0800a885 	.word	0x0800a885
 800a5e0:	0800a885 	.word	0x0800a885
 800a5e4:	0800a885 	.word	0x0800a885
 800a5e8:	0800a885 	.word	0x0800a885
 800a5ec:	0800a885 	.word	0x0800a885
 800a5f0:	0800a885 	.word	0x0800a885
 800a5f4:	0800a885 	.word	0x0800a885
 800a5f8:	0800a885 	.word	0x0800a885
 800a5fc:	0800a885 	.word	0x0800a885
 800a600:	0800a885 	.word	0x0800a885
 800a604:	0800a769 	.word	0x0800a769
 800a608:	0800a885 	.word	0x0800a885
 800a60c:	0800a885 	.word	0x0800a885
 800a610:	0800a885 	.word	0x0800a885
 800a614:	0800a885 	.word	0x0800a885
 800a618:	0800a885 	.word	0x0800a885
 800a61c:	0800a885 	.word	0x0800a885
 800a620:	0800a885 	.word	0x0800a885
 800a624:	0800a885 	.word	0x0800a885
 800a628:	0800a885 	.word	0x0800a885
 800a62c:	0800a885 	.word	0x0800a885
 800a630:	0800a6bd 	.word	0x0800a6bd
 800a634:	0800a6d5 	.word	0x0800a6d5
 800a638:	0800a885 	.word	0x0800a885
 800a63c:	0800a885 	.word	0x0800a885
 800a640:	0800a885 	.word	0x0800a885
 800a644:	0800a885 	.word	0x0800a885
 800a648:	0800a6d5 	.word	0x0800a6d5
 800a64c:	0800a885 	.word	0x0800a885
 800a650:	0800a885 	.word	0x0800a885
 800a654:	0800a885 	.word	0x0800a885
 800a658:	0800a885 	.word	0x0800a885
 800a65c:	0800a885 	.word	0x0800a885
 800a660:	0800a885 	.word	0x0800a885
 800a664:	0800a769 	.word	0x0800a769
 800a668:	0800a885 	.word	0x0800a885
 800a66c:	0800a885 	.word	0x0800a885
 800a670:	0800a6ff 	.word	0x0800a6ff
 800a674:	0800a885 	.word	0x0800a885
 800a678:	0800a751 	.word	0x0800a751
 800a67c:	0800a885 	.word	0x0800a885
 800a680:	0800a885 	.word	0x0800a885
 800a684:	0800a769 	.word	0x0800a769
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b30      	cmp	r3, #48	; 0x30
 800a690:	d105      	bne.n	800a69e <UARTvprintf+0x1d6>
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <UARTvprintf+0x1d6>
                    {
                        cFill = '0';
 800a698:	2330      	movs	r3, #48	; 0x30
 800a69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 800a69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ui32Count += pcString[-1] - '0';
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3b30      	subs	r3, #48	; 0x30
 800a6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 800a6ba:	e732      	b.n	800a522 <UARTvprintf+0x5a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	1d1a      	adds	r2, r3, #4
 800a6c0:	603a      	str	r2, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff fe8f 	bl	800a3f0 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800a6d2:	e0dc      	b.n	800a88e <UARTvprintf+0x3c6>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	1d1a      	adds	r2, r3, #4
 800a6d8:	603a      	str	r2, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da05      	bge.n	800a6f4 <UARTvprintf+0x22c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	425b      	negs	r3, r3
 800a6ec:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f2:	e001      	b.n	800a6f8 <UARTvprintf+0x230>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	627b      	str	r3, [r7, #36]	; 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 800a6f8:	230a      	movs	r3, #10
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800a6fc:	e03f      	b.n	800a77e <UARTvprintf+0x2b6>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	1d1a      	adds	r2, r3, #4
 800a702:	603a      	str	r2, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 800a708:	2300      	movs	r3, #0
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
 800a70c:	e002      	b.n	800a714 <UARTvprintf+0x24c>
 800a70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a710:	3301      	adds	r3, #1
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	4413      	add	r3, r2
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f6      	bne.n	800a70e <UARTvprintf+0x246>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
 800a720:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a722:	69f8      	ldr	r0, [r7, #28]
 800a724:	f7ff fe64 	bl	800a3f0 <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 800a728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72c:	429a      	cmp	r2, r3
 800a72e:	f240 80ae 	bls.w	800a88e <UARTvprintf+0x3c6>
                    {
                        ui32Count -= ui32Idx;
 800a732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
                        while(ui32Count--)
 800a73a:	e003      	b.n	800a744 <UARTvprintf+0x27c>
                        {
                            UARTwrite(" ", 1);
 800a73c:	2101      	movs	r1, #1
 800a73e:	4859      	ldr	r0, [pc, #356]	; (800a8a4 <UARTvprintf+0x3dc>)
 800a740:	f7ff fe56 	bl	800a3f0 <UARTwrite>
                        while(ui32Count--)
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	1e5a      	subs	r2, r3, #1
 800a748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f6      	bne.n	800a73c <UARTvprintf+0x274>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 800a74e:	e09e      	b.n	800a88e <UARTvprintf+0x3c6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	603a      	str	r2, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 800a75e:	230a      	movs	r3, #10
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800a766:	e00a      	b.n	800a77e <UARTvprintf+0x2b6>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	603a      	str	r2, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 800a776:	2310      	movs	r3, #16
 800a778:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	637b      	str	r3, [r7, #52]	; 0x34
 800a782:	e007      	b.n	800a794 <UARTvprintf+0x2cc>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	637b      	str	r3, [r7, #52]	; 0x34
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	3b01      	subs	r3, #1
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 800a794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a798:	fb03 f202 	mul.w	r2, r3, r2
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d809      	bhi.n	800a7b6 <UARTvprintf+0x2ee>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7a6:	fb03 f202 	mul.w	r2, r3, r2
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 800a7b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d0e6      	beq.n	800a784 <UARTvprintf+0x2bc>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <UARTvprintf+0x2fa>
                    {
                        ui32Count--;
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00d      	beq.n	800a7e4 <UARTvprintf+0x31c>
 800a7c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7cc:	2b30      	cmp	r3, #48	; 0x30
 800a7ce:	d109      	bne.n	800a7e4 <UARTvprintf+0x31c>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	633a      	str	r2, [r7, #48]	; 0x30
 800a7d6:	3338      	adds	r3, #56	; 0x38
 800a7d8:	443b      	add	r3, r7
 800a7da:	222d      	movs	r2, #45	; 0x2d
 800a7dc:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d915      	bls.n	800a816 <UARTvprintf+0x34e>
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b0f      	cmp	r3, #15
 800a7ee:	d812      	bhi.n	800a816 <UARTvprintf+0x34e>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f6:	e00b      	b.n	800a810 <UARTvprintf+0x348>
                        {
                            pcBuf[ui32Pos++] = cFill;
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	633a      	str	r2, [r7, #48]	; 0x30
 800a7fe:	3338      	adds	r3, #56	; 0x38
 800a800:	443b      	add	r3, r7
 800a802:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a806:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	3b01      	subs	r3, #1
 800a80e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f0      	bne.n	800a7f8 <UARTvprintf+0x330>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d022      	beq.n	800a862 <UARTvprintf+0x39a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	633a      	str	r2, [r7, #48]	; 0x30
 800a822:	3338      	adds	r3, #56	; 0x38
 800a824:	443b      	add	r3, r7
 800a826:	222d      	movs	r2, #45	; 0x2d
 800a828:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 800a82c:	e019      	b.n	800a862 <UARTvprintf+0x39a>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 800a82e:	481e      	ldr	r0, [pc, #120]	; (800a8a8 <UARTvprintf+0x3e0>)
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	fbb2 f3f3 	udiv	r3, r2, r3
 800a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a83e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a840:	fb01 f202 	mul.w	r2, r1, r2
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 800a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84a:	1c59      	adds	r1, r3, #1
 800a84c:	6339      	str	r1, [r7, #48]	; 0x30
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 800a84e:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 800a850:	3338      	adds	r3, #56	; 0x38
 800a852:	443b      	add	r3, r7
 800a854:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 800a858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
 800a862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e2      	bne.n	800a82e <UARTvprintf+0x366>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fdbe 	bl	800a3f0 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800a874:	e00b      	b.n	800a88e <UARTvprintf+0x3c6>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3b01      	subs	r3, #1
 800a87a:	2101      	movs	r1, #1
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fdb7 	bl	800a3f0 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800a882:	e004      	b.n	800a88e <UARTvprintf+0x3c6>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
 800a884:	2105      	movs	r1, #5
 800a886:	4809      	ldr	r0, [pc, #36]	; (800a8ac <UARTvprintf+0x3e4>)
 800a888:	f7ff fdb2 	bl	800a3f0 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800a88c:	bf00      	nop
    while(*pcString)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f47f ae1e 	bne.w	800a4d4 <UARTvprintf+0xc>
                }
            }
        }
    }
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	3738      	adds	r7, #56	; 0x38
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08010450 	.word	0x08010450
 800a8a8:	0801043c 	.word	0x0801043c
 800a8ac:	08010454 	.word	0x08010454

0800a8b0 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
 800a8b0:	b40f      	push	{r0, r1, r2, r3}
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	607b      	str	r3, [r7, #4]

    UARTvprintf(pcString, vaArgP);
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	6938      	ldr	r0, [r7, #16]
 800a8c2:	f7ff fe01 	bl	800a4c8 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8d0:	b004      	add	sp, #16
 800a8d2:	4770      	bx	lr

0800a8d4 <UARTFlushRx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushRx(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0


    //
    // Temporarily turn off interrupts.
    //
    LL_USART_DisableIT_RXNE(stdUsart);
 800a8d8:	4b08      	ldr	r3, [pc, #32]	; (800a8fc <UARTFlushRx+0x28>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fca6 	bl	800a22e <LL_USART_DisableIT_RXNE>

    //
    // Flush the receive buffer.
    //
    g_ui32UARTRxReadIndex = 0;
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <UARTFlushRx+0x2c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]
    g_ui32UARTRxWriteIndex = 0;
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <UARTFlushRx+0x30>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //

      LL_USART_EnableIT_RXNE(stdUsart);
 800a8ee:	4b03      	ldr	r3, [pc, #12]	; (800a8fc <UARTFlushRx+0x28>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fc55 	bl	800a1a2 <LL_USART_EnableIT_RXNE>

}
 800a8f8:	bf00      	nop
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20005354 	.word	0x20005354
 800a900:	20005350 	.word	0x20005350
 800a904:	2000534c 	.word	0x2000534c

0800a908 <UARTFlushTx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushTx(bool bDiscard)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]


    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <UARTFlushTx+0x28>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
         LL_USART_DisableIT_TXE(stdUsart);
 800a918:	4b0d      	ldr	r3, [pc, #52]	; (800a950 <UARTFlushTx+0x48>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fca9 	bl	800a274 <LL_USART_DisableIT_TXE>

        //
        // Flush the transmit buffer.
        //

        g_ui32UARTTxReadIndex = 0;
 800a922:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <UARTFlushTx+0x4c>)
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]
        g_ui32UARTTxWriteIndex = 0;
 800a928:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <UARTFlushTx+0x50>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
 800a92e:	e00a      	b.n	800a946 <UARTFlushTx+0x3e>
        while(!TX_BUFFER_EMPTY)
 800a930:	bf00      	nop
 800a932:	4909      	ldr	r1, [pc, #36]	; (800a958 <UARTFlushTx+0x50>)
 800a934:	4807      	ldr	r0, [pc, #28]	; (800a954 <UARTFlushTx+0x4c>)
 800a936:	f7ff fcf0 	bl	800a31a <IsBufferEmpty>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f083 0301 	eor.w	r3, r3, #1
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f5      	bne.n	800a932 <UARTFlushTx+0x2a>
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20005354 	.word	0x20005354
 800a954:	200052c8 	.word	0x200052c8
 800a958:	200052c4 	.word	0x200052c4

0800a95c <UARTStdioIntHandler>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTStdioIntHandler(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
	static int8_t bLastWasCR = 0;
	  uint32_t isrflags   = READ_REG(stdUsart->SR);
 800a962:	4b5a      	ldr	r3, [pc, #360]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	60fb      	str	r3, [r7, #12]
	  uint32_t cr1its     = READ_REG(stdUsart->CR1);
 800a96a:	4b58      	ldr	r3, [pc, #352]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	60bb      	str	r3, [r7, #8]

	    /*If interrupt is caused due to Transmit Data Register Empty */
	    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d024      	beq.n	800a9c6 <UARTStdioIntHandler+0x6a>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a982:	2b00      	cmp	r3, #0
 800a984:	d01f      	beq.n	800a9c6 <UARTStdioIntHandler+0x6a>
	    {
	    	if(TX_BUFFER_EMPTY)
 800a986:	4952      	ldr	r1, [pc, #328]	; (800aad0 <UARTStdioIntHandler+0x174>)
 800a988:	4852      	ldr	r0, [pc, #328]	; (800aad4 <UARTStdioIntHandler+0x178>)
 800a98a:	f7ff fcc6 	bl	800a31a <IsBufferEmpty>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <UARTStdioIntHandler+0x44>
	    	    {
	    	      // Buffer empty, so disable interrupts
	    	      LL_USART_DisableIT_TXE(stdUsart);
 800a994:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fc6b 	bl	800a274 <LL_USART_DisableIT_TXE>
 800a99e:	e012      	b.n	800a9c6 <UARTStdioIntHandler+0x6a>

	    	 else
	    	    {
	    	      // There is more data in the output buffer. Send the next byte

	    		 	 unsigned char c = g_pcUARTTxBuffer[g_ui32UARTTxReadIndex];
 800a9a0:	4b4c      	ldr	r3, [pc, #304]	; (800aad4 <UARTStdioIntHandler+0x178>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a4c      	ldr	r2, [pc, #304]	; (800aad8 <UARTStdioIntHandler+0x17c>)
 800a9a6:	5cd3      	ldrb	r3, [r2, r3]
 800a9a8:	71fb      	strb	r3, [r7, #7]
	    		 	 ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 800a9aa:	4b4a      	ldr	r3, [pc, #296]	; (800aad4 <UARTStdioIntHandler+0x178>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9b4:	4a47      	ldr	r2, [pc, #284]	; (800aad4 <UARTStdioIntHandler+0x178>)
 800a9b6:	6013      	str	r3, [r2, #0]
	    	      *          USART_SR register followed by a write operation to USART_DR register.
	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

	    	      *********************/

	    	      stdUsart->SR;
 800a9b8:	4b44      	ldr	r3, [pc, #272]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
	    	      stdUsart->DR = c;
 800a9be:	4b43      	ldr	r3, [pc, #268]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	79fa      	ldrb	r2, [r7, #7]
 800a9c4:	605a      	str	r2, [r3, #4]
	    }
    //
    // Are we being interrupted due to a received character?
    //
	    /* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d079      	beq.n	800aac4 <UARTStdioIntHandler+0x168>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f003 0320 	and.w	r3, r3, #32
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d074      	beq.n	800aac4 <UARTStdioIntHandler+0x168>

        {
            //
            // Read a character
            //
        	stdUsart->SR;
 800a9da:	4b3c      	ldr	r3, [pc, #240]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
            unsigned char cChar = stdUsart->DR;
 800a9e0:	4b3a      	ldr	r3, [pc, #232]	; (800aacc <UARTStdioIntHandler+0x170>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	71bb      	strb	r3, [r7, #6]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
 800a9ea:	4b3c      	ldr	r3, [pc, #240]	; (800aadc <UARTStdioIntHandler+0x180>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	f083 0301 	eor.w	r3, r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d03d      	beq.n	800aa74 <UARTStdioIntHandler+0x118>
            {
                //
                // Handle backspace by erasing the last character in the
                // buffer.
                //
                if(cChar == '\b')
 800a9f8:	79bb      	ldrb	r3, [r7, #6]
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d11a      	bne.n	800aa34 <UARTStdioIntHandler+0xd8>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
 800a9fe:	4938      	ldr	r1, [pc, #224]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa00:	4838      	ldr	r0, [pc, #224]	; (800aae4 <UARTStdioIntHandler+0x188>)
 800aa02:	f7ff fc8a 	bl	800a31a <IsBufferEmpty>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f083 0301 	eor.w	r3, r3, #1
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d010      	beq.n	800aa34 <UARTStdioIntHandler+0xd8>
                    {
                        //
                        // Rub out the previous character on the users
                        // terminal.
                        //
                        UARTwrite("\b \b", 3);
 800aa12:	2103      	movs	r1, #3
 800aa14:	4834      	ldr	r0, [pc, #208]	; (800aae8 <UARTStdioIntHandler+0x18c>)
 800aa16:	f7ff fceb 	bl	800a3f0 <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ui32UARTRxWriteIndex == 0)
 800aa1a:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d103      	bne.n	800aa2a <UARTStdioIntHandler+0xce>
                        {
                            g_ui32UARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
 800aa22:	4b2f      	ldr	r3, [pc, #188]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa24:	227f      	movs	r2, #127	; 0x7f
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	e004      	b.n	800aa34 <UARTStdioIntHandler+0xd8>
                        }
                        else
                        {
                            g_ui32UARTRxWriteIndex--;
 800aa2a:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	4a2b      	ldr	r2, [pc, #172]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa32:	6013      	str	r3, [r2, #0]
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
 800aa34:	79bb      	ldrb	r3, [r7, #6]
 800aa36:	2b0a      	cmp	r3, #10
 800aa38:	d107      	bne.n	800aa4a <UARTStdioIntHandler+0xee>
 800aa3a:	4b2c      	ldr	r3, [pc, #176]	; (800aaec <UARTStdioIntHandler+0x190>)
 800aa3c:	f993 3000 	ldrsb.w	r3, [r3]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <UARTStdioIntHandler+0xee>
                {
                    bLastWasCR = false;
 800aa44:	4b29      	ldr	r3, [pc, #164]	; (800aaec <UARTStdioIntHandler+0x190>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	701a      	strb	r2, [r3, #0]
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
 800aa4a:	79bb      	ldrb	r3, [r7, #6]
 800aa4c:	2b0d      	cmp	r3, #13
 800aa4e:	d005      	beq.n	800aa5c <UARTStdioIntHandler+0x100>
 800aa50:	79bb      	ldrb	r3, [r7, #6]
 800aa52:	2b0a      	cmp	r3, #10
 800aa54:	d002      	beq.n	800aa5c <UARTStdioIntHandler+0x100>
 800aa56:	79bb      	ldrb	r3, [r7, #6]
 800aa58:	2b1b      	cmp	r3, #27
 800aa5a:	d10b      	bne.n	800aa74 <UARTStdioIntHandler+0x118>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
 800aa5c:	79bb      	ldrb	r3, [r7, #6]
 800aa5e:	2b0d      	cmp	r3, #13
 800aa60:	d102      	bne.n	800aa68 <UARTStdioIntHandler+0x10c>
                    {
                        bLastWasCR = 1;
 800aa62:	4b22      	ldr	r3, [pc, #136]	; (800aaec <UARTStdioIntHandler+0x190>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
 800aa68:	230d      	movs	r3, #13
 800aa6a:	71bb      	strb	r3, [r7, #6]
                    UARTwrite("\n", 1);
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4820      	ldr	r0, [pc, #128]	; (800aaf0 <UARTStdioIntHandler+0x194>)
 800aa70:	f7ff fcbe 	bl	800a3f0 <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
 800aa74:	2280      	movs	r2, #128	; 0x80
 800aa76:	491a      	ldr	r1, [pc, #104]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa78:	481a      	ldr	r0, [pc, #104]	; (800aae4 <UARTStdioIntHandler+0x188>)
 800aa7a:	f7ff fc2d 	bl	800a2d8 <IsBufferFull>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	f083 0301 	eor.w	r3, r3, #1
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d017      	beq.n	800aaba <UARTStdioIntHandler+0x15e>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ui32UARTRxWriteIndex] =
 800aa8a:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	79b9      	ldrb	r1, [r7, #6]
 800aa90:	4a18      	ldr	r2, [pc, #96]	; (800aaf4 <UARTStdioIntHandler+0x198>)
 800aa92:	54d1      	strb	r1, [r2, r3]
                    (unsigned char)(cChar & 0xFF);
                ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxWriteIndex);
 800aa94:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9e:	4a10      	ldr	r2, [pc, #64]	; (800aae0 <UARTStdioIntHandler+0x184>)
 800aaa0:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <UARTStdioIntHandler+0x180>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	f083 0301 	eor.w	r3, r3, #1
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <UARTStdioIntHandler+0x15e>
                {
                    UARTwrite((const char *)&cChar, 1);
 800aab0:	1dbb      	adds	r3, r7, #6
 800aab2:	2101      	movs	r1, #1
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fc9b 	bl	800a3f0 <UARTwrite>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(stdUsart);
 800aaba:	4b04      	ldr	r3, [pc, #16]	; (800aacc <UARTStdioIntHandler+0x170>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fc44 	bl	800a34c <UARTPrimeTransmit>

    }
}
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20005354 	.word	0x20005354
 800aad0:	200052c4 	.word	0x200052c4
 800aad4:	200052c8 	.word	0x200052c8
 800aad8:	20004ec4 	.word	0x20004ec4
 800aadc:	20004ec0 	.word	0x20004ec0
 800aae0:	2000534c 	.word	0x2000534c
 800aae4:	20005350 	.word	0x20005350
 800aae8:	0801045c 	.word	0x0801045c
 800aaec:	20005358 	.word	0x20005358
 800aaf0:	08010460 	.word	0x08010460
 800aaf4:	200052cc 	.word	0x200052cc

0800aaf8 <__cvt>:
 800aaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	460e      	mov	r6, r1
 800ab04:	4619      	mov	r1, r3
 800ab06:	462b      	mov	r3, r5
 800ab08:	bfbb      	ittet	lt
 800ab0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab0e:	461d      	movlt	r5, r3
 800ab10:	2300      	movge	r3, #0
 800ab12:	232d      	movlt	r3, #45	; 0x2d
 800ab14:	700b      	strb	r3, [r1, #0]
 800ab16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab1c:	4691      	mov	r9, r2
 800ab1e:	f023 0820 	bic.w	r8, r3, #32
 800ab22:	bfbc      	itt	lt
 800ab24:	4622      	movlt	r2, r4
 800ab26:	4614      	movlt	r4, r2
 800ab28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab2c:	d005      	beq.n	800ab3a <__cvt+0x42>
 800ab2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab32:	d100      	bne.n	800ab36 <__cvt+0x3e>
 800ab34:	3601      	adds	r6, #1
 800ab36:	2102      	movs	r1, #2
 800ab38:	e000      	b.n	800ab3c <__cvt+0x44>
 800ab3a:	2103      	movs	r1, #3
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	ab02      	add	r3, sp, #8
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	ec45 4b10 	vmov	d0, r4, r5
 800ab48:	4653      	mov	r3, sl
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	f001 f88c 	bl	800bc68 <_dtoa_r>
 800ab50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab54:	4607      	mov	r7, r0
 800ab56:	d102      	bne.n	800ab5e <__cvt+0x66>
 800ab58:	f019 0f01 	tst.w	r9, #1
 800ab5c:	d022      	beq.n	800aba4 <__cvt+0xac>
 800ab5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab62:	eb07 0906 	add.w	r9, r7, r6
 800ab66:	d110      	bne.n	800ab8a <__cvt+0x92>
 800ab68:	783b      	ldrb	r3, [r7, #0]
 800ab6a:	2b30      	cmp	r3, #48	; 0x30
 800ab6c:	d10a      	bne.n	800ab84 <__cvt+0x8c>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2300      	movs	r3, #0
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f5 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7a:	b918      	cbnz	r0, 800ab84 <__cvt+0x8c>
 800ab7c:	f1c6 0601 	rsb	r6, r6, #1
 800ab80:	f8ca 6000 	str.w	r6, [sl]
 800ab84:	f8da 3000 	ldr.w	r3, [sl]
 800ab88:	4499      	add	r9, r3
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab96:	b108      	cbz	r0, 800ab9c <__cvt+0xa4>
 800ab98:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab9c:	2230      	movs	r2, #48	; 0x30
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	454b      	cmp	r3, r9
 800aba2:	d307      	bcc.n	800abb4 <__cvt+0xbc>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba8:	1bdb      	subs	r3, r3, r7
 800abaa:	4638      	mov	r0, r7
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	b004      	add	sp, #16
 800abb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb4:	1c59      	adds	r1, r3, #1
 800abb6:	9103      	str	r1, [sp, #12]
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e7f0      	b.n	800ab9e <__cvt+0xa6>

0800abbc <__exponent>:
 800abbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abbe:	4603      	mov	r3, r0
 800abc0:	2900      	cmp	r1, #0
 800abc2:	bfb8      	it	lt
 800abc4:	4249      	neglt	r1, r1
 800abc6:	f803 2b02 	strb.w	r2, [r3], #2
 800abca:	bfb4      	ite	lt
 800abcc:	222d      	movlt	r2, #45	; 0x2d
 800abce:	222b      	movge	r2, #43	; 0x2b
 800abd0:	2909      	cmp	r1, #9
 800abd2:	7042      	strb	r2, [r0, #1]
 800abd4:	dd2a      	ble.n	800ac2c <__exponent+0x70>
 800abd6:	f10d 0207 	add.w	r2, sp, #7
 800abda:	4617      	mov	r7, r2
 800abdc:	260a      	movs	r6, #10
 800abde:	4694      	mov	ip, r2
 800abe0:	fb91 f5f6 	sdiv	r5, r1, r6
 800abe4:	fb06 1415 	mls	r4, r6, r5, r1
 800abe8:	3430      	adds	r4, #48	; 0x30
 800abea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800abee:	460c      	mov	r4, r1
 800abf0:	2c63      	cmp	r4, #99	; 0x63
 800abf2:	f102 32ff 	add.w	r2, r2, #4294967295
 800abf6:	4629      	mov	r1, r5
 800abf8:	dcf1      	bgt.n	800abde <__exponent+0x22>
 800abfa:	3130      	adds	r1, #48	; 0x30
 800abfc:	f1ac 0402 	sub.w	r4, ip, #2
 800ac00:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac04:	1c41      	adds	r1, r0, #1
 800ac06:	4622      	mov	r2, r4
 800ac08:	42ba      	cmp	r2, r7
 800ac0a:	d30a      	bcc.n	800ac22 <__exponent+0x66>
 800ac0c:	f10d 0209 	add.w	r2, sp, #9
 800ac10:	eba2 020c 	sub.w	r2, r2, ip
 800ac14:	42bc      	cmp	r4, r7
 800ac16:	bf88      	it	hi
 800ac18:	2200      	movhi	r2, #0
 800ac1a:	4413      	add	r3, r2
 800ac1c:	1a18      	subs	r0, r3, r0
 800ac1e:	b003      	add	sp, #12
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac26:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac2a:	e7ed      	b.n	800ac08 <__exponent+0x4c>
 800ac2c:	2330      	movs	r3, #48	; 0x30
 800ac2e:	3130      	adds	r1, #48	; 0x30
 800ac30:	7083      	strb	r3, [r0, #2]
 800ac32:	70c1      	strb	r1, [r0, #3]
 800ac34:	1d03      	adds	r3, r0, #4
 800ac36:	e7f1      	b.n	800ac1c <__exponent+0x60>

0800ac38 <_printf_float>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b02 	vpush	{d8}
 800ac40:	b08d      	sub	sp, #52	; 0x34
 800ac42:	460c      	mov	r4, r1
 800ac44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac48:	4616      	mov	r6, r2
 800ac4a:	461f      	mov	r7, r3
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	f000 fef7 	bl	800ba40 <_localeconv_r>
 800ac52:	f8d0 a000 	ldr.w	sl, [r0]
 800ac56:	4650      	mov	r0, sl
 800ac58:	f7f5 fb0a 	bl	8000270 <strlen>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	9305      	str	r3, [sp, #20]
 800ac64:	f8d8 3000 	ldr.w	r3, [r8]
 800ac68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac6c:	3307      	adds	r3, #7
 800ac6e:	f023 0307 	bic.w	r3, r3, #7
 800ac72:	f103 0208 	add.w	r2, r3, #8
 800ac76:	f8c8 2000 	str.w	r2, [r8]
 800ac7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac88:	ee08 0a10 	vmov	s16, r0
 800ac8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac94:	4b9e      	ldr	r3, [pc, #632]	; (800af10 <_printf_float+0x2d8>)
 800ac96:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9a:	f7f5 ff47 	bl	8000b2c <__aeabi_dcmpun>
 800ac9e:	bb88      	cbnz	r0, 800ad04 <_printf_float+0xcc>
 800aca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca4:	4b9a      	ldr	r3, [pc, #616]	; (800af10 <_printf_float+0x2d8>)
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	f7f5 ff21 	bl	8000af0 <__aeabi_dcmple>
 800acae:	bb48      	cbnz	r0, 800ad04 <_printf_float+0xcc>
 800acb0:	2200      	movs	r2, #0
 800acb2:	2300      	movs	r3, #0
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 ff10 	bl	8000adc <__aeabi_dcmplt>
 800acbc:	b110      	cbz	r0, 800acc4 <_printf_float+0x8c>
 800acbe:	232d      	movs	r3, #45	; 0x2d
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	4a93      	ldr	r2, [pc, #588]	; (800af14 <_printf_float+0x2dc>)
 800acc6:	4b94      	ldr	r3, [pc, #592]	; (800af18 <_printf_float+0x2e0>)
 800acc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800accc:	bf94      	ite	ls
 800acce:	4690      	movls	r8, r2
 800acd0:	4698      	movhi	r8, r3
 800acd2:	2303      	movs	r3, #3
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	f023 0304 	bic.w	r3, r3, #4
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	9700      	str	r7, [sp, #0]
 800ace4:	4633      	mov	r3, r6
 800ace6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f9da 	bl	800b0a4 <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	f040 8090 	bne.w	800ae16 <_printf_float+0x1de>
 800acf6:	f04f 30ff 	mov.w	r0, #4294967295
 800acfa:	b00d      	add	sp, #52	; 0x34
 800acfc:	ecbd 8b02 	vpop	{d8}
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	4642      	mov	r2, r8
 800ad06:	464b      	mov	r3, r9
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f7f5 ff0e 	bl	8000b2c <__aeabi_dcmpun>
 800ad10:	b140      	cbz	r0, 800ad24 <_printf_float+0xec>
 800ad12:	464b      	mov	r3, r9
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfbc      	itt	lt
 800ad18:	232d      	movlt	r3, #45	; 0x2d
 800ad1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad1e:	4a7f      	ldr	r2, [pc, #508]	; (800af1c <_printf_float+0x2e4>)
 800ad20:	4b7f      	ldr	r3, [pc, #508]	; (800af20 <_printf_float+0x2e8>)
 800ad22:	e7d1      	b.n	800acc8 <_printf_float+0x90>
 800ad24:	6863      	ldr	r3, [r4, #4]
 800ad26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad2a:	9206      	str	r2, [sp, #24]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	d13f      	bne.n	800adb0 <_printf_float+0x178>
 800ad30:	2306      	movs	r3, #6
 800ad32:	6063      	str	r3, [r4, #4]
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	6861      	ldr	r1, [r4, #4]
 800ad38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	ab0a      	add	r3, sp, #40	; 0x28
 800ad42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad46:	ab09      	add	r3, sp, #36	; 0x24
 800ad48:	ec49 8b10 	vmov	d0, r8, r9
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	6022      	str	r2, [r4, #0]
 800ad50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad54:	4628      	mov	r0, r5
 800ad56:	f7ff fecf 	bl	800aaf8 <__cvt>
 800ad5a:	9b06      	ldr	r3, [sp, #24]
 800ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad5e:	2b47      	cmp	r3, #71	; 0x47
 800ad60:	4680      	mov	r8, r0
 800ad62:	d108      	bne.n	800ad76 <_printf_float+0x13e>
 800ad64:	1cc8      	adds	r0, r1, #3
 800ad66:	db02      	blt.n	800ad6e <_printf_float+0x136>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	dd41      	ble.n	800adf2 <_printf_float+0x1ba>
 800ad6e:	f1ab 0302 	sub.w	r3, fp, #2
 800ad72:	fa5f fb83 	uxtb.w	fp, r3
 800ad76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad7a:	d820      	bhi.n	800adbe <_printf_float+0x186>
 800ad7c:	3901      	subs	r1, #1
 800ad7e:	465a      	mov	r2, fp
 800ad80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad84:	9109      	str	r1, [sp, #36]	; 0x24
 800ad86:	f7ff ff19 	bl	800abbc <__exponent>
 800ad8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8c:	1813      	adds	r3, r2, r0
 800ad8e:	2a01      	cmp	r2, #1
 800ad90:	4681      	mov	r9, r0
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	dc02      	bgt.n	800ad9c <_printf_float+0x164>
 800ad96:	6822      	ldr	r2, [r4, #0]
 800ad98:	07d2      	lsls	r2, r2, #31
 800ad9a:	d501      	bpl.n	800ada0 <_printf_float+0x168>
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d09c      	beq.n	800ace2 <_printf_float+0xaa>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adae:	e798      	b.n	800ace2 <_printf_float+0xaa>
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	2a47      	cmp	r2, #71	; 0x47
 800adb4:	d1be      	bne.n	800ad34 <_printf_float+0xfc>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1bc      	bne.n	800ad34 <_printf_float+0xfc>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7b9      	b.n	800ad32 <_printf_float+0xfa>
 800adbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adc2:	d118      	bne.n	800adf6 <_printf_float+0x1be>
 800adc4:	2900      	cmp	r1, #0
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	dd0b      	ble.n	800ade2 <_printf_float+0x1aa>
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	b913      	cbnz	r3, 800add4 <_printf_float+0x19c>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	07d0      	lsls	r0, r2, #31
 800add2:	d502      	bpl.n	800adda <_printf_float+0x1a2>
 800add4:	3301      	adds	r3, #1
 800add6:	440b      	add	r3, r1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	65a1      	str	r1, [r4, #88]	; 0x58
 800addc:	f04f 0900 	mov.w	r9, #0
 800ade0:	e7de      	b.n	800ada0 <_printf_float+0x168>
 800ade2:	b913      	cbnz	r3, 800adea <_printf_float+0x1b2>
 800ade4:	6822      	ldr	r2, [r4, #0]
 800ade6:	07d2      	lsls	r2, r2, #31
 800ade8:	d501      	bpl.n	800adee <_printf_float+0x1b6>
 800adea:	3302      	adds	r3, #2
 800adec:	e7f4      	b.n	800add8 <_printf_float+0x1a0>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7f2      	b.n	800add8 <_printf_float+0x1a0>
 800adf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	4299      	cmp	r1, r3
 800adfa:	db05      	blt.n	800ae08 <_printf_float+0x1d0>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6121      	str	r1, [r4, #16]
 800ae00:	07d8      	lsls	r0, r3, #31
 800ae02:	d5ea      	bpl.n	800adda <_printf_float+0x1a2>
 800ae04:	1c4b      	adds	r3, r1, #1
 800ae06:	e7e7      	b.n	800add8 <_printf_float+0x1a0>
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	bfd4      	ite	le
 800ae0c:	f1c1 0202 	rsble	r2, r1, #2
 800ae10:	2201      	movgt	r2, #1
 800ae12:	4413      	add	r3, r2
 800ae14:	e7e0      	b.n	800add8 <_printf_float+0x1a0>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	055a      	lsls	r2, r3, #21
 800ae1a:	d407      	bmi.n	800ae2c <_printf_float+0x1f4>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	4642      	mov	r2, r8
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	d12c      	bne.n	800ae84 <_printf_float+0x24c>
 800ae2a:	e764      	b.n	800acf6 <_printf_float+0xbe>
 800ae2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae30:	f240 80e0 	bls.w	800aff4 <_printf_float+0x3bc>
 800ae34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f7f5 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d034      	beq.n	800aeae <_printf_float+0x276>
 800ae44:	4a37      	ldr	r2, [pc, #220]	; (800af24 <_printf_float+0x2ec>)
 800ae46:	2301      	movs	r3, #1
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	47b8      	blx	r7
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f43f af51 	beq.w	800acf6 <_printf_float+0xbe>
 800ae54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	db02      	blt.n	800ae62 <_printf_float+0x22a>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	07d8      	lsls	r0, r3, #31
 800ae60:	d510      	bpl.n	800ae84 <_printf_float+0x24c>
 800ae62:	ee18 3a10 	vmov	r3, s16
 800ae66:	4652      	mov	r2, sl
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af41 	beq.w	800acf6 <_printf_float+0xbe>
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	f104 091a 	add.w	r9, r4, #26
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4543      	cmp	r3, r8
 800ae82:	dc09      	bgt.n	800ae98 <_printf_float+0x260>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	f100 8107 	bmi.w	800b09a <_printf_float+0x462>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e730      	b.n	800acfa <_printf_float+0xc2>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	464a      	mov	r2, r9
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f af27 	beq.w	800acf6 <_printf_float+0xbe>
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	e7e6      	b.n	800ae7c <_printf_float+0x244>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc39      	bgt.n	800af28 <_printf_float+0x2f0>
 800aeb4:	4a1b      	ldr	r2, [pc, #108]	; (800af24 <_printf_float+0x2ec>)
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af19 	beq.w	800acf6 <_printf_float+0xbe>
 800aec4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aec8:	4313      	orrs	r3, r2
 800aeca:	d102      	bne.n	800aed2 <_printf_float+0x29a>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	07d9      	lsls	r1, r3, #31
 800aed0:	d5d8      	bpl.n	800ae84 <_printf_float+0x24c>
 800aed2:	ee18 3a10 	vmov	r3, s16
 800aed6:	4652      	mov	r2, sl
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	f43f af09 	beq.w	800acf6 <_printf_float+0xbe>
 800aee4:	f04f 0900 	mov.w	r9, #0
 800aee8:	f104 0a1a 	add.w	sl, r4, #26
 800aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeee:	425b      	negs	r3, r3
 800aef0:	454b      	cmp	r3, r9
 800aef2:	dc01      	bgt.n	800aef8 <_printf_float+0x2c0>
 800aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef6:	e792      	b.n	800ae1e <_printf_float+0x1e6>
 800aef8:	2301      	movs	r3, #1
 800aefa:	4652      	mov	r2, sl
 800aefc:	4631      	mov	r1, r6
 800aefe:	4628      	mov	r0, r5
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f aef7 	beq.w	800acf6 <_printf_float+0xbe>
 800af08:	f109 0901 	add.w	r9, r9, #1
 800af0c:	e7ee      	b.n	800aeec <_printf_float+0x2b4>
 800af0e:	bf00      	nop
 800af10:	7fefffff 	.word	0x7fefffff
 800af14:	080105dd 	.word	0x080105dd
 800af18:	080105e1 	.word	0x080105e1
 800af1c:	080105e5 	.word	0x080105e5
 800af20:	080105e9 	.word	0x080105e9
 800af24:	080105ed 	.word	0x080105ed
 800af28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bfa8      	it	ge
 800af30:	461a      	movge	r2, r3
 800af32:	2a00      	cmp	r2, #0
 800af34:	4691      	mov	r9, r2
 800af36:	dc37      	bgt.n	800afa8 <_printf_float+0x370>
 800af38:	f04f 0b00 	mov.w	fp, #0
 800af3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af40:	f104 021a 	add.w	r2, r4, #26
 800af44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	eba3 0309 	sub.w	r3, r3, r9
 800af4c:	455b      	cmp	r3, fp
 800af4e:	dc33      	bgt.n	800afb8 <_printf_float+0x380>
 800af50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af54:	429a      	cmp	r2, r3
 800af56:	db3b      	blt.n	800afd0 <_printf_float+0x398>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d438      	bmi.n	800afd0 <_printf_float+0x398>
 800af5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af62:	eba2 0903 	sub.w	r9, r2, r3
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	4591      	cmp	r9, r2
 800af6c:	bfa8      	it	ge
 800af6e:	4691      	movge	r9, r2
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	dc35      	bgt.n	800afe2 <_printf_float+0x3aa>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af7e:	f104 0a1a 	add.w	sl, r4, #26
 800af82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	eba3 0309 	sub.w	r3, r3, r9
 800af8c:	4543      	cmp	r3, r8
 800af8e:	f77f af79 	ble.w	800ae84 <_printf_float+0x24c>
 800af92:	2301      	movs	r3, #1
 800af94:	4652      	mov	r2, sl
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f aeaa 	beq.w	800acf6 <_printf_float+0xbe>
 800afa2:	f108 0801 	add.w	r8, r8, #1
 800afa6:	e7ec      	b.n	800af82 <_printf_float+0x34a>
 800afa8:	4613      	mov	r3, r2
 800afaa:	4631      	mov	r1, r6
 800afac:	4642      	mov	r2, r8
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	d1c0      	bne.n	800af38 <_printf_float+0x300>
 800afb6:	e69e      	b.n	800acf6 <_printf_float+0xbe>
 800afb8:	2301      	movs	r3, #1
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	9205      	str	r2, [sp, #20]
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f ae97 	beq.w	800acf6 <_printf_float+0xbe>
 800afc8:	9a05      	ldr	r2, [sp, #20]
 800afca:	f10b 0b01 	add.w	fp, fp, #1
 800afce:	e7b9      	b.n	800af44 <_printf_float+0x30c>
 800afd0:	ee18 3a10 	vmov	r3, s16
 800afd4:	4652      	mov	r2, sl
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d1be      	bne.n	800af5e <_printf_float+0x326>
 800afe0:	e689      	b.n	800acf6 <_printf_float+0xbe>
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	464b      	mov	r3, r9
 800afe6:	4442      	add	r2, r8
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	d1c1      	bne.n	800af76 <_printf_float+0x33e>
 800aff2:	e680      	b.n	800acf6 <_printf_float+0xbe>
 800aff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff6:	2a01      	cmp	r2, #1
 800aff8:	dc01      	bgt.n	800affe <_printf_float+0x3c6>
 800affa:	07db      	lsls	r3, r3, #31
 800affc:	d53a      	bpl.n	800b074 <_printf_float+0x43c>
 800affe:	2301      	movs	r3, #1
 800b000:	4642      	mov	r2, r8
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae74 	beq.w	800acf6 <_printf_float+0xbe>
 800b00e:	ee18 3a10 	vmov	r3, s16
 800b012:	4652      	mov	r2, sl
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f ae6b 	beq.w	800acf6 <_printf_float+0xbe>
 800b020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b02c:	f7f5 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b030:	b9d8      	cbnz	r0, 800b06a <_printf_float+0x432>
 800b032:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b036:	f108 0201 	add.w	r2, r8, #1
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	d10e      	bne.n	800b062 <_printf_float+0x42a>
 800b044:	e657      	b.n	800acf6 <_printf_float+0xbe>
 800b046:	2301      	movs	r3, #1
 800b048:	4652      	mov	r2, sl
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	f43f ae50 	beq.w	800acf6 <_printf_float+0xbe>
 800b056:	f108 0801 	add.w	r8, r8, #1
 800b05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05c:	3b01      	subs	r3, #1
 800b05e:	4543      	cmp	r3, r8
 800b060:	dcf1      	bgt.n	800b046 <_printf_float+0x40e>
 800b062:	464b      	mov	r3, r9
 800b064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b068:	e6da      	b.n	800ae20 <_printf_float+0x1e8>
 800b06a:	f04f 0800 	mov.w	r8, #0
 800b06e:	f104 0a1a 	add.w	sl, r4, #26
 800b072:	e7f2      	b.n	800b05a <_printf_float+0x422>
 800b074:	2301      	movs	r3, #1
 800b076:	4642      	mov	r2, r8
 800b078:	e7df      	b.n	800b03a <_printf_float+0x402>
 800b07a:	2301      	movs	r3, #1
 800b07c:	464a      	mov	r2, r9
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f ae36 	beq.w	800acf6 <_printf_float+0xbe>
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	68e3      	ldr	r3, [r4, #12]
 800b090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b092:	1a5b      	subs	r3, r3, r1
 800b094:	4543      	cmp	r3, r8
 800b096:	dcf0      	bgt.n	800b07a <_printf_float+0x442>
 800b098:	e6f8      	b.n	800ae8c <_printf_float+0x254>
 800b09a:	f04f 0800 	mov.w	r8, #0
 800b09e:	f104 0919 	add.w	r9, r4, #25
 800b0a2:	e7f4      	b.n	800b08e <_printf_float+0x456>

0800b0a4 <_printf_common>:
 800b0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	4699      	mov	r9, r3
 800b0ac:	688a      	ldr	r2, [r1, #8]
 800b0ae:	690b      	ldr	r3, [r1, #16]
 800b0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	bfb8      	it	lt
 800b0b8:	4613      	movlt	r3, r2
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	b10a      	cbz	r2, 800b0ca <_printf_common+0x26>
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	6033      	str	r3, [r6, #0]
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	0699      	lsls	r1, r3, #26
 800b0ce:	bf42      	ittt	mi
 800b0d0:	6833      	ldrmi	r3, [r6, #0]
 800b0d2:	3302      	addmi	r3, #2
 800b0d4:	6033      	strmi	r3, [r6, #0]
 800b0d6:	6825      	ldr	r5, [r4, #0]
 800b0d8:	f015 0506 	ands.w	r5, r5, #6
 800b0dc:	d106      	bne.n	800b0ec <_printf_common+0x48>
 800b0de:	f104 0a19 	add.w	sl, r4, #25
 800b0e2:	68e3      	ldr	r3, [r4, #12]
 800b0e4:	6832      	ldr	r2, [r6, #0]
 800b0e6:	1a9b      	subs	r3, r3, r2
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	dc26      	bgt.n	800b13a <_printf_common+0x96>
 800b0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0f0:	1e13      	subs	r3, r2, #0
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	2301      	movne	r3, #1
 800b0f8:	0692      	lsls	r2, r2, #26
 800b0fa:	d42b      	bmi.n	800b154 <_printf_common+0xb0>
 800b0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b100:	4649      	mov	r1, r9
 800b102:	4638      	mov	r0, r7
 800b104:	47c0      	blx	r8
 800b106:	3001      	adds	r0, #1
 800b108:	d01e      	beq.n	800b148 <_printf_common+0xa4>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	6922      	ldr	r2, [r4, #16]
 800b10e:	f003 0306 	and.w	r3, r3, #6
 800b112:	2b04      	cmp	r3, #4
 800b114:	bf02      	ittt	eq
 800b116:	68e5      	ldreq	r5, [r4, #12]
 800b118:	6833      	ldreq	r3, [r6, #0]
 800b11a:	1aed      	subeq	r5, r5, r3
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	bf0c      	ite	eq
 800b120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b124:	2500      	movne	r5, #0
 800b126:	4293      	cmp	r3, r2
 800b128:	bfc4      	itt	gt
 800b12a:	1a9b      	subgt	r3, r3, r2
 800b12c:	18ed      	addgt	r5, r5, r3
 800b12e:	2600      	movs	r6, #0
 800b130:	341a      	adds	r4, #26
 800b132:	42b5      	cmp	r5, r6
 800b134:	d11a      	bne.n	800b16c <_printf_common+0xc8>
 800b136:	2000      	movs	r0, #0
 800b138:	e008      	b.n	800b14c <_printf_common+0xa8>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4649      	mov	r1, r9
 800b140:	4638      	mov	r0, r7
 800b142:	47c0      	blx	r8
 800b144:	3001      	adds	r0, #1
 800b146:	d103      	bne.n	800b150 <_printf_common+0xac>
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b150:	3501      	adds	r5, #1
 800b152:	e7c6      	b.n	800b0e2 <_printf_common+0x3e>
 800b154:	18e1      	adds	r1, r4, r3
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	2030      	movs	r0, #48	; 0x30
 800b15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b15e:	4422      	add	r2, r4
 800b160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b168:	3302      	adds	r3, #2
 800b16a:	e7c7      	b.n	800b0fc <_printf_common+0x58>
 800b16c:	2301      	movs	r3, #1
 800b16e:	4622      	mov	r2, r4
 800b170:	4649      	mov	r1, r9
 800b172:	4638      	mov	r0, r7
 800b174:	47c0      	blx	r8
 800b176:	3001      	adds	r0, #1
 800b178:	d0e6      	beq.n	800b148 <_printf_common+0xa4>
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7d9      	b.n	800b132 <_printf_common+0x8e>
	...

0800b180 <_printf_i>:
 800b180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b184:	7e0f      	ldrb	r7, [r1, #24]
 800b186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b188:	2f78      	cmp	r7, #120	; 0x78
 800b18a:	4691      	mov	r9, r2
 800b18c:	4680      	mov	r8, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	469a      	mov	sl, r3
 800b192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b196:	d807      	bhi.n	800b1a8 <_printf_i+0x28>
 800b198:	2f62      	cmp	r7, #98	; 0x62
 800b19a:	d80a      	bhi.n	800b1b2 <_printf_i+0x32>
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	f000 80d4 	beq.w	800b34a <_printf_i+0x1ca>
 800b1a2:	2f58      	cmp	r7, #88	; 0x58
 800b1a4:	f000 80c0 	beq.w	800b328 <_printf_i+0x1a8>
 800b1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1b0:	e03a      	b.n	800b228 <_printf_i+0xa8>
 800b1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1b6:	2b15      	cmp	r3, #21
 800b1b8:	d8f6      	bhi.n	800b1a8 <_printf_i+0x28>
 800b1ba:	a101      	add	r1, pc, #4	; (adr r1, 800b1c0 <_printf_i+0x40>)
 800b1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b22d 	.word	0x0800b22d
 800b1c8:	0800b1a9 	.word	0x0800b1a9
 800b1cc:	0800b1a9 	.word	0x0800b1a9
 800b1d0:	0800b1a9 	.word	0x0800b1a9
 800b1d4:	0800b1a9 	.word	0x0800b1a9
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b1a9 	.word	0x0800b1a9
 800b1e0:	0800b1a9 	.word	0x0800b1a9
 800b1e4:	0800b1a9 	.word	0x0800b1a9
 800b1e8:	0800b1a9 	.word	0x0800b1a9
 800b1ec:	0800b331 	.word	0x0800b331
 800b1f0:	0800b259 	.word	0x0800b259
 800b1f4:	0800b2eb 	.word	0x0800b2eb
 800b1f8:	0800b1a9 	.word	0x0800b1a9
 800b1fc:	0800b1a9 	.word	0x0800b1a9
 800b200:	0800b353 	.word	0x0800b353
 800b204:	0800b1a9 	.word	0x0800b1a9
 800b208:	0800b259 	.word	0x0800b259
 800b20c:	0800b1a9 	.word	0x0800b1a9
 800b210:	0800b1a9 	.word	0x0800b1a9
 800b214:	0800b2f3 	.word	0x0800b2f3
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	602a      	str	r2, [r5, #0]
 800b220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b228:	2301      	movs	r3, #1
 800b22a:	e09f      	b.n	800b36c <_printf_i+0x1ec>
 800b22c:	6820      	ldr	r0, [r4, #0]
 800b22e:	682b      	ldr	r3, [r5, #0]
 800b230:	0607      	lsls	r7, r0, #24
 800b232:	f103 0104 	add.w	r1, r3, #4
 800b236:	6029      	str	r1, [r5, #0]
 800b238:	d501      	bpl.n	800b23e <_printf_i+0xbe>
 800b23a:	681e      	ldr	r6, [r3, #0]
 800b23c:	e003      	b.n	800b246 <_printf_i+0xc6>
 800b23e:	0646      	lsls	r6, r0, #25
 800b240:	d5fb      	bpl.n	800b23a <_printf_i+0xba>
 800b242:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b246:	2e00      	cmp	r6, #0
 800b248:	da03      	bge.n	800b252 <_printf_i+0xd2>
 800b24a:	232d      	movs	r3, #45	; 0x2d
 800b24c:	4276      	negs	r6, r6
 800b24e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b252:	485a      	ldr	r0, [pc, #360]	; (800b3bc <_printf_i+0x23c>)
 800b254:	230a      	movs	r3, #10
 800b256:	e012      	b.n	800b27e <_printf_i+0xfe>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1d19      	adds	r1, r3, #4
 800b25e:	6029      	str	r1, [r5, #0]
 800b260:	0605      	lsls	r5, r0, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xe8>
 800b264:	681e      	ldr	r6, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0xee>
 800b268:	0641      	lsls	r1, r0, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xe4>
 800b26c:	881e      	ldrh	r6, [r3, #0]
 800b26e:	4853      	ldr	r0, [pc, #332]	; (800b3bc <_printf_i+0x23c>)
 800b270:	2f6f      	cmp	r7, #111	; 0x6f
 800b272:	bf0c      	ite	eq
 800b274:	2308      	moveq	r3, #8
 800b276:	230a      	movne	r3, #10
 800b278:	2100      	movs	r1, #0
 800b27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27e:	6865      	ldr	r5, [r4, #4]
 800b280:	60a5      	str	r5, [r4, #8]
 800b282:	2d00      	cmp	r5, #0
 800b284:	bfa2      	ittt	ge
 800b286:	6821      	ldrge	r1, [r4, #0]
 800b288:	f021 0104 	bicge.w	r1, r1, #4
 800b28c:	6021      	strge	r1, [r4, #0]
 800b28e:	b90e      	cbnz	r6, 800b294 <_printf_i+0x114>
 800b290:	2d00      	cmp	r5, #0
 800b292:	d04b      	beq.n	800b32c <_printf_i+0x1ac>
 800b294:	4615      	mov	r5, r2
 800b296:	fbb6 f1f3 	udiv	r1, r6, r3
 800b29a:	fb03 6711 	mls	r7, r3, r1, r6
 800b29e:	5dc7      	ldrb	r7, [r0, r7]
 800b2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a4:	4637      	mov	r7, r6
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	d9f4      	bls.n	800b296 <_printf_i+0x116>
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d10b      	bne.n	800b2c8 <_printf_i+0x148>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07de      	lsls	r6, r3, #31
 800b2b4:	d508      	bpl.n	800b2c8 <_printf_i+0x148>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	bfde      	ittt	le
 800b2be:	2330      	movle	r3, #48	; 0x30
 800b2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c8:	1b52      	subs	r2, r2, r5
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	f8cd a000 	str.w	sl, [sp]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	aa03      	add	r2, sp, #12
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f7ff fee4 	bl	800b0a4 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d14a      	bne.n	800b376 <_printf_i+0x1f6>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b004      	add	sp, #16
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	f043 0320 	orr.w	r3, r3, #32
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	4833      	ldr	r0, [pc, #204]	; (800b3c0 <_printf_i+0x240>)
 800b2f4:	2778      	movs	r7, #120	; 0x78
 800b2f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	6829      	ldr	r1, [r5, #0]
 800b2fe:	061f      	lsls	r7, r3, #24
 800b300:	f851 6b04 	ldr.w	r6, [r1], #4
 800b304:	d402      	bmi.n	800b30c <_printf_i+0x18c>
 800b306:	065f      	lsls	r7, r3, #25
 800b308:	bf48      	it	mi
 800b30a:	b2b6      	uxthmi	r6, r6
 800b30c:	07df      	lsls	r7, r3, #31
 800b30e:	bf48      	it	mi
 800b310:	f043 0320 	orrmi.w	r3, r3, #32
 800b314:	6029      	str	r1, [r5, #0]
 800b316:	bf48      	it	mi
 800b318:	6023      	strmi	r3, [r4, #0]
 800b31a:	b91e      	cbnz	r6, 800b324 <_printf_i+0x1a4>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	f023 0320 	bic.w	r3, r3, #32
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	2310      	movs	r3, #16
 800b326:	e7a7      	b.n	800b278 <_printf_i+0xf8>
 800b328:	4824      	ldr	r0, [pc, #144]	; (800b3bc <_printf_i+0x23c>)
 800b32a:	e7e4      	b.n	800b2f6 <_printf_i+0x176>
 800b32c:	4615      	mov	r5, r2
 800b32e:	e7bd      	b.n	800b2ac <_printf_i+0x12c>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	6826      	ldr	r6, [r4, #0]
 800b334:	6961      	ldr	r1, [r4, #20]
 800b336:	1d18      	adds	r0, r3, #4
 800b338:	6028      	str	r0, [r5, #0]
 800b33a:	0635      	lsls	r5, r6, #24
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0x1c4>
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	e002      	b.n	800b34a <_printf_i+0x1ca>
 800b344:	0670      	lsls	r0, r6, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0x1c0>
 800b348:	8019      	strh	r1, [r3, #0]
 800b34a:	2300      	movs	r3, #0
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	4615      	mov	r5, r2
 800b350:	e7bc      	b.n	800b2cc <_printf_i+0x14c>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4628      	mov	r0, r5
 800b360:	f7f4 ff36 	bl	80001d0 <memchr>
 800b364:	b108      	cbz	r0, 800b36a <_printf_i+0x1ea>
 800b366:	1b40      	subs	r0, r0, r5
 800b368:	6060      	str	r0, [r4, #4]
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	2300      	movs	r3, #0
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	e7aa      	b.n	800b2cc <_printf_i+0x14c>
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	462a      	mov	r2, r5
 800b37a:	4649      	mov	r1, r9
 800b37c:	4640      	mov	r0, r8
 800b37e:	47d0      	blx	sl
 800b380:	3001      	adds	r0, #1
 800b382:	d0ad      	beq.n	800b2e0 <_printf_i+0x160>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	d413      	bmi.n	800b3b2 <_printf_i+0x232>
 800b38a:	68e0      	ldr	r0, [r4, #12]
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	4298      	cmp	r0, r3
 800b390:	bfb8      	it	lt
 800b392:	4618      	movlt	r0, r3
 800b394:	e7a6      	b.n	800b2e4 <_printf_i+0x164>
 800b396:	2301      	movs	r3, #1
 800b398:	4632      	mov	r2, r6
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d09d      	beq.n	800b2e0 <_printf_i+0x160>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	9903      	ldr	r1, [sp, #12]
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	42ab      	cmp	r3, r5
 800b3ae:	dcf2      	bgt.n	800b396 <_printf_i+0x216>
 800b3b0:	e7eb      	b.n	800b38a <_printf_i+0x20a>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	f104 0619 	add.w	r6, r4, #25
 800b3b8:	e7f5      	b.n	800b3a6 <_printf_i+0x226>
 800b3ba:	bf00      	nop
 800b3bc:	080105ef 	.word	0x080105ef
 800b3c0:	08010600 	.word	0x08010600

0800b3c4 <_scanf_float>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	b087      	sub	sp, #28
 800b3ca:	4617      	mov	r7, r2
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	688b      	ldr	r3, [r1, #8]
 800b3d0:	1e5a      	subs	r2, r3, #1
 800b3d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b3d6:	bf83      	ittte	hi
 800b3d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b3dc:	195b      	addhi	r3, r3, r5
 800b3de:	9302      	strhi	r3, [sp, #8]
 800b3e0:	2300      	movls	r3, #0
 800b3e2:	bf86      	itte	hi
 800b3e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b3e8:	608b      	strhi	r3, [r1, #8]
 800b3ea:	9302      	strls	r3, [sp, #8]
 800b3ec:	680b      	ldr	r3, [r1, #0]
 800b3ee:	468b      	mov	fp, r1
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b3f6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b3fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3fe:	4680      	mov	r8, r0
 800b400:	460c      	mov	r4, r1
 800b402:	465e      	mov	r6, fp
 800b404:	46aa      	mov	sl, r5
 800b406:	46a9      	mov	r9, r5
 800b408:	9501      	str	r5, [sp, #4]
 800b40a:	68a2      	ldr	r2, [r4, #8]
 800b40c:	b152      	cbz	r2, 800b424 <_scanf_float+0x60>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b4e      	cmp	r3, #78	; 0x4e
 800b414:	d864      	bhi.n	800b4e0 <_scanf_float+0x11c>
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d83c      	bhi.n	800b494 <_scanf_float+0xd0>
 800b41a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b41e:	b2c8      	uxtb	r0, r1
 800b420:	280e      	cmp	r0, #14
 800b422:	d93a      	bls.n	800b49a <_scanf_float+0xd6>
 800b424:	f1b9 0f00 	cmp.w	r9, #0
 800b428:	d003      	beq.n	800b432 <_scanf_float+0x6e>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b436:	f1ba 0f01 	cmp.w	sl, #1
 800b43a:	f200 8113 	bhi.w	800b664 <_scanf_float+0x2a0>
 800b43e:	455e      	cmp	r6, fp
 800b440:	f200 8105 	bhi.w	800b64e <_scanf_float+0x28a>
 800b444:	2501      	movs	r5, #1
 800b446:	4628      	mov	r0, r5
 800b448:	b007      	add	sp, #28
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b452:	2a0d      	cmp	r2, #13
 800b454:	d8e6      	bhi.n	800b424 <_scanf_float+0x60>
 800b456:	a101      	add	r1, pc, #4	; (adr r1, 800b45c <_scanf_float+0x98>)
 800b458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b45c:	0800b59b 	.word	0x0800b59b
 800b460:	0800b425 	.word	0x0800b425
 800b464:	0800b425 	.word	0x0800b425
 800b468:	0800b425 	.word	0x0800b425
 800b46c:	0800b5fb 	.word	0x0800b5fb
 800b470:	0800b5d3 	.word	0x0800b5d3
 800b474:	0800b425 	.word	0x0800b425
 800b478:	0800b425 	.word	0x0800b425
 800b47c:	0800b5a9 	.word	0x0800b5a9
 800b480:	0800b425 	.word	0x0800b425
 800b484:	0800b425 	.word	0x0800b425
 800b488:	0800b425 	.word	0x0800b425
 800b48c:	0800b425 	.word	0x0800b425
 800b490:	0800b561 	.word	0x0800b561
 800b494:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b498:	e7db      	b.n	800b452 <_scanf_float+0x8e>
 800b49a:	290e      	cmp	r1, #14
 800b49c:	d8c2      	bhi.n	800b424 <_scanf_float+0x60>
 800b49e:	a001      	add	r0, pc, #4	; (adr r0, 800b4a4 <_scanf_float+0xe0>)
 800b4a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4a4:	0800b553 	.word	0x0800b553
 800b4a8:	0800b425 	.word	0x0800b425
 800b4ac:	0800b553 	.word	0x0800b553
 800b4b0:	0800b5e7 	.word	0x0800b5e7
 800b4b4:	0800b425 	.word	0x0800b425
 800b4b8:	0800b501 	.word	0x0800b501
 800b4bc:	0800b53d 	.word	0x0800b53d
 800b4c0:	0800b53d 	.word	0x0800b53d
 800b4c4:	0800b53d 	.word	0x0800b53d
 800b4c8:	0800b53d 	.word	0x0800b53d
 800b4cc:	0800b53d 	.word	0x0800b53d
 800b4d0:	0800b53d 	.word	0x0800b53d
 800b4d4:	0800b53d 	.word	0x0800b53d
 800b4d8:	0800b53d 	.word	0x0800b53d
 800b4dc:	0800b53d 	.word	0x0800b53d
 800b4e0:	2b6e      	cmp	r3, #110	; 0x6e
 800b4e2:	d809      	bhi.n	800b4f8 <_scanf_float+0x134>
 800b4e4:	2b60      	cmp	r3, #96	; 0x60
 800b4e6:	d8b2      	bhi.n	800b44e <_scanf_float+0x8a>
 800b4e8:	2b54      	cmp	r3, #84	; 0x54
 800b4ea:	d077      	beq.n	800b5dc <_scanf_float+0x218>
 800b4ec:	2b59      	cmp	r3, #89	; 0x59
 800b4ee:	d199      	bne.n	800b424 <_scanf_float+0x60>
 800b4f0:	2d07      	cmp	r5, #7
 800b4f2:	d197      	bne.n	800b424 <_scanf_float+0x60>
 800b4f4:	2508      	movs	r5, #8
 800b4f6:	e029      	b.n	800b54c <_scanf_float+0x188>
 800b4f8:	2b74      	cmp	r3, #116	; 0x74
 800b4fa:	d06f      	beq.n	800b5dc <_scanf_float+0x218>
 800b4fc:	2b79      	cmp	r3, #121	; 0x79
 800b4fe:	e7f6      	b.n	800b4ee <_scanf_float+0x12a>
 800b500:	6821      	ldr	r1, [r4, #0]
 800b502:	05c8      	lsls	r0, r1, #23
 800b504:	d51a      	bpl.n	800b53c <_scanf_float+0x178>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b50c:	6021      	str	r1, [r4, #0]
 800b50e:	f109 0901 	add.w	r9, r9, #1
 800b512:	b11b      	cbz	r3, 800b51c <_scanf_float+0x158>
 800b514:	3b01      	subs	r3, #1
 800b516:	3201      	adds	r2, #1
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	60a2      	str	r2, [r4, #8]
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	3b01      	subs	r3, #1
 800b520:	60a3      	str	r3, [r4, #8]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	3301      	adds	r3, #1
 800b526:	6123      	str	r3, [r4, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	f340 8084 	ble.w	800b63c <_scanf_float+0x278>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	3301      	adds	r3, #1
 800b538:	603b      	str	r3, [r7, #0]
 800b53a:	e766      	b.n	800b40a <_scanf_float+0x46>
 800b53c:	eb1a 0f05 	cmn.w	sl, r5
 800b540:	f47f af70 	bne.w	800b424 <_scanf_float+0x60>
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b54a:	6022      	str	r2, [r4, #0]
 800b54c:	f806 3b01 	strb.w	r3, [r6], #1
 800b550:	e7e4      	b.n	800b51c <_scanf_float+0x158>
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	0610      	lsls	r0, r2, #24
 800b556:	f57f af65 	bpl.w	800b424 <_scanf_float+0x60>
 800b55a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b55e:	e7f4      	b.n	800b54a <_scanf_float+0x186>
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d10e      	bne.n	800b584 <_scanf_float+0x1c0>
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d10e      	bne.n	800b58a <_scanf_float+0x1c6>
 800b56c:	6822      	ldr	r2, [r4, #0]
 800b56e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b572:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b576:	d108      	bne.n	800b58a <_scanf_float+0x1c6>
 800b578:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b57c:	6022      	str	r2, [r4, #0]
 800b57e:	f04f 0a01 	mov.w	sl, #1
 800b582:	e7e3      	b.n	800b54c <_scanf_float+0x188>
 800b584:	f1ba 0f02 	cmp.w	sl, #2
 800b588:	d055      	beq.n	800b636 <_scanf_float+0x272>
 800b58a:	2d01      	cmp	r5, #1
 800b58c:	d002      	beq.n	800b594 <_scanf_float+0x1d0>
 800b58e:	2d04      	cmp	r5, #4
 800b590:	f47f af48 	bne.w	800b424 <_scanf_float+0x60>
 800b594:	3501      	adds	r5, #1
 800b596:	b2ed      	uxtb	r5, r5
 800b598:	e7d8      	b.n	800b54c <_scanf_float+0x188>
 800b59a:	f1ba 0f01 	cmp.w	sl, #1
 800b59e:	f47f af41 	bne.w	800b424 <_scanf_float+0x60>
 800b5a2:	f04f 0a02 	mov.w	sl, #2
 800b5a6:	e7d1      	b.n	800b54c <_scanf_float+0x188>
 800b5a8:	b97d      	cbnz	r5, 800b5ca <_scanf_float+0x206>
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	f47f af3c 	bne.w	800b42a <_scanf_float+0x66>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b5b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5bc:	f47f af39 	bne.w	800b432 <_scanf_float+0x6e>
 800b5c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	e7c0      	b.n	800b54c <_scanf_float+0x188>
 800b5ca:	2d03      	cmp	r5, #3
 800b5cc:	d0e2      	beq.n	800b594 <_scanf_float+0x1d0>
 800b5ce:	2d05      	cmp	r5, #5
 800b5d0:	e7de      	b.n	800b590 <_scanf_float+0x1cc>
 800b5d2:	2d02      	cmp	r5, #2
 800b5d4:	f47f af26 	bne.w	800b424 <_scanf_float+0x60>
 800b5d8:	2503      	movs	r5, #3
 800b5da:	e7b7      	b.n	800b54c <_scanf_float+0x188>
 800b5dc:	2d06      	cmp	r5, #6
 800b5de:	f47f af21 	bne.w	800b424 <_scanf_float+0x60>
 800b5e2:	2507      	movs	r5, #7
 800b5e4:	e7b2      	b.n	800b54c <_scanf_float+0x188>
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	0591      	lsls	r1, r2, #22
 800b5ea:	f57f af1b 	bpl.w	800b424 <_scanf_float+0x60>
 800b5ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b5f2:	6022      	str	r2, [r4, #0]
 800b5f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b5f8:	e7a8      	b.n	800b54c <_scanf_float+0x188>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b600:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b604:	d006      	beq.n	800b614 <_scanf_float+0x250>
 800b606:	0550      	lsls	r0, r2, #21
 800b608:	f57f af0c 	bpl.w	800b424 <_scanf_float+0x60>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	f43f af0f 	beq.w	800b432 <_scanf_float+0x6e>
 800b614:	0591      	lsls	r1, r2, #22
 800b616:	bf58      	it	pl
 800b618:	9901      	ldrpl	r1, [sp, #4]
 800b61a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b61e:	bf58      	it	pl
 800b620:	eba9 0101 	subpl.w	r1, r9, r1
 800b624:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b628:	bf58      	it	pl
 800b62a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	e78a      	b.n	800b54c <_scanf_float+0x188>
 800b636:	f04f 0a03 	mov.w	sl, #3
 800b63a:	e787      	b.n	800b54c <_scanf_float+0x188>
 800b63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b640:	4639      	mov	r1, r7
 800b642:	4640      	mov	r0, r8
 800b644:	4798      	blx	r3
 800b646:	2800      	cmp	r0, #0
 800b648:	f43f aedf 	beq.w	800b40a <_scanf_float+0x46>
 800b64c:	e6ea      	b.n	800b424 <_scanf_float+0x60>
 800b64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b656:	463a      	mov	r2, r7
 800b658:	4640      	mov	r0, r8
 800b65a:	4798      	blx	r3
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	3b01      	subs	r3, #1
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	e6ec      	b.n	800b43e <_scanf_float+0x7a>
 800b664:	1e6b      	subs	r3, r5, #1
 800b666:	2b06      	cmp	r3, #6
 800b668:	d825      	bhi.n	800b6b6 <_scanf_float+0x2f2>
 800b66a:	2d02      	cmp	r5, #2
 800b66c:	d836      	bhi.n	800b6dc <_scanf_float+0x318>
 800b66e:	455e      	cmp	r6, fp
 800b670:	f67f aee8 	bls.w	800b444 <_scanf_float+0x80>
 800b674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b678:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b67c:	463a      	mov	r2, r7
 800b67e:	4640      	mov	r0, r8
 800b680:	4798      	blx	r3
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	3b01      	subs	r3, #1
 800b686:	6123      	str	r3, [r4, #16]
 800b688:	e7f1      	b.n	800b66e <_scanf_float+0x2aa>
 800b68a:	9802      	ldr	r0, [sp, #8]
 800b68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b690:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	463a      	mov	r2, r7
 800b698:	4640      	mov	r0, r8
 800b69a:	4798      	blx	r3
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6a6:	fa5f fa8a 	uxtb.w	sl, sl
 800b6aa:	f1ba 0f02 	cmp.w	sl, #2
 800b6ae:	d1ec      	bne.n	800b68a <_scanf_float+0x2c6>
 800b6b0:	3d03      	subs	r5, #3
 800b6b2:	b2ed      	uxtb	r5, r5
 800b6b4:	1b76      	subs	r6, r6, r5
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	05da      	lsls	r2, r3, #23
 800b6ba:	d52f      	bpl.n	800b71c <_scanf_float+0x358>
 800b6bc:	055b      	lsls	r3, r3, #21
 800b6be:	d510      	bpl.n	800b6e2 <_scanf_float+0x31e>
 800b6c0:	455e      	cmp	r6, fp
 800b6c2:	f67f aebf 	bls.w	800b444 <_scanf_float+0x80>
 800b6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	e7f1      	b.n	800b6c0 <_scanf_float+0x2fc>
 800b6dc:	46aa      	mov	sl, r5
 800b6de:	9602      	str	r6, [sp, #8]
 800b6e0:	e7df      	b.n	800b6a2 <_scanf_float+0x2de>
 800b6e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	2965      	cmp	r1, #101	; 0x65
 800b6ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	d00c      	beq.n	800b710 <_scanf_float+0x34c>
 800b6f6:	2945      	cmp	r1, #69	; 0x45
 800b6f8:	d00a      	beq.n	800b710 <_scanf_float+0x34c>
 800b6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	1eb5      	subs	r5, r6, #2
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b714:	463a      	mov	r2, r7
 800b716:	4640      	mov	r0, r8
 800b718:	4798      	blx	r3
 800b71a:	462e      	mov	r6, r5
 800b71c:	6825      	ldr	r5, [r4, #0]
 800b71e:	f015 0510 	ands.w	r5, r5, #16
 800b722:	d158      	bne.n	800b7d6 <_scanf_float+0x412>
 800b724:	7035      	strb	r5, [r6, #0]
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b730:	d11c      	bne.n	800b76c <_scanf_float+0x3a8>
 800b732:	9b01      	ldr	r3, [sp, #4]
 800b734:	454b      	cmp	r3, r9
 800b736:	eba3 0209 	sub.w	r2, r3, r9
 800b73a:	d124      	bne.n	800b786 <_scanf_float+0x3c2>
 800b73c:	2200      	movs	r2, #0
 800b73e:	4659      	mov	r1, fp
 800b740:	4640      	mov	r0, r8
 800b742:	f002 fc3d 	bl	800dfc0 <_strtod_r>
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	6821      	ldr	r1, [r4, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f011 0f02 	tst.w	r1, #2
 800b750:	ec57 6b10 	vmov	r6, r7, d0
 800b754:	f103 0204 	add.w	r2, r3, #4
 800b758:	d020      	beq.n	800b79c <_scanf_float+0x3d8>
 800b75a:	9903      	ldr	r1, [sp, #12]
 800b75c:	600a      	str	r2, [r1, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	e9c3 6700 	strd	r6, r7, [r3]
 800b764:	68e3      	ldr	r3, [r4, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60e3      	str	r3, [r4, #12]
 800b76a:	e66c      	b.n	800b446 <_scanf_float+0x82>
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0e4      	beq.n	800b73c <_scanf_float+0x378>
 800b772:	9905      	ldr	r1, [sp, #20]
 800b774:	230a      	movs	r3, #10
 800b776:	462a      	mov	r2, r5
 800b778:	3101      	adds	r1, #1
 800b77a:	4640      	mov	r0, r8
 800b77c:	f002 fca8 	bl	800e0d0 <_strtol_r>
 800b780:	9b04      	ldr	r3, [sp, #16]
 800b782:	9e05      	ldr	r6, [sp, #20]
 800b784:	1ac2      	subs	r2, r0, r3
 800b786:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b78a:	429e      	cmp	r6, r3
 800b78c:	bf28      	it	cs
 800b78e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b792:	4912      	ldr	r1, [pc, #72]	; (800b7dc <_scanf_float+0x418>)
 800b794:	4630      	mov	r0, r6
 800b796:	f000 f8e7 	bl	800b968 <siprintf>
 800b79a:	e7cf      	b.n	800b73c <_scanf_float+0x378>
 800b79c:	f011 0f04 	tst.w	r1, #4
 800b7a0:	9903      	ldr	r1, [sp, #12]
 800b7a2:	600a      	str	r2, [r1, #0]
 800b7a4:	d1db      	bne.n	800b75e <_scanf_float+0x39a>
 800b7a6:	f8d3 8000 	ldr.w	r8, [r3]
 800b7aa:	ee10 2a10 	vmov	r2, s0
 800b7ae:	ee10 0a10 	vmov	r0, s0
 800b7b2:	463b      	mov	r3, r7
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	f7f5 f9b9 	bl	8000b2c <__aeabi_dcmpun>
 800b7ba:	b128      	cbz	r0, 800b7c8 <_scanf_float+0x404>
 800b7bc:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <_scanf_float+0x41c>)
 800b7be:	f000 f9c5 	bl	800bb4c <nanf>
 800b7c2:	ed88 0a00 	vstr	s0, [r8]
 800b7c6:	e7cd      	b.n	800b764 <_scanf_float+0x3a0>
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f5 fa0c 	bl	8000be8 <__aeabi_d2f>
 800b7d0:	f8c8 0000 	str.w	r0, [r8]
 800b7d4:	e7c6      	b.n	800b764 <_scanf_float+0x3a0>
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	e635      	b.n	800b446 <_scanf_float+0x82>
 800b7da:	bf00      	nop
 800b7dc:	08010611 	.word	0x08010611
 800b7e0:	080108a4 	.word	0x080108a4

0800b7e4 <std>:
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7f2:	6083      	str	r3, [r0, #8]
 800b7f4:	8181      	strh	r1, [r0, #12]
 800b7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b7f8:	81c2      	strh	r2, [r0, #14]
 800b7fa:	6183      	str	r3, [r0, #24]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	2208      	movs	r2, #8
 800b800:	305c      	adds	r0, #92	; 0x5c
 800b802:	f000 f914 	bl	800ba2e <memset>
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <std+0x58>)
 800b808:	6263      	str	r3, [r4, #36]	; 0x24
 800b80a:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <std+0x5c>)
 800b80c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b80e:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <std+0x60>)
 800b810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <std+0x64>)
 800b814:	6323      	str	r3, [r4, #48]	; 0x30
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <std+0x68>)
 800b818:	6224      	str	r4, [r4, #32]
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d006      	beq.n	800b82c <std+0x48>
 800b81e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b822:	4294      	cmp	r4, r2
 800b824:	d002      	beq.n	800b82c <std+0x48>
 800b826:	33d0      	adds	r3, #208	; 0xd0
 800b828:	429c      	cmp	r4, r3
 800b82a:	d105      	bne.n	800b838 <std+0x54>
 800b82c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b834:	f000 b978 	b.w	800bb28 <__retarget_lock_init_recursive>
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	0800b9a9 	.word	0x0800b9a9
 800b840:	0800b9cb 	.word	0x0800b9cb
 800b844:	0800ba03 	.word	0x0800ba03
 800b848:	0800ba27 	.word	0x0800ba27
 800b84c:	2000535c 	.word	0x2000535c

0800b850 <stdio_exit_handler>:
 800b850:	4a02      	ldr	r2, [pc, #8]	; (800b85c <stdio_exit_handler+0xc>)
 800b852:	4903      	ldr	r1, [pc, #12]	; (800b860 <stdio_exit_handler+0x10>)
 800b854:	4803      	ldr	r0, [pc, #12]	; (800b864 <stdio_exit_handler+0x14>)
 800b856:	f000 b869 	b.w	800b92c <_fwalk_sglue>
 800b85a:	bf00      	nop
 800b85c:	20000038 	.word	0x20000038
 800b860:	0800e491 	.word	0x0800e491
 800b864:	20000044 	.word	0x20000044

0800b868 <cleanup_stdio>:
 800b868:	6841      	ldr	r1, [r0, #4]
 800b86a:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <cleanup_stdio+0x34>)
 800b86c:	4299      	cmp	r1, r3
 800b86e:	b510      	push	{r4, lr}
 800b870:	4604      	mov	r4, r0
 800b872:	d001      	beq.n	800b878 <cleanup_stdio+0x10>
 800b874:	f002 fe0c 	bl	800e490 <_fflush_r>
 800b878:	68a1      	ldr	r1, [r4, #8]
 800b87a:	4b09      	ldr	r3, [pc, #36]	; (800b8a0 <cleanup_stdio+0x38>)
 800b87c:	4299      	cmp	r1, r3
 800b87e:	d002      	beq.n	800b886 <cleanup_stdio+0x1e>
 800b880:	4620      	mov	r0, r4
 800b882:	f002 fe05 	bl	800e490 <_fflush_r>
 800b886:	68e1      	ldr	r1, [r4, #12]
 800b888:	4b06      	ldr	r3, [pc, #24]	; (800b8a4 <cleanup_stdio+0x3c>)
 800b88a:	4299      	cmp	r1, r3
 800b88c:	d004      	beq.n	800b898 <cleanup_stdio+0x30>
 800b88e:	4620      	mov	r0, r4
 800b890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b894:	f002 bdfc 	b.w	800e490 <_fflush_r>
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	bf00      	nop
 800b89c:	2000535c 	.word	0x2000535c
 800b8a0:	200053c4 	.word	0x200053c4
 800b8a4:	2000542c 	.word	0x2000542c

0800b8a8 <global_stdio_init.part.0>:
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	; (800b8d8 <global_stdio_init.part.0+0x30>)
 800b8ac:	4c0b      	ldr	r4, [pc, #44]	; (800b8dc <global_stdio_init.part.0+0x34>)
 800b8ae:	4a0c      	ldr	r2, [pc, #48]	; (800b8e0 <global_stdio_init.part.0+0x38>)
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2104      	movs	r1, #4
 800b8b8:	f7ff ff94 	bl	800b7e4 <std>
 800b8bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	2109      	movs	r1, #9
 800b8c4:	f7ff ff8e 	bl	800b7e4 <std>
 800b8c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d2:	2112      	movs	r1, #18
 800b8d4:	f7ff bf86 	b.w	800b7e4 <std>
 800b8d8:	20005494 	.word	0x20005494
 800b8dc:	2000535c 	.word	0x2000535c
 800b8e0:	0800b851 	.word	0x0800b851

0800b8e4 <__sfp_lock_acquire>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__sfp_lock_acquire+0x8>)
 800b8e6:	f000 b920 	b.w	800bb2a <__retarget_lock_acquire_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	2000549d 	.word	0x2000549d

0800b8f0 <__sfp_lock_release>:
 800b8f0:	4801      	ldr	r0, [pc, #4]	; (800b8f8 <__sfp_lock_release+0x8>)
 800b8f2:	f000 b91b 	b.w	800bb2c <__retarget_lock_release_recursive>
 800b8f6:	bf00      	nop
 800b8f8:	2000549d 	.word	0x2000549d

0800b8fc <__sinit>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	f7ff fff0 	bl	800b8e4 <__sfp_lock_acquire>
 800b904:	6a23      	ldr	r3, [r4, #32]
 800b906:	b11b      	cbz	r3, 800b910 <__sinit+0x14>
 800b908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b90c:	f7ff bff0 	b.w	800b8f0 <__sfp_lock_release>
 800b910:	4b04      	ldr	r3, [pc, #16]	; (800b924 <__sinit+0x28>)
 800b912:	6223      	str	r3, [r4, #32]
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <__sinit+0x2c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1f5      	bne.n	800b908 <__sinit+0xc>
 800b91c:	f7ff ffc4 	bl	800b8a8 <global_stdio_init.part.0>
 800b920:	e7f2      	b.n	800b908 <__sinit+0xc>
 800b922:	bf00      	nop
 800b924:	0800b869 	.word	0x0800b869
 800b928:	20005494 	.word	0x20005494

0800b92c <_fwalk_sglue>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	4607      	mov	r7, r0
 800b932:	4688      	mov	r8, r1
 800b934:	4614      	mov	r4, r2
 800b936:	2600      	movs	r6, #0
 800b938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b93c:	f1b9 0901 	subs.w	r9, r9, #1
 800b940:	d505      	bpl.n	800b94e <_fwalk_sglue+0x22>
 800b942:	6824      	ldr	r4, [r4, #0]
 800b944:	2c00      	cmp	r4, #0
 800b946:	d1f7      	bne.n	800b938 <_fwalk_sglue+0xc>
 800b948:	4630      	mov	r0, r6
 800b94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d907      	bls.n	800b964 <_fwalk_sglue+0x38>
 800b954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b958:	3301      	adds	r3, #1
 800b95a:	d003      	beq.n	800b964 <_fwalk_sglue+0x38>
 800b95c:	4629      	mov	r1, r5
 800b95e:	4638      	mov	r0, r7
 800b960:	47c0      	blx	r8
 800b962:	4306      	orrs	r6, r0
 800b964:	3568      	adds	r5, #104	; 0x68
 800b966:	e7e9      	b.n	800b93c <_fwalk_sglue+0x10>

0800b968 <siprintf>:
 800b968:	b40e      	push	{r1, r2, r3}
 800b96a:	b500      	push	{lr}
 800b96c:	b09c      	sub	sp, #112	; 0x70
 800b96e:	ab1d      	add	r3, sp, #116	; 0x74
 800b970:	9002      	str	r0, [sp, #8]
 800b972:	9006      	str	r0, [sp, #24]
 800b974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b978:	4809      	ldr	r0, [pc, #36]	; (800b9a0 <siprintf+0x38>)
 800b97a:	9107      	str	r1, [sp, #28]
 800b97c:	9104      	str	r1, [sp, #16]
 800b97e:	4909      	ldr	r1, [pc, #36]	; (800b9a4 <siprintf+0x3c>)
 800b980:	f853 2b04 	ldr.w	r2, [r3], #4
 800b984:	9105      	str	r1, [sp, #20]
 800b986:	6800      	ldr	r0, [r0, #0]
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	a902      	add	r1, sp, #8
 800b98c:	f002 fbfc 	bl	800e188 <_svfiprintf_r>
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	2200      	movs	r2, #0
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	b01c      	add	sp, #112	; 0x70
 800b998:	f85d eb04 	ldr.w	lr, [sp], #4
 800b99c:	b003      	add	sp, #12
 800b99e:	4770      	bx	lr
 800b9a0:	20000090 	.word	0x20000090
 800b9a4:	ffff0208 	.word	0xffff0208

0800b9a8 <__sread>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b0:	f000 f86c 	bl	800ba8c <_read_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	bfab      	itete	ge
 800b9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b9bc:	181b      	addge	r3, r3, r0
 800b9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9c2:	bfac      	ite	ge
 800b9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9c6:	81a3      	strhlt	r3, [r4, #12]
 800b9c8:	bd10      	pop	{r4, pc}

0800b9ca <__swrite>:
 800b9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	898b      	ldrh	r3, [r1, #12]
 800b9d2:	05db      	lsls	r3, r3, #23
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	4616      	mov	r6, r2
 800b9da:	d505      	bpl.n	800b9e8 <__swrite+0x1e>
 800b9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f000 f840 	bl	800ba68 <_lseek_r>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	463b      	mov	r3, r7
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fe:	f000 b857 	b.w	800bab0 <_write_r>

0800ba02 <__sseek>:
 800ba02:	b510      	push	{r4, lr}
 800ba04:	460c      	mov	r4, r1
 800ba06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0a:	f000 f82d 	bl	800ba68 <_lseek_r>
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	bf15      	itete	ne
 800ba14:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba1e:	81a3      	strheq	r3, [r4, #12]
 800ba20:	bf18      	it	ne
 800ba22:	81a3      	strhne	r3, [r4, #12]
 800ba24:	bd10      	pop	{r4, pc}

0800ba26 <__sclose>:
 800ba26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2a:	f000 b80d 	b.w	800ba48 <_close_r>

0800ba2e <memset>:
 800ba2e:	4402      	add	r2, r0
 800ba30:	4603      	mov	r3, r0
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d100      	bne.n	800ba38 <memset+0xa>
 800ba36:	4770      	bx	lr
 800ba38:	f803 1b01 	strb.w	r1, [r3], #1
 800ba3c:	e7f9      	b.n	800ba32 <memset+0x4>
	...

0800ba40 <_localeconv_r>:
 800ba40:	4800      	ldr	r0, [pc, #0]	; (800ba44 <_localeconv_r+0x4>)
 800ba42:	4770      	bx	lr
 800ba44:	20000184 	.word	0x20000184

0800ba48 <_close_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d06      	ldr	r5, [pc, #24]	; (800ba64 <_close_r+0x1c>)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	f7f7 fb7b 	bl	800314e <_close>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_close_r+0x1a>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_close_r+0x1a>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	20005498 	.word	0x20005498

0800ba68 <_lseek_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d07      	ldr	r5, [pc, #28]	; (800ba88 <_lseek_r+0x20>)
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	4608      	mov	r0, r1
 800ba70:	4611      	mov	r1, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	602a      	str	r2, [r5, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	f7f7 fb90 	bl	800319c <_lseek>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_lseek_r+0x1e>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_lseek_r+0x1e>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20005498 	.word	0x20005498

0800ba8c <_read_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d07      	ldr	r5, [pc, #28]	; (800baac <_read_r+0x20>)
 800ba90:	4604      	mov	r4, r0
 800ba92:	4608      	mov	r0, r1
 800ba94:	4611      	mov	r1, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	602a      	str	r2, [r5, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f7f7 fb1e 	bl	80030dc <_read>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_read_r+0x1e>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_read_r+0x1e>
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	20005498 	.word	0x20005498

0800bab0 <_write_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d07      	ldr	r5, [pc, #28]	; (800bad0 <_write_r+0x20>)
 800bab4:	4604      	mov	r4, r0
 800bab6:	4608      	mov	r0, r1
 800bab8:	4611      	mov	r1, r2
 800baba:	2200      	movs	r2, #0
 800babc:	602a      	str	r2, [r5, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f7f7 fb29 	bl	8003116 <_write>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_write_r+0x1e>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	b103      	cbz	r3, 800bace <_write_r+0x1e>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	20005498 	.word	0x20005498

0800bad4 <__errno>:
 800bad4:	4b01      	ldr	r3, [pc, #4]	; (800badc <__errno+0x8>)
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20000090 	.word	0x20000090

0800bae0 <__libc_init_array>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4d0d      	ldr	r5, [pc, #52]	; (800bb18 <__libc_init_array+0x38>)
 800bae4:	4c0d      	ldr	r4, [pc, #52]	; (800bb1c <__libc_init_array+0x3c>)
 800bae6:	1b64      	subs	r4, r4, r5
 800bae8:	10a4      	asrs	r4, r4, #2
 800baea:	2600      	movs	r6, #0
 800baec:	42a6      	cmp	r6, r4
 800baee:	d109      	bne.n	800bb04 <__libc_init_array+0x24>
 800baf0:	4d0b      	ldr	r5, [pc, #44]	; (800bb20 <__libc_init_array+0x40>)
 800baf2:	4c0c      	ldr	r4, [pc, #48]	; (800bb24 <__libc_init_array+0x44>)
 800baf4:	f004 fc68 	bl	80103c8 <_init>
 800baf8:	1b64      	subs	r4, r4, r5
 800bafa:	10a4      	asrs	r4, r4, #2
 800bafc:	2600      	movs	r6, #0
 800bafe:	42a6      	cmp	r6, r4
 800bb00:	d105      	bne.n	800bb0e <__libc_init_array+0x2e>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb08:	4798      	blx	r3
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	e7ee      	b.n	800baec <__libc_init_array+0xc>
 800bb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb12:	4798      	blx	r3
 800bb14:	3601      	adds	r6, #1
 800bb16:	e7f2      	b.n	800bafe <__libc_init_array+0x1e>
 800bb18:	08010ae8 	.word	0x08010ae8
 800bb1c:	08010ae8 	.word	0x08010ae8
 800bb20:	08010ae8 	.word	0x08010ae8
 800bb24:	08010aec 	.word	0x08010aec

0800bb28 <__retarget_lock_init_recursive>:
 800bb28:	4770      	bx	lr

0800bb2a <__retarget_lock_acquire_recursive>:
 800bb2a:	4770      	bx	lr

0800bb2c <__retarget_lock_release_recursive>:
 800bb2c:	4770      	bx	lr

0800bb2e <memcpy>:
 800bb2e:	440a      	add	r2, r1
 800bb30:	4291      	cmp	r1, r2
 800bb32:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb36:	d100      	bne.n	800bb3a <memcpy+0xc>
 800bb38:	4770      	bx	lr
 800bb3a:	b510      	push	{r4, lr}
 800bb3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb44:	4291      	cmp	r1, r2
 800bb46:	d1f9      	bne.n	800bb3c <memcpy+0xe>
 800bb48:	bd10      	pop	{r4, pc}
	...

0800bb4c <nanf>:
 800bb4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb54 <nanf+0x8>
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	7fc00000 	.word	0x7fc00000

0800bb58 <quorem>:
 800bb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	6903      	ldr	r3, [r0, #16]
 800bb5e:	690c      	ldr	r4, [r1, #16]
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	4607      	mov	r7, r0
 800bb64:	db7e      	blt.n	800bc64 <quorem+0x10c>
 800bb66:	3c01      	subs	r4, #1
 800bb68:	f101 0814 	add.w	r8, r1, #20
 800bb6c:	f100 0514 	add.w	r5, r0, #20
 800bb70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	429a      	cmp	r2, r3
 800bb82:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb8e:	d331      	bcc.n	800bbf4 <quorem+0x9c>
 800bb90:	f04f 0e00 	mov.w	lr, #0
 800bb94:	4640      	mov	r0, r8
 800bb96:	46ac      	mov	ip, r5
 800bb98:	46f2      	mov	sl, lr
 800bb9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb9e:	b293      	uxth	r3, r2
 800bba0:	fb06 e303 	mla	r3, r6, r3, lr
 800bba4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bba8:	0c1a      	lsrs	r2, r3, #16
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	ebaa 0303 	sub.w	r3, sl, r3
 800bbb0:	f8dc a000 	ldr.w	sl, [ip]
 800bbb4:	fa13 f38a 	uxtah	r3, r3, sl
 800bbb8:	fb06 220e 	mla	r2, r6, lr, r2
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	9b00      	ldr	r3, [sp, #0]
 800bbc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbc4:	b292      	uxth	r2, r2
 800bbc6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbce:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbd2:	4581      	cmp	r9, r0
 800bbd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbd8:	f84c 3b04 	str.w	r3, [ip], #4
 800bbdc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbe0:	d2db      	bcs.n	800bb9a <quorem+0x42>
 800bbe2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbe6:	b92b      	cbnz	r3, 800bbf4 <quorem+0x9c>
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	3b04      	subs	r3, #4
 800bbec:	429d      	cmp	r5, r3
 800bbee:	461a      	mov	r2, r3
 800bbf0:	d32c      	bcc.n	800bc4c <quorem+0xf4>
 800bbf2:	613c      	str	r4, [r7, #16]
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f001 f9ef 	bl	800cfd8 <__mcmp>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	db22      	blt.n	800bc44 <quorem+0xec>
 800bbfe:	3601      	adds	r6, #1
 800bc00:	4629      	mov	r1, r5
 800bc02:	2000      	movs	r0, #0
 800bc04:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc08:	f8d1 c000 	ldr.w	ip, [r1]
 800bc0c:	b293      	uxth	r3, r2
 800bc0e:	1ac3      	subs	r3, r0, r3
 800bc10:	0c12      	lsrs	r2, r2, #16
 800bc12:	fa13 f38c 	uxtah	r3, r3, ip
 800bc16:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc24:	45c1      	cmp	r9, r8
 800bc26:	f841 3b04 	str.w	r3, [r1], #4
 800bc2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc2e:	d2e9      	bcs.n	800bc04 <quorem+0xac>
 800bc30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc38:	b922      	cbnz	r2, 800bc44 <quorem+0xec>
 800bc3a:	3b04      	subs	r3, #4
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	461a      	mov	r2, r3
 800bc40:	d30a      	bcc.n	800bc58 <quorem+0x100>
 800bc42:	613c      	str	r4, [r7, #16]
 800bc44:	4630      	mov	r0, r6
 800bc46:	b003      	add	sp, #12
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	3b04      	subs	r3, #4
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	d1ce      	bne.n	800bbf2 <quorem+0x9a>
 800bc54:	3c01      	subs	r4, #1
 800bc56:	e7c9      	b.n	800bbec <quorem+0x94>
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	3b04      	subs	r3, #4
 800bc5c:	2a00      	cmp	r2, #0
 800bc5e:	d1f0      	bne.n	800bc42 <quorem+0xea>
 800bc60:	3c01      	subs	r4, #1
 800bc62:	e7eb      	b.n	800bc3c <quorem+0xe4>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7ee      	b.n	800bc46 <quorem+0xee>

0800bc68 <_dtoa_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	ed2d 8b04 	vpush	{d8-d9}
 800bc70:	69c5      	ldr	r5, [r0, #28]
 800bc72:	b093      	sub	sp, #76	; 0x4c
 800bc74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc78:	ec57 6b10 	vmov	r6, r7, d0
 800bc7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc80:	9107      	str	r1, [sp, #28]
 800bc82:	4604      	mov	r4, r0
 800bc84:	920a      	str	r2, [sp, #40]	; 0x28
 800bc86:	930d      	str	r3, [sp, #52]	; 0x34
 800bc88:	b975      	cbnz	r5, 800bca8 <_dtoa_r+0x40>
 800bc8a:	2010      	movs	r0, #16
 800bc8c:	f000 fe2a 	bl	800c8e4 <malloc>
 800bc90:	4602      	mov	r2, r0
 800bc92:	61e0      	str	r0, [r4, #28]
 800bc94:	b920      	cbnz	r0, 800bca0 <_dtoa_r+0x38>
 800bc96:	4bae      	ldr	r3, [pc, #696]	; (800bf50 <_dtoa_r+0x2e8>)
 800bc98:	21ef      	movs	r1, #239	; 0xef
 800bc9a:	48ae      	ldr	r0, [pc, #696]	; (800bf54 <_dtoa_r+0x2ec>)
 800bc9c:	f002 fc64 	bl	800e568 <__assert_func>
 800bca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bca4:	6005      	str	r5, [r0, #0]
 800bca6:	60c5      	str	r5, [r0, #12]
 800bca8:	69e3      	ldr	r3, [r4, #28]
 800bcaa:	6819      	ldr	r1, [r3, #0]
 800bcac:	b151      	cbz	r1, 800bcc4 <_dtoa_r+0x5c>
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	604a      	str	r2, [r1, #4]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	4093      	lsls	r3, r2
 800bcb6:	608b      	str	r3, [r1, #8]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f000 ff07 	bl	800cacc <_Bfree>
 800bcbe:	69e3      	ldr	r3, [r4, #28]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	1e3b      	subs	r3, r7, #0
 800bcc6:	bfbb      	ittet	lt
 800bcc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bccc:	9303      	strlt	r3, [sp, #12]
 800bcce:	2300      	movge	r3, #0
 800bcd0:	2201      	movlt	r2, #1
 800bcd2:	bfac      	ite	ge
 800bcd4:	f8c8 3000 	strge.w	r3, [r8]
 800bcd8:	f8c8 2000 	strlt.w	r2, [r8]
 800bcdc:	4b9e      	ldr	r3, [pc, #632]	; (800bf58 <_dtoa_r+0x2f0>)
 800bcde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bce2:	ea33 0308 	bics.w	r3, r3, r8
 800bce6:	d11b      	bne.n	800bd20 <_dtoa_r+0xb8>
 800bce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcea:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bcf4:	4333      	orrs	r3, r6
 800bcf6:	f000 8593 	beq.w	800c820 <_dtoa_r+0xbb8>
 800bcfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcfc:	b963      	cbnz	r3, 800bd18 <_dtoa_r+0xb0>
 800bcfe:	4b97      	ldr	r3, [pc, #604]	; (800bf5c <_dtoa_r+0x2f4>)
 800bd00:	e027      	b.n	800bd52 <_dtoa_r+0xea>
 800bd02:	4b97      	ldr	r3, [pc, #604]	; (800bf60 <_dtoa_r+0x2f8>)
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	3308      	adds	r3, #8
 800bd08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	9800      	ldr	r0, [sp, #0]
 800bd0e:	b013      	add	sp, #76	; 0x4c
 800bd10:	ecbd 8b04 	vpop	{d8-d9}
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	4b90      	ldr	r3, [pc, #576]	; (800bf5c <_dtoa_r+0x2f4>)
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	3303      	adds	r3, #3
 800bd1e:	e7f3      	b.n	800bd08 <_dtoa_r+0xa0>
 800bd20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd24:	2200      	movs	r2, #0
 800bd26:	ec51 0b17 	vmov	r0, r1, d7
 800bd2a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd2e:	eef0 8a67 	vmov.f32	s17, s15
 800bd32:	2300      	movs	r3, #0
 800bd34:	f7f4 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd38:	4681      	mov	r9, r0
 800bd3a:	b160      	cbz	r0, 800bd56 <_dtoa_r+0xee>
 800bd3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd3e:	2301      	movs	r3, #1
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 8568 	beq.w	800c81a <_dtoa_r+0xbb2>
 800bd4a:	4b86      	ldr	r3, [pc, #536]	; (800bf64 <_dtoa_r+0x2fc>)
 800bd4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	e7da      	b.n	800bd0c <_dtoa_r+0xa4>
 800bd56:	aa10      	add	r2, sp, #64	; 0x40
 800bd58:	a911      	add	r1, sp, #68	; 0x44
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd60:	eef0 0a68 	vmov.f32	s1, s17
 800bd64:	f001 fa4e 	bl	800d204 <__d2b>
 800bd68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd6c:	4682      	mov	sl, r0
 800bd6e:	2d00      	cmp	r5, #0
 800bd70:	d07f      	beq.n	800be72 <_dtoa_r+0x20a>
 800bd72:	ee18 3a90 	vmov	r3, s17
 800bd76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd7e:	ec51 0b18 	vmov	r0, r1, d8
 800bd82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bd8e:	4619      	mov	r1, r3
 800bd90:	2200      	movs	r2, #0
 800bd92:	4b75      	ldr	r3, [pc, #468]	; (800bf68 <_dtoa_r+0x300>)
 800bd94:	f7f4 fa78 	bl	8000288 <__aeabi_dsub>
 800bd98:	a367      	add	r3, pc, #412	; (adr r3, 800bf38 <_dtoa_r+0x2d0>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fc2b 	bl	80005f8 <__aeabi_dmul>
 800bda2:	a367      	add	r3, pc, #412	; (adr r3, 800bf40 <_dtoa_r+0x2d8>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa70 	bl	800028c <__adddf3>
 800bdac:	4606      	mov	r6, r0
 800bdae:	4628      	mov	r0, r5
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	f7f4 fbb7 	bl	8000524 <__aeabi_i2d>
 800bdb6:	a364      	add	r3, pc, #400	; (adr r3, 800bf48 <_dtoa_r+0x2e0>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fa60 	bl	800028c <__adddf3>
 800bdcc:	4606      	mov	r6, r0
 800bdce:	460f      	mov	r7, r1
 800bdd0:	f7f4 fec2 	bl	8000b58 <__aeabi_d2iz>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4683      	mov	fp, r0
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	f7f4 fe7d 	bl	8000adc <__aeabi_dcmplt>
 800bde2:	b148      	cbz	r0, 800bdf8 <_dtoa_r+0x190>
 800bde4:	4658      	mov	r0, fp
 800bde6:	f7f4 fb9d 	bl	8000524 <__aeabi_i2d>
 800bdea:	4632      	mov	r2, r6
 800bdec:	463b      	mov	r3, r7
 800bdee:	f7f4 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdf2:	b908      	cbnz	r0, 800bdf8 <_dtoa_r+0x190>
 800bdf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdf8:	f1bb 0f16 	cmp.w	fp, #22
 800bdfc:	d857      	bhi.n	800beae <_dtoa_r+0x246>
 800bdfe:	4b5b      	ldr	r3, [pc, #364]	; (800bf6c <_dtoa_r+0x304>)
 800be00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	ec51 0b18 	vmov	r0, r1, d8
 800be0c:	f7f4 fe66 	bl	8000adc <__aeabi_dcmplt>
 800be10:	2800      	cmp	r0, #0
 800be12:	d04e      	beq.n	800beb2 <_dtoa_r+0x24a>
 800be14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be18:	2300      	movs	r3, #0
 800be1a:	930c      	str	r3, [sp, #48]	; 0x30
 800be1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be1e:	1b5b      	subs	r3, r3, r5
 800be20:	1e5a      	subs	r2, r3, #1
 800be22:	bf45      	ittet	mi
 800be24:	f1c3 0301 	rsbmi	r3, r3, #1
 800be28:	9305      	strmi	r3, [sp, #20]
 800be2a:	2300      	movpl	r3, #0
 800be2c:	2300      	movmi	r3, #0
 800be2e:	9206      	str	r2, [sp, #24]
 800be30:	bf54      	ite	pl
 800be32:	9305      	strpl	r3, [sp, #20]
 800be34:	9306      	strmi	r3, [sp, #24]
 800be36:	f1bb 0f00 	cmp.w	fp, #0
 800be3a:	db3c      	blt.n	800beb6 <_dtoa_r+0x24e>
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be42:	445b      	add	r3, fp
 800be44:	9306      	str	r3, [sp, #24]
 800be46:	2300      	movs	r3, #0
 800be48:	9308      	str	r3, [sp, #32]
 800be4a:	9b07      	ldr	r3, [sp, #28]
 800be4c:	2b09      	cmp	r3, #9
 800be4e:	d868      	bhi.n	800bf22 <_dtoa_r+0x2ba>
 800be50:	2b05      	cmp	r3, #5
 800be52:	bfc4      	itt	gt
 800be54:	3b04      	subgt	r3, #4
 800be56:	9307      	strgt	r3, [sp, #28]
 800be58:	9b07      	ldr	r3, [sp, #28]
 800be5a:	f1a3 0302 	sub.w	r3, r3, #2
 800be5e:	bfcc      	ite	gt
 800be60:	2500      	movgt	r5, #0
 800be62:	2501      	movle	r5, #1
 800be64:	2b03      	cmp	r3, #3
 800be66:	f200 8085 	bhi.w	800bf74 <_dtoa_r+0x30c>
 800be6a:	e8df f003 	tbb	[pc, r3]
 800be6e:	3b2e      	.short	0x3b2e
 800be70:	5839      	.short	0x5839
 800be72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be76:	441d      	add	r5, r3
 800be78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be7c:	2b20      	cmp	r3, #32
 800be7e:	bfc1      	itttt	gt
 800be80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be84:	fa08 f803 	lslgt.w	r8, r8, r3
 800be88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800be8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be90:	bfd6      	itet	le
 800be92:	f1c3 0320 	rsble	r3, r3, #32
 800be96:	ea48 0003 	orrgt.w	r0, r8, r3
 800be9a:	fa06 f003 	lslle.w	r0, r6, r3
 800be9e:	f7f4 fb31 	bl	8000504 <__aeabi_ui2d>
 800bea2:	2201      	movs	r2, #1
 800bea4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bea8:	3d01      	subs	r5, #1
 800beaa:	920e      	str	r2, [sp, #56]	; 0x38
 800beac:	e76f      	b.n	800bd8e <_dtoa_r+0x126>
 800beae:	2301      	movs	r3, #1
 800beb0:	e7b3      	b.n	800be1a <_dtoa_r+0x1b2>
 800beb2:	900c      	str	r0, [sp, #48]	; 0x30
 800beb4:	e7b2      	b.n	800be1c <_dtoa_r+0x1b4>
 800beb6:	9b05      	ldr	r3, [sp, #20]
 800beb8:	eba3 030b 	sub.w	r3, r3, fp
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	f1cb 0300 	rsb	r3, fp, #0
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	2300      	movs	r3, #0
 800bec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec8:	e7bf      	b.n	800be4a <_dtoa_r+0x1e2>
 800beca:	2300      	movs	r3, #0
 800becc:	9309      	str	r3, [sp, #36]	; 0x24
 800bece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc52      	bgt.n	800bf7a <_dtoa_r+0x312>
 800bed4:	2301      	movs	r3, #1
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	461a      	mov	r2, r3
 800bedc:	920a      	str	r2, [sp, #40]	; 0x28
 800bede:	e00b      	b.n	800bef8 <_dtoa_r+0x290>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e7f3      	b.n	800becc <_dtoa_r+0x264>
 800bee4:	2300      	movs	r3, #0
 800bee6:	9309      	str	r3, [sp, #36]	; 0x24
 800bee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beea:	445b      	add	r3, fp
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	3301      	adds	r3, #1
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	bfb8      	it	lt
 800bef6:	2301      	movlt	r3, #1
 800bef8:	69e0      	ldr	r0, [r4, #28]
 800befa:	2100      	movs	r1, #0
 800befc:	2204      	movs	r2, #4
 800befe:	f102 0614 	add.w	r6, r2, #20
 800bf02:	429e      	cmp	r6, r3
 800bf04:	d93d      	bls.n	800bf82 <_dtoa_r+0x31a>
 800bf06:	6041      	str	r1, [r0, #4]
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fd9f 	bl	800ca4c <_Balloc>
 800bf0e:	9000      	str	r0, [sp, #0]
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d139      	bne.n	800bf88 <_dtoa_r+0x320>
 800bf14:	4b16      	ldr	r3, [pc, #88]	; (800bf70 <_dtoa_r+0x308>)
 800bf16:	4602      	mov	r2, r0
 800bf18:	f240 11af 	movw	r1, #431	; 0x1af
 800bf1c:	e6bd      	b.n	800bc9a <_dtoa_r+0x32>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e7e1      	b.n	800bee6 <_dtoa_r+0x27e>
 800bf22:	2501      	movs	r5, #1
 800bf24:	2300      	movs	r3, #0
 800bf26:	9307      	str	r3, [sp, #28]
 800bf28:	9509      	str	r5, [sp, #36]	; 0x24
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2e:	9301      	str	r3, [sp, #4]
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	2200      	movs	r2, #0
 800bf34:	2312      	movs	r3, #18
 800bf36:	e7d1      	b.n	800bedc <_dtoa_r+0x274>
 800bf38:	636f4361 	.word	0x636f4361
 800bf3c:	3fd287a7 	.word	0x3fd287a7
 800bf40:	8b60c8b3 	.word	0x8b60c8b3
 800bf44:	3fc68a28 	.word	0x3fc68a28
 800bf48:	509f79fb 	.word	0x509f79fb
 800bf4c:	3fd34413 	.word	0x3fd34413
 800bf50:	08010623 	.word	0x08010623
 800bf54:	0801063a 	.word	0x0801063a
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	0801061f 	.word	0x0801061f
 800bf60:	08010616 	.word	0x08010616
 800bf64:	080105ee 	.word	0x080105ee
 800bf68:	3ff80000 	.word	0x3ff80000
 800bf6c:	08010728 	.word	0x08010728
 800bf70:	08010692 	.word	0x08010692
 800bf74:	2301      	movs	r3, #1
 800bf76:	9309      	str	r3, [sp, #36]	; 0x24
 800bf78:	e7d7      	b.n	800bf2a <_dtoa_r+0x2c2>
 800bf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	e7ba      	b.n	800bef8 <_dtoa_r+0x290>
 800bf82:	3101      	adds	r1, #1
 800bf84:	0052      	lsls	r2, r2, #1
 800bf86:	e7ba      	b.n	800befe <_dtoa_r+0x296>
 800bf88:	69e3      	ldr	r3, [r4, #28]
 800bf8a:	9a00      	ldr	r2, [sp, #0]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	9b04      	ldr	r3, [sp, #16]
 800bf90:	2b0e      	cmp	r3, #14
 800bf92:	f200 80a8 	bhi.w	800c0e6 <_dtoa_r+0x47e>
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	f000 80a5 	beq.w	800c0e6 <_dtoa_r+0x47e>
 800bf9c:	f1bb 0f00 	cmp.w	fp, #0
 800bfa0:	dd38      	ble.n	800c014 <_dtoa_r+0x3ac>
 800bfa2:	4bc0      	ldr	r3, [pc, #768]	; (800c2a4 <_dtoa_r+0x63c>)
 800bfa4:	f00b 020f 	and.w	r2, fp, #15
 800bfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfb8:	d019      	beq.n	800bfee <_dtoa_r+0x386>
 800bfba:	4bbb      	ldr	r3, [pc, #748]	; (800c2a8 <_dtoa_r+0x640>)
 800bfbc:	ec51 0b18 	vmov	r0, r1, d8
 800bfc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc4:	f7f4 fc42 	bl	800084c <__aeabi_ddiv>
 800bfc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfcc:	f008 080f 	and.w	r8, r8, #15
 800bfd0:	2503      	movs	r5, #3
 800bfd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2a8 <_dtoa_r+0x640>
 800bfd6:	f1b8 0f00 	cmp.w	r8, #0
 800bfda:	d10a      	bne.n	800bff2 <_dtoa_r+0x38a>
 800bfdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	f7f4 fc32 	bl	800084c <__aeabi_ddiv>
 800bfe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfec:	e02b      	b.n	800c046 <_dtoa_r+0x3de>
 800bfee:	2502      	movs	r5, #2
 800bff0:	e7ef      	b.n	800bfd2 <_dtoa_r+0x36a>
 800bff2:	f018 0f01 	tst.w	r8, #1
 800bff6:	d008      	beq.n	800c00a <_dtoa_r+0x3a2>
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c000:	f7f4 fafa 	bl	80005f8 <__aeabi_dmul>
 800c004:	3501      	adds	r5, #1
 800c006:	4606      	mov	r6, r0
 800c008:	460f      	mov	r7, r1
 800c00a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c00e:	f109 0908 	add.w	r9, r9, #8
 800c012:	e7e0      	b.n	800bfd6 <_dtoa_r+0x36e>
 800c014:	f000 809f 	beq.w	800c156 <_dtoa_r+0x4ee>
 800c018:	f1cb 0600 	rsb	r6, fp, #0
 800c01c:	4ba1      	ldr	r3, [pc, #644]	; (800c2a4 <_dtoa_r+0x63c>)
 800c01e:	4fa2      	ldr	r7, [pc, #648]	; (800c2a8 <_dtoa_r+0x640>)
 800c020:	f006 020f 	and.w	r2, r6, #15
 800c024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	ec51 0b18 	vmov	r0, r1, d8
 800c030:	f7f4 fae2 	bl	80005f8 <__aeabi_dmul>
 800c034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c038:	1136      	asrs	r6, r6, #4
 800c03a:	2300      	movs	r3, #0
 800c03c:	2502      	movs	r5, #2
 800c03e:	2e00      	cmp	r6, #0
 800c040:	d17e      	bne.n	800c140 <_dtoa_r+0x4d8>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1d0      	bne.n	800bfe8 <_dtoa_r+0x380>
 800c046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c048:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 8084 	beq.w	800c15a <_dtoa_r+0x4f2>
 800c052:	4b96      	ldr	r3, [pc, #600]	; (800c2ac <_dtoa_r+0x644>)
 800c054:	2200      	movs	r2, #0
 800c056:	4640      	mov	r0, r8
 800c058:	4649      	mov	r1, r9
 800c05a:	f7f4 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d07b      	beq.n	800c15a <_dtoa_r+0x4f2>
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d078      	beq.n	800c15a <_dtoa_r+0x4f2>
 800c068:	9b01      	ldr	r3, [sp, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dd39      	ble.n	800c0e2 <_dtoa_r+0x47a>
 800c06e:	4b90      	ldr	r3, [pc, #576]	; (800c2b0 <_dtoa_r+0x648>)
 800c070:	2200      	movs	r2, #0
 800c072:	4640      	mov	r0, r8
 800c074:	4649      	mov	r1, r9
 800c076:	f7f4 fabf 	bl	80005f8 <__aeabi_dmul>
 800c07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c07e:	9e01      	ldr	r6, [sp, #4]
 800c080:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c084:	3501      	adds	r5, #1
 800c086:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c08a:	4628      	mov	r0, r5
 800c08c:	f7f4 fa4a 	bl	8000524 <__aeabi_i2d>
 800c090:	4642      	mov	r2, r8
 800c092:	464b      	mov	r3, r9
 800c094:	f7f4 fab0 	bl	80005f8 <__aeabi_dmul>
 800c098:	4b86      	ldr	r3, [pc, #536]	; (800c2b4 <_dtoa_r+0x64c>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	f7f4 f8f6 	bl	800028c <__adddf3>
 800c0a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a8:	9303      	str	r3, [sp, #12]
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	d158      	bne.n	800c160 <_dtoa_r+0x4f8>
 800c0ae:	4b82      	ldr	r3, [pc, #520]	; (800c2b8 <_dtoa_r+0x650>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	f7f4 f8e7 	bl	8000288 <__aeabi_dsub>
 800c0ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	f7f4 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f040 8296 	bne.w	800c5f8 <_dtoa_r+0x990>
 800c0cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fd00 	bl	8000adc <__aeabi_dcmplt>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f040 8289 	bne.w	800c5f4 <_dtoa_r+0x98c>
 800c0e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f2c0 814e 	blt.w	800c38a <_dtoa_r+0x722>
 800c0ee:	f1bb 0f0e 	cmp.w	fp, #14
 800c0f2:	f300 814a 	bgt.w	800c38a <_dtoa_r+0x722>
 800c0f6:	4b6b      	ldr	r3, [pc, #428]	; (800c2a4 <_dtoa_r+0x63c>)
 800c0f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c102:	2b00      	cmp	r3, #0
 800c104:	f280 80dc 	bge.w	800c2c0 <_dtoa_r+0x658>
 800c108:	9b04      	ldr	r3, [sp, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f300 80d8 	bgt.w	800c2c0 <_dtoa_r+0x658>
 800c110:	f040 826f 	bne.w	800c5f2 <_dtoa_r+0x98a>
 800c114:	4b68      	ldr	r3, [pc, #416]	; (800c2b8 <_dtoa_r+0x650>)
 800c116:	2200      	movs	r2, #0
 800c118:	4640      	mov	r0, r8
 800c11a:	4649      	mov	r1, r9
 800c11c:	f7f4 fa6c 	bl	80005f8 <__aeabi_dmul>
 800c120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c124:	f7f4 fcee 	bl	8000b04 <__aeabi_dcmpge>
 800c128:	9e04      	ldr	r6, [sp, #16]
 800c12a:	4637      	mov	r7, r6
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f040 8245 	bne.w	800c5bc <_dtoa_r+0x954>
 800c132:	9d00      	ldr	r5, [sp, #0]
 800c134:	2331      	movs	r3, #49	; 0x31
 800c136:	f805 3b01 	strb.w	r3, [r5], #1
 800c13a:	f10b 0b01 	add.w	fp, fp, #1
 800c13e:	e241      	b.n	800c5c4 <_dtoa_r+0x95c>
 800c140:	07f2      	lsls	r2, r6, #31
 800c142:	d505      	bpl.n	800c150 <_dtoa_r+0x4e8>
 800c144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c148:	f7f4 fa56 	bl	80005f8 <__aeabi_dmul>
 800c14c:	3501      	adds	r5, #1
 800c14e:	2301      	movs	r3, #1
 800c150:	1076      	asrs	r6, r6, #1
 800c152:	3708      	adds	r7, #8
 800c154:	e773      	b.n	800c03e <_dtoa_r+0x3d6>
 800c156:	2502      	movs	r5, #2
 800c158:	e775      	b.n	800c046 <_dtoa_r+0x3de>
 800c15a:	9e04      	ldr	r6, [sp, #16]
 800c15c:	465f      	mov	r7, fp
 800c15e:	e792      	b.n	800c086 <_dtoa_r+0x41e>
 800c160:	9900      	ldr	r1, [sp, #0]
 800c162:	4b50      	ldr	r3, [pc, #320]	; (800c2a4 <_dtoa_r+0x63c>)
 800c164:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c168:	4431      	add	r1, r6
 800c16a:	9102      	str	r1, [sp, #8]
 800c16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c16e:	eeb0 9a47 	vmov.f32	s18, s14
 800c172:	eef0 9a67 	vmov.f32	s19, s15
 800c176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c17a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c17e:	2900      	cmp	r1, #0
 800c180:	d044      	beq.n	800c20c <_dtoa_r+0x5a4>
 800c182:	494e      	ldr	r1, [pc, #312]	; (800c2bc <_dtoa_r+0x654>)
 800c184:	2000      	movs	r0, #0
 800c186:	f7f4 fb61 	bl	800084c <__aeabi_ddiv>
 800c18a:	ec53 2b19 	vmov	r2, r3, d9
 800c18e:	f7f4 f87b 	bl	8000288 <__aeabi_dsub>
 800c192:	9d00      	ldr	r5, [sp, #0]
 800c194:	ec41 0b19 	vmov	d9, r0, r1
 800c198:	4649      	mov	r1, r9
 800c19a:	4640      	mov	r0, r8
 800c19c:	f7f4 fcdc 	bl	8000b58 <__aeabi_d2iz>
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	f7f4 f9bf 	bl	8000524 <__aeabi_i2d>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 f86b 	bl	8000288 <__aeabi_dsub>
 800c1b2:	3630      	adds	r6, #48	; 0x30
 800c1b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c1b8:	ec53 2b19 	vmov	r2, r3, d9
 800c1bc:	4680      	mov	r8, r0
 800c1be:	4689      	mov	r9, r1
 800c1c0:	f7f4 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d164      	bne.n	800c292 <_dtoa_r+0x62a>
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	464b      	mov	r3, r9
 800c1cc:	4937      	ldr	r1, [pc, #220]	; (800c2ac <_dtoa_r+0x644>)
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	ec53 2b19 	vmov	r2, r3, d9
 800c1d8:	f7f4 fc80 	bl	8000adc <__aeabi_dcmplt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f040 80b6 	bne.w	800c34e <_dtoa_r+0x6e6>
 800c1e2:	9b02      	ldr	r3, [sp, #8]
 800c1e4:	429d      	cmp	r5, r3
 800c1e6:	f43f af7c 	beq.w	800c0e2 <_dtoa_r+0x47a>
 800c1ea:	4b31      	ldr	r3, [pc, #196]	; (800c2b0 <_dtoa_r+0x648>)
 800c1ec:	ec51 0b19 	vmov	r0, r1, d9
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	4b2e      	ldr	r3, [pc, #184]	; (800c2b0 <_dtoa_r+0x648>)
 800c1f8:	ec41 0b19 	vmov	d9, r0, r1
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	4640      	mov	r0, r8
 800c200:	4649      	mov	r1, r9
 800c202:	f7f4 f9f9 	bl	80005f8 <__aeabi_dmul>
 800c206:	4680      	mov	r8, r0
 800c208:	4689      	mov	r9, r1
 800c20a:	e7c5      	b.n	800c198 <_dtoa_r+0x530>
 800c20c:	ec51 0b17 	vmov	r0, r1, d7
 800c210:	f7f4 f9f2 	bl	80005f8 <__aeabi_dmul>
 800c214:	9b02      	ldr	r3, [sp, #8]
 800c216:	9d00      	ldr	r5, [sp, #0]
 800c218:	930f      	str	r3, [sp, #60]	; 0x3c
 800c21a:	ec41 0b19 	vmov	d9, r0, r1
 800c21e:	4649      	mov	r1, r9
 800c220:	4640      	mov	r0, r8
 800c222:	f7f4 fc99 	bl	8000b58 <__aeabi_d2iz>
 800c226:	4606      	mov	r6, r0
 800c228:	f7f4 f97c 	bl	8000524 <__aeabi_i2d>
 800c22c:	3630      	adds	r6, #48	; 0x30
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4640      	mov	r0, r8
 800c234:	4649      	mov	r1, r9
 800c236:	f7f4 f827 	bl	8000288 <__aeabi_dsub>
 800c23a:	f805 6b01 	strb.w	r6, [r5], #1
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	429d      	cmp	r5, r3
 800c242:	4680      	mov	r8, r0
 800c244:	4689      	mov	r9, r1
 800c246:	f04f 0200 	mov.w	r2, #0
 800c24a:	d124      	bne.n	800c296 <_dtoa_r+0x62e>
 800c24c:	4b1b      	ldr	r3, [pc, #108]	; (800c2bc <_dtoa_r+0x654>)
 800c24e:	ec51 0b19 	vmov	r0, r1, d9
 800c252:	f7f4 f81b 	bl	800028c <__adddf3>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4640      	mov	r0, r8
 800c25c:	4649      	mov	r1, r9
 800c25e:	f7f4 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 800c262:	2800      	cmp	r0, #0
 800c264:	d173      	bne.n	800c34e <_dtoa_r+0x6e6>
 800c266:	ec53 2b19 	vmov	r2, r3, d9
 800c26a:	4914      	ldr	r1, [pc, #80]	; (800c2bc <_dtoa_r+0x654>)
 800c26c:	2000      	movs	r0, #0
 800c26e:	f7f4 f80b 	bl	8000288 <__aeabi_dsub>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4640      	mov	r0, r8
 800c278:	4649      	mov	r1, r9
 800c27a:	f7f4 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800c27e:	2800      	cmp	r0, #0
 800c280:	f43f af2f 	beq.w	800c0e2 <_dtoa_r+0x47a>
 800c284:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c286:	1e6b      	subs	r3, r5, #1
 800c288:	930f      	str	r3, [sp, #60]	; 0x3c
 800c28a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c28e:	2b30      	cmp	r3, #48	; 0x30
 800c290:	d0f8      	beq.n	800c284 <_dtoa_r+0x61c>
 800c292:	46bb      	mov	fp, r7
 800c294:	e04a      	b.n	800c32c <_dtoa_r+0x6c4>
 800c296:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <_dtoa_r+0x648>)
 800c298:	f7f4 f9ae 	bl	80005f8 <__aeabi_dmul>
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	e7bd      	b.n	800c21e <_dtoa_r+0x5b6>
 800c2a2:	bf00      	nop
 800c2a4:	08010728 	.word	0x08010728
 800c2a8:	08010700 	.word	0x08010700
 800c2ac:	3ff00000 	.word	0x3ff00000
 800c2b0:	40240000 	.word	0x40240000
 800c2b4:	401c0000 	.word	0x401c0000
 800c2b8:	40140000 	.word	0x40140000
 800c2bc:	3fe00000 	.word	0x3fe00000
 800c2c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2c4:	9d00      	ldr	r5, [sp, #0]
 800c2c6:	4642      	mov	r2, r8
 800c2c8:	464b      	mov	r3, r9
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f4 fabd 	bl	800084c <__aeabi_ddiv>
 800c2d2:	f7f4 fc41 	bl	8000b58 <__aeabi_d2iz>
 800c2d6:	9001      	str	r0, [sp, #4]
 800c2d8:	f7f4 f924 	bl	8000524 <__aeabi_i2d>
 800c2dc:	4642      	mov	r2, r8
 800c2de:	464b      	mov	r3, r9
 800c2e0:	f7f4 f98a 	bl	80005f8 <__aeabi_dmul>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	f7f3 ffcc 	bl	8000288 <__aeabi_dsub>
 800c2f0:	9e01      	ldr	r6, [sp, #4]
 800c2f2:	9f04      	ldr	r7, [sp, #16]
 800c2f4:	3630      	adds	r6, #48	; 0x30
 800c2f6:	f805 6b01 	strb.w	r6, [r5], #1
 800c2fa:	9e00      	ldr	r6, [sp, #0]
 800c2fc:	1bae      	subs	r6, r5, r6
 800c2fe:	42b7      	cmp	r7, r6
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	d134      	bne.n	800c370 <_dtoa_r+0x708>
 800c306:	f7f3 ffc1 	bl	800028c <__adddf3>
 800c30a:	4642      	mov	r2, r8
 800c30c:	464b      	mov	r3, r9
 800c30e:	4606      	mov	r6, r0
 800c310:	460f      	mov	r7, r1
 800c312:	f7f4 fc01 	bl	8000b18 <__aeabi_dcmpgt>
 800c316:	b9c8      	cbnz	r0, 800c34c <_dtoa_r+0x6e4>
 800c318:	4642      	mov	r2, r8
 800c31a:	464b      	mov	r3, r9
 800c31c:	4630      	mov	r0, r6
 800c31e:	4639      	mov	r1, r7
 800c320:	f7f4 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c324:	b110      	cbz	r0, 800c32c <_dtoa_r+0x6c4>
 800c326:	9b01      	ldr	r3, [sp, #4]
 800c328:	07db      	lsls	r3, r3, #31
 800c32a:	d40f      	bmi.n	800c34c <_dtoa_r+0x6e4>
 800c32c:	4651      	mov	r1, sl
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fbcc 	bl	800cacc <_Bfree>
 800c334:	2300      	movs	r3, #0
 800c336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c338:	702b      	strb	r3, [r5, #0]
 800c33a:	f10b 0301 	add.w	r3, fp, #1
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c342:	2b00      	cmp	r3, #0
 800c344:	f43f ace2 	beq.w	800bd0c <_dtoa_r+0xa4>
 800c348:	601d      	str	r5, [r3, #0]
 800c34a:	e4df      	b.n	800bd0c <_dtoa_r+0xa4>
 800c34c:	465f      	mov	r7, fp
 800c34e:	462b      	mov	r3, r5
 800c350:	461d      	mov	r5, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a39      	cmp	r2, #57	; 0x39
 800c358:	d106      	bne.n	800c368 <_dtoa_r+0x700>
 800c35a:	9a00      	ldr	r2, [sp, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d1f7      	bne.n	800c350 <_dtoa_r+0x6e8>
 800c360:	9900      	ldr	r1, [sp, #0]
 800c362:	2230      	movs	r2, #48	; 0x30
 800c364:	3701      	adds	r7, #1
 800c366:	700a      	strb	r2, [r1, #0]
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	3201      	adds	r2, #1
 800c36c:	701a      	strb	r2, [r3, #0]
 800c36e:	e790      	b.n	800c292 <_dtoa_r+0x62a>
 800c370:	4ba3      	ldr	r3, [pc, #652]	; (800c600 <_dtoa_r+0x998>)
 800c372:	2200      	movs	r2, #0
 800c374:	f7f4 f940 	bl	80005f8 <__aeabi_dmul>
 800c378:	2200      	movs	r2, #0
 800c37a:	2300      	movs	r3, #0
 800c37c:	4606      	mov	r6, r0
 800c37e:	460f      	mov	r7, r1
 800c380:	f7f4 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c384:	2800      	cmp	r0, #0
 800c386:	d09e      	beq.n	800c2c6 <_dtoa_r+0x65e>
 800c388:	e7d0      	b.n	800c32c <_dtoa_r+0x6c4>
 800c38a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c38c:	2a00      	cmp	r2, #0
 800c38e:	f000 80ca 	beq.w	800c526 <_dtoa_r+0x8be>
 800c392:	9a07      	ldr	r2, [sp, #28]
 800c394:	2a01      	cmp	r2, #1
 800c396:	f300 80ad 	bgt.w	800c4f4 <_dtoa_r+0x88c>
 800c39a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	f000 80a5 	beq.w	800c4ec <_dtoa_r+0x884>
 800c3a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3a6:	9e08      	ldr	r6, [sp, #32]
 800c3a8:	9d05      	ldr	r5, [sp, #20]
 800c3aa:	9a05      	ldr	r2, [sp, #20]
 800c3ac:	441a      	add	r2, r3
 800c3ae:	9205      	str	r2, [sp, #20]
 800c3b0:	9a06      	ldr	r2, [sp, #24]
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	9206      	str	r2, [sp, #24]
 800c3ba:	f000 fc87 	bl	800cccc <__i2b>
 800c3be:	4607      	mov	r7, r0
 800c3c0:	b165      	cbz	r5, 800c3dc <_dtoa_r+0x774>
 800c3c2:	9b06      	ldr	r3, [sp, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	dd09      	ble.n	800c3dc <_dtoa_r+0x774>
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	9a05      	ldr	r2, [sp, #20]
 800c3cc:	bfa8      	it	ge
 800c3ce:	462b      	movge	r3, r5
 800c3d0:	1ad2      	subs	r2, r2, r3
 800c3d2:	9205      	str	r2, [sp, #20]
 800c3d4:	9a06      	ldr	r2, [sp, #24]
 800c3d6:	1aed      	subs	r5, r5, r3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	9b08      	ldr	r3, [sp, #32]
 800c3de:	b1f3      	cbz	r3, 800c41e <_dtoa_r+0x7b6>
 800c3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80a3 	beq.w	800c52e <_dtoa_r+0x8c6>
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	dd10      	ble.n	800c40e <_dtoa_r+0x7a6>
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 fd2b 	bl	800ce4c <__pow5mult>
 800c3f6:	4652      	mov	r2, sl
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4607      	mov	r7, r0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fc7b 	bl	800ccf8 <__multiply>
 800c402:	4651      	mov	r1, sl
 800c404:	4680      	mov	r8, r0
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fb60 	bl	800cacc <_Bfree>
 800c40c:	46c2      	mov	sl, r8
 800c40e:	9b08      	ldr	r3, [sp, #32]
 800c410:	1b9a      	subs	r2, r3, r6
 800c412:	d004      	beq.n	800c41e <_dtoa_r+0x7b6>
 800c414:	4651      	mov	r1, sl
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fd18 	bl	800ce4c <__pow5mult>
 800c41c:	4682      	mov	sl, r0
 800c41e:	2101      	movs	r1, #1
 800c420:	4620      	mov	r0, r4
 800c422:	f000 fc53 	bl	800cccc <__i2b>
 800c426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	4606      	mov	r6, r0
 800c42c:	f340 8081 	ble.w	800c532 <_dtoa_r+0x8ca>
 800c430:	461a      	mov	r2, r3
 800c432:	4601      	mov	r1, r0
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fd09 	bl	800ce4c <__pow5mult>
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	4606      	mov	r6, r0
 800c440:	dd7a      	ble.n	800c538 <_dtoa_r+0x8d0>
 800c442:	f04f 0800 	mov.w	r8, #0
 800c446:	6933      	ldr	r3, [r6, #16]
 800c448:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c44c:	6918      	ldr	r0, [r3, #16]
 800c44e:	f000 fbef 	bl	800cc30 <__hi0bits>
 800c452:	f1c0 0020 	rsb	r0, r0, #32
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	4418      	add	r0, r3
 800c45a:	f010 001f 	ands.w	r0, r0, #31
 800c45e:	f000 8094 	beq.w	800c58a <_dtoa_r+0x922>
 800c462:	f1c0 0320 	rsb	r3, r0, #32
 800c466:	2b04      	cmp	r3, #4
 800c468:	f340 8085 	ble.w	800c576 <_dtoa_r+0x90e>
 800c46c:	9b05      	ldr	r3, [sp, #20]
 800c46e:	f1c0 001c 	rsb	r0, r0, #28
 800c472:	4403      	add	r3, r0
 800c474:	9305      	str	r3, [sp, #20]
 800c476:	9b06      	ldr	r3, [sp, #24]
 800c478:	4403      	add	r3, r0
 800c47a:	4405      	add	r5, r0
 800c47c:	9306      	str	r3, [sp, #24]
 800c47e:	9b05      	ldr	r3, [sp, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	dd05      	ble.n	800c490 <_dtoa_r+0x828>
 800c484:	4651      	mov	r1, sl
 800c486:	461a      	mov	r2, r3
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fd39 	bl	800cf00 <__lshift>
 800c48e:	4682      	mov	sl, r0
 800c490:	9b06      	ldr	r3, [sp, #24]
 800c492:	2b00      	cmp	r3, #0
 800c494:	dd05      	ble.n	800c4a2 <_dtoa_r+0x83a>
 800c496:	4631      	mov	r1, r6
 800c498:	461a      	mov	r2, r3
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fd30 	bl	800cf00 <__lshift>
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d072      	beq.n	800c58e <_dtoa_r+0x926>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	f000 fd94 	bl	800cfd8 <__mcmp>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	da6c      	bge.n	800c58e <_dtoa_r+0x926>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4651      	mov	r1, sl
 800c4b8:	220a      	movs	r2, #10
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 fb28 	bl	800cb10 <__multadd>
 800c4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4c6:	4682      	mov	sl, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 81b0 	beq.w	800c82e <_dtoa_r+0xbc6>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	220a      	movs	r2, #10
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fb1b 	bl	800cb10 <__multadd>
 800c4da:	9b01      	ldr	r3, [sp, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	4607      	mov	r7, r0
 800c4e0:	f300 8096 	bgt.w	800c610 <_dtoa_r+0x9a8>
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	dc59      	bgt.n	800c59e <_dtoa_r+0x936>
 800c4ea:	e091      	b.n	800c610 <_dtoa_r+0x9a8>
 800c4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4f2:	e758      	b.n	800c3a6 <_dtoa_r+0x73e>
 800c4f4:	9b04      	ldr	r3, [sp, #16]
 800c4f6:	1e5e      	subs	r6, r3, #1
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	42b3      	cmp	r3, r6
 800c4fc:	bfbf      	itttt	lt
 800c4fe:	9b08      	ldrlt	r3, [sp, #32]
 800c500:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c502:	9608      	strlt	r6, [sp, #32]
 800c504:	1af3      	sublt	r3, r6, r3
 800c506:	bfb4      	ite	lt
 800c508:	18d2      	addlt	r2, r2, r3
 800c50a:	1b9e      	subge	r6, r3, r6
 800c50c:	9b04      	ldr	r3, [sp, #16]
 800c50e:	bfbc      	itt	lt
 800c510:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c512:	2600      	movlt	r6, #0
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfb7      	itett	lt
 800c518:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c51c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c520:	1a9d      	sublt	r5, r3, r2
 800c522:	2300      	movlt	r3, #0
 800c524:	e741      	b.n	800c3aa <_dtoa_r+0x742>
 800c526:	9e08      	ldr	r6, [sp, #32]
 800c528:	9d05      	ldr	r5, [sp, #20]
 800c52a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c52c:	e748      	b.n	800c3c0 <_dtoa_r+0x758>
 800c52e:	9a08      	ldr	r2, [sp, #32]
 800c530:	e770      	b.n	800c414 <_dtoa_r+0x7ac>
 800c532:	9b07      	ldr	r3, [sp, #28]
 800c534:	2b01      	cmp	r3, #1
 800c536:	dc19      	bgt.n	800c56c <_dtoa_r+0x904>
 800c538:	9b02      	ldr	r3, [sp, #8]
 800c53a:	b9bb      	cbnz	r3, 800c56c <_dtoa_r+0x904>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c542:	b99b      	cbnz	r3, 800c56c <_dtoa_r+0x904>
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c54a:	0d1b      	lsrs	r3, r3, #20
 800c54c:	051b      	lsls	r3, r3, #20
 800c54e:	b183      	cbz	r3, 800c572 <_dtoa_r+0x90a>
 800c550:	9b05      	ldr	r3, [sp, #20]
 800c552:	3301      	adds	r3, #1
 800c554:	9305      	str	r3, [sp, #20]
 800c556:	9b06      	ldr	r3, [sp, #24]
 800c558:	3301      	adds	r3, #1
 800c55a:	9306      	str	r3, [sp, #24]
 800c55c:	f04f 0801 	mov.w	r8, #1
 800c560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c562:	2b00      	cmp	r3, #0
 800c564:	f47f af6f 	bne.w	800c446 <_dtoa_r+0x7de>
 800c568:	2001      	movs	r0, #1
 800c56a:	e774      	b.n	800c456 <_dtoa_r+0x7ee>
 800c56c:	f04f 0800 	mov.w	r8, #0
 800c570:	e7f6      	b.n	800c560 <_dtoa_r+0x8f8>
 800c572:	4698      	mov	r8, r3
 800c574:	e7f4      	b.n	800c560 <_dtoa_r+0x8f8>
 800c576:	d082      	beq.n	800c47e <_dtoa_r+0x816>
 800c578:	9a05      	ldr	r2, [sp, #20]
 800c57a:	331c      	adds	r3, #28
 800c57c:	441a      	add	r2, r3
 800c57e:	9205      	str	r2, [sp, #20]
 800c580:	9a06      	ldr	r2, [sp, #24]
 800c582:	441a      	add	r2, r3
 800c584:	441d      	add	r5, r3
 800c586:	9206      	str	r2, [sp, #24]
 800c588:	e779      	b.n	800c47e <_dtoa_r+0x816>
 800c58a:	4603      	mov	r3, r0
 800c58c:	e7f4      	b.n	800c578 <_dtoa_r+0x910>
 800c58e:	9b04      	ldr	r3, [sp, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	dc37      	bgt.n	800c604 <_dtoa_r+0x99c>
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	2b02      	cmp	r3, #2
 800c598:	dd34      	ble.n	800c604 <_dtoa_r+0x99c>
 800c59a:	9b04      	ldr	r3, [sp, #16]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	b963      	cbnz	r3, 800c5bc <_dtoa_r+0x954>
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	2205      	movs	r2, #5
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 fab2 	bl	800cb10 <__multadd>
 800c5ac:	4601      	mov	r1, r0
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	f000 fd11 	bl	800cfd8 <__mcmp>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f73f adbb 	bgt.w	800c132 <_dtoa_r+0x4ca>
 800c5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5be:	9d00      	ldr	r5, [sp, #0]
 800c5c0:	ea6f 0b03 	mvn.w	fp, r3
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 fa7e 	bl	800cacc <_Bfree>
 800c5d0:	2f00      	cmp	r7, #0
 800c5d2:	f43f aeab 	beq.w	800c32c <_dtoa_r+0x6c4>
 800c5d6:	f1b8 0f00 	cmp.w	r8, #0
 800c5da:	d005      	beq.n	800c5e8 <_dtoa_r+0x980>
 800c5dc:	45b8      	cmp	r8, r7
 800c5de:	d003      	beq.n	800c5e8 <_dtoa_r+0x980>
 800c5e0:	4641      	mov	r1, r8
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fa72 	bl	800cacc <_Bfree>
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 fa6e 	bl	800cacc <_Bfree>
 800c5f0:	e69c      	b.n	800c32c <_dtoa_r+0x6c4>
 800c5f2:	2600      	movs	r6, #0
 800c5f4:	4637      	mov	r7, r6
 800c5f6:	e7e1      	b.n	800c5bc <_dtoa_r+0x954>
 800c5f8:	46bb      	mov	fp, r7
 800c5fa:	4637      	mov	r7, r6
 800c5fc:	e599      	b.n	800c132 <_dtoa_r+0x4ca>
 800c5fe:	bf00      	nop
 800c600:	40240000 	.word	0x40240000
 800c604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80c8 	beq.w	800c79c <_dtoa_r+0xb34>
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	2d00      	cmp	r5, #0
 800c612:	dd05      	ble.n	800c620 <_dtoa_r+0x9b8>
 800c614:	4639      	mov	r1, r7
 800c616:	462a      	mov	r2, r5
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fc71 	bl	800cf00 <__lshift>
 800c61e:	4607      	mov	r7, r0
 800c620:	f1b8 0f00 	cmp.w	r8, #0
 800c624:	d05b      	beq.n	800c6de <_dtoa_r+0xa76>
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 fa0f 	bl	800ca4c <_Balloc>
 800c62e:	4605      	mov	r5, r0
 800c630:	b928      	cbnz	r0, 800c63e <_dtoa_r+0x9d6>
 800c632:	4b83      	ldr	r3, [pc, #524]	; (800c840 <_dtoa_r+0xbd8>)
 800c634:	4602      	mov	r2, r0
 800c636:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c63a:	f7ff bb2e 	b.w	800bc9a <_dtoa_r+0x32>
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	3202      	adds	r2, #2
 800c642:	0092      	lsls	r2, r2, #2
 800c644:	f107 010c 	add.w	r1, r7, #12
 800c648:	300c      	adds	r0, #12
 800c64a:	f7ff fa70 	bl	800bb2e <memcpy>
 800c64e:	2201      	movs	r2, #1
 800c650:	4629      	mov	r1, r5
 800c652:	4620      	mov	r0, r4
 800c654:	f000 fc54 	bl	800cf00 <__lshift>
 800c658:	9b00      	ldr	r3, [sp, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c662:	4413      	add	r3, r2
 800c664:	9308      	str	r3, [sp, #32]
 800c666:	9b02      	ldr	r3, [sp, #8]
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	46b8      	mov	r8, r7
 800c66e:	9306      	str	r3, [sp, #24]
 800c670:	4607      	mov	r7, r0
 800c672:	9b04      	ldr	r3, [sp, #16]
 800c674:	4631      	mov	r1, r6
 800c676:	3b01      	subs	r3, #1
 800c678:	4650      	mov	r0, sl
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	f7ff fa6c 	bl	800bb58 <quorem>
 800c680:	4641      	mov	r1, r8
 800c682:	9002      	str	r0, [sp, #8]
 800c684:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c688:	4650      	mov	r0, sl
 800c68a:	f000 fca5 	bl	800cfd8 <__mcmp>
 800c68e:	463a      	mov	r2, r7
 800c690:	9005      	str	r0, [sp, #20]
 800c692:	4631      	mov	r1, r6
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fcbb 	bl	800d010 <__mdiff>
 800c69a:	68c2      	ldr	r2, [r0, #12]
 800c69c:	4605      	mov	r5, r0
 800c69e:	bb02      	cbnz	r2, 800c6e2 <_dtoa_r+0xa7a>
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	f000 fc98 	bl	800cfd8 <__mcmp>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b0:	f000 fa0c 	bl	800cacc <_Bfree>
 800c6b4:	9b07      	ldr	r3, [sp, #28]
 800c6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b8:	9d04      	ldr	r5, [sp, #16]
 800c6ba:	ea43 0102 	orr.w	r1, r3, r2
 800c6be:	9b06      	ldr	r3, [sp, #24]
 800c6c0:	4319      	orrs	r1, r3
 800c6c2:	d110      	bne.n	800c6e6 <_dtoa_r+0xa7e>
 800c6c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6c8:	d029      	beq.n	800c71e <_dtoa_r+0xab6>
 800c6ca:	9b05      	ldr	r3, [sp, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dd02      	ble.n	800c6d6 <_dtoa_r+0xa6e>
 800c6d0:	9b02      	ldr	r3, [sp, #8]
 800c6d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6d6:	9b01      	ldr	r3, [sp, #4]
 800c6d8:	f883 9000 	strb.w	r9, [r3]
 800c6dc:	e774      	b.n	800c5c8 <_dtoa_r+0x960>
 800c6de:	4638      	mov	r0, r7
 800c6e0:	e7ba      	b.n	800c658 <_dtoa_r+0x9f0>
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	e7e1      	b.n	800c6aa <_dtoa_r+0xa42>
 800c6e6:	9b05      	ldr	r3, [sp, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	db04      	blt.n	800c6f6 <_dtoa_r+0xa8e>
 800c6ec:	9907      	ldr	r1, [sp, #28]
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	9906      	ldr	r1, [sp, #24]
 800c6f2:	430b      	orrs	r3, r1
 800c6f4:	d120      	bne.n	800c738 <_dtoa_r+0xad0>
 800c6f6:	2a00      	cmp	r2, #0
 800c6f8:	dded      	ble.n	800c6d6 <_dtoa_r+0xa6e>
 800c6fa:	4651      	mov	r1, sl
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fbfe 	bl	800cf00 <__lshift>
 800c704:	4631      	mov	r1, r6
 800c706:	4682      	mov	sl, r0
 800c708:	f000 fc66 	bl	800cfd8 <__mcmp>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	dc03      	bgt.n	800c718 <_dtoa_r+0xab0>
 800c710:	d1e1      	bne.n	800c6d6 <_dtoa_r+0xa6e>
 800c712:	f019 0f01 	tst.w	r9, #1
 800c716:	d0de      	beq.n	800c6d6 <_dtoa_r+0xa6e>
 800c718:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c71c:	d1d8      	bne.n	800c6d0 <_dtoa_r+0xa68>
 800c71e:	9a01      	ldr	r2, [sp, #4]
 800c720:	2339      	movs	r3, #57	; 0x39
 800c722:	7013      	strb	r3, [r2, #0]
 800c724:	462b      	mov	r3, r5
 800c726:	461d      	mov	r5, r3
 800c728:	3b01      	subs	r3, #1
 800c72a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c72e:	2a39      	cmp	r2, #57	; 0x39
 800c730:	d06c      	beq.n	800c80c <_dtoa_r+0xba4>
 800c732:	3201      	adds	r2, #1
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	e747      	b.n	800c5c8 <_dtoa_r+0x960>
 800c738:	2a00      	cmp	r2, #0
 800c73a:	dd07      	ble.n	800c74c <_dtoa_r+0xae4>
 800c73c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c740:	d0ed      	beq.n	800c71e <_dtoa_r+0xab6>
 800c742:	9a01      	ldr	r2, [sp, #4]
 800c744:	f109 0301 	add.w	r3, r9, #1
 800c748:	7013      	strb	r3, [r2, #0]
 800c74a:	e73d      	b.n	800c5c8 <_dtoa_r+0x960>
 800c74c:	9b04      	ldr	r3, [sp, #16]
 800c74e:	9a08      	ldr	r2, [sp, #32]
 800c750:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c754:	4293      	cmp	r3, r2
 800c756:	d043      	beq.n	800c7e0 <_dtoa_r+0xb78>
 800c758:	4651      	mov	r1, sl
 800c75a:	2300      	movs	r3, #0
 800c75c:	220a      	movs	r2, #10
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 f9d6 	bl	800cb10 <__multadd>
 800c764:	45b8      	cmp	r8, r7
 800c766:	4682      	mov	sl, r0
 800c768:	f04f 0300 	mov.w	r3, #0
 800c76c:	f04f 020a 	mov.w	r2, #10
 800c770:	4641      	mov	r1, r8
 800c772:	4620      	mov	r0, r4
 800c774:	d107      	bne.n	800c786 <_dtoa_r+0xb1e>
 800c776:	f000 f9cb 	bl	800cb10 <__multadd>
 800c77a:	4680      	mov	r8, r0
 800c77c:	4607      	mov	r7, r0
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	3301      	adds	r3, #1
 800c782:	9304      	str	r3, [sp, #16]
 800c784:	e775      	b.n	800c672 <_dtoa_r+0xa0a>
 800c786:	f000 f9c3 	bl	800cb10 <__multadd>
 800c78a:	4639      	mov	r1, r7
 800c78c:	4680      	mov	r8, r0
 800c78e:	2300      	movs	r3, #0
 800c790:	220a      	movs	r2, #10
 800c792:	4620      	mov	r0, r4
 800c794:	f000 f9bc 	bl	800cb10 <__multadd>
 800c798:	4607      	mov	r7, r0
 800c79a:	e7f0      	b.n	800c77e <_dtoa_r+0xb16>
 800c79c:	9b04      	ldr	r3, [sp, #16]
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	9d00      	ldr	r5, [sp, #0]
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4650      	mov	r0, sl
 800c7a6:	f7ff f9d7 	bl	800bb58 <quorem>
 800c7aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7ae:	9b00      	ldr	r3, [sp, #0]
 800c7b0:	f805 9b01 	strb.w	r9, [r5], #1
 800c7b4:	1aea      	subs	r2, r5, r3
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	dd07      	ble.n	800c7cc <_dtoa_r+0xb64>
 800c7bc:	4651      	mov	r1, sl
 800c7be:	2300      	movs	r3, #0
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 f9a4 	bl	800cb10 <__multadd>
 800c7c8:	4682      	mov	sl, r0
 800c7ca:	e7ea      	b.n	800c7a2 <_dtoa_r+0xb3a>
 800c7cc:	9b01      	ldr	r3, [sp, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfc8      	it	gt
 800c7d2:	461d      	movgt	r5, r3
 800c7d4:	9b00      	ldr	r3, [sp, #0]
 800c7d6:	bfd8      	it	le
 800c7d8:	2501      	movle	r5, #1
 800c7da:	441d      	add	r5, r3
 800c7dc:	f04f 0800 	mov.w	r8, #0
 800c7e0:	4651      	mov	r1, sl
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 fb8b 	bl	800cf00 <__lshift>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	f000 fbf3 	bl	800cfd8 <__mcmp>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	dc96      	bgt.n	800c724 <_dtoa_r+0xabc>
 800c7f6:	d102      	bne.n	800c7fe <_dtoa_r+0xb96>
 800c7f8:	f019 0f01 	tst.w	r9, #1
 800c7fc:	d192      	bne.n	800c724 <_dtoa_r+0xabc>
 800c7fe:	462b      	mov	r3, r5
 800c800:	461d      	mov	r5, r3
 800c802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c806:	2a30      	cmp	r2, #48	; 0x30
 800c808:	d0fa      	beq.n	800c800 <_dtoa_r+0xb98>
 800c80a:	e6dd      	b.n	800c5c8 <_dtoa_r+0x960>
 800c80c:	9a00      	ldr	r2, [sp, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d189      	bne.n	800c726 <_dtoa_r+0xabe>
 800c812:	f10b 0b01 	add.w	fp, fp, #1
 800c816:	2331      	movs	r3, #49	; 0x31
 800c818:	e796      	b.n	800c748 <_dtoa_r+0xae0>
 800c81a:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <_dtoa_r+0xbdc>)
 800c81c:	f7ff ba99 	b.w	800bd52 <_dtoa_r+0xea>
 800c820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c822:	2b00      	cmp	r3, #0
 800c824:	f47f aa6d 	bne.w	800bd02 <_dtoa_r+0x9a>
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <_dtoa_r+0xbe0>)
 800c82a:	f7ff ba92 	b.w	800bd52 <_dtoa_r+0xea>
 800c82e:	9b01      	ldr	r3, [sp, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	dcb5      	bgt.n	800c7a0 <_dtoa_r+0xb38>
 800c834:	9b07      	ldr	r3, [sp, #28]
 800c836:	2b02      	cmp	r3, #2
 800c838:	f73f aeb1 	bgt.w	800c59e <_dtoa_r+0x936>
 800c83c:	e7b0      	b.n	800c7a0 <_dtoa_r+0xb38>
 800c83e:	bf00      	nop
 800c840:	08010692 	.word	0x08010692
 800c844:	080105ed 	.word	0x080105ed
 800c848:	08010616 	.word	0x08010616

0800c84c <_free_r>:
 800c84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c84e:	2900      	cmp	r1, #0
 800c850:	d044      	beq.n	800c8dc <_free_r+0x90>
 800c852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c856:	9001      	str	r0, [sp, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f1a1 0404 	sub.w	r4, r1, #4
 800c85e:	bfb8      	it	lt
 800c860:	18e4      	addlt	r4, r4, r3
 800c862:	f000 f8e7 	bl	800ca34 <__malloc_lock>
 800c866:	4a1e      	ldr	r2, [pc, #120]	; (800c8e0 <_free_r+0x94>)
 800c868:	9801      	ldr	r0, [sp, #4]
 800c86a:	6813      	ldr	r3, [r2, #0]
 800c86c:	b933      	cbnz	r3, 800c87c <_free_r+0x30>
 800c86e:	6063      	str	r3, [r4, #4]
 800c870:	6014      	str	r4, [r2, #0]
 800c872:	b003      	add	sp, #12
 800c874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c878:	f000 b8e2 	b.w	800ca40 <__malloc_unlock>
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d908      	bls.n	800c892 <_free_r+0x46>
 800c880:	6825      	ldr	r5, [r4, #0]
 800c882:	1961      	adds	r1, r4, r5
 800c884:	428b      	cmp	r3, r1
 800c886:	bf01      	itttt	eq
 800c888:	6819      	ldreq	r1, [r3, #0]
 800c88a:	685b      	ldreq	r3, [r3, #4]
 800c88c:	1949      	addeq	r1, r1, r5
 800c88e:	6021      	streq	r1, [r4, #0]
 800c890:	e7ed      	b.n	800c86e <_free_r+0x22>
 800c892:	461a      	mov	r2, r3
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	b10b      	cbz	r3, 800c89c <_free_r+0x50>
 800c898:	42a3      	cmp	r3, r4
 800c89a:	d9fa      	bls.n	800c892 <_free_r+0x46>
 800c89c:	6811      	ldr	r1, [r2, #0]
 800c89e:	1855      	adds	r5, r2, r1
 800c8a0:	42a5      	cmp	r5, r4
 800c8a2:	d10b      	bne.n	800c8bc <_free_r+0x70>
 800c8a4:	6824      	ldr	r4, [r4, #0]
 800c8a6:	4421      	add	r1, r4
 800c8a8:	1854      	adds	r4, r2, r1
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	6011      	str	r1, [r2, #0]
 800c8ae:	d1e0      	bne.n	800c872 <_free_r+0x26>
 800c8b0:	681c      	ldr	r4, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	6053      	str	r3, [r2, #4]
 800c8b6:	440c      	add	r4, r1
 800c8b8:	6014      	str	r4, [r2, #0]
 800c8ba:	e7da      	b.n	800c872 <_free_r+0x26>
 800c8bc:	d902      	bls.n	800c8c4 <_free_r+0x78>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	6003      	str	r3, [r0, #0]
 800c8c2:	e7d6      	b.n	800c872 <_free_r+0x26>
 800c8c4:	6825      	ldr	r5, [r4, #0]
 800c8c6:	1961      	adds	r1, r4, r5
 800c8c8:	428b      	cmp	r3, r1
 800c8ca:	bf04      	itt	eq
 800c8cc:	6819      	ldreq	r1, [r3, #0]
 800c8ce:	685b      	ldreq	r3, [r3, #4]
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	bf04      	itt	eq
 800c8d4:	1949      	addeq	r1, r1, r5
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	6054      	str	r4, [r2, #4]
 800c8da:	e7ca      	b.n	800c872 <_free_r+0x26>
 800c8dc:	b003      	add	sp, #12
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	200054a0 	.word	0x200054a0

0800c8e4 <malloc>:
 800c8e4:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <malloc+0xc>)
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	f000 b823 	b.w	800c934 <_malloc_r>
 800c8ee:	bf00      	nop
 800c8f0:	20000090 	.word	0x20000090

0800c8f4 <sbrk_aligned>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	4e0e      	ldr	r6, [pc, #56]	; (800c930 <sbrk_aligned+0x3c>)
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	6831      	ldr	r1, [r6, #0]
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	b911      	cbnz	r1, 800c906 <sbrk_aligned+0x12>
 800c900:	f001 fe1a 	bl	800e538 <_sbrk_r>
 800c904:	6030      	str	r0, [r6, #0]
 800c906:	4621      	mov	r1, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	f001 fe15 	bl	800e538 <_sbrk_r>
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	d00a      	beq.n	800c928 <sbrk_aligned+0x34>
 800c912:	1cc4      	adds	r4, r0, #3
 800c914:	f024 0403 	bic.w	r4, r4, #3
 800c918:	42a0      	cmp	r0, r4
 800c91a:	d007      	beq.n	800c92c <sbrk_aligned+0x38>
 800c91c:	1a21      	subs	r1, r4, r0
 800c91e:	4628      	mov	r0, r5
 800c920:	f001 fe0a 	bl	800e538 <_sbrk_r>
 800c924:	3001      	adds	r0, #1
 800c926:	d101      	bne.n	800c92c <sbrk_aligned+0x38>
 800c928:	f04f 34ff 	mov.w	r4, #4294967295
 800c92c:	4620      	mov	r0, r4
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	200054a4 	.word	0x200054a4

0800c934 <_malloc_r>:
 800c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c938:	1ccd      	adds	r5, r1, #3
 800c93a:	f025 0503 	bic.w	r5, r5, #3
 800c93e:	3508      	adds	r5, #8
 800c940:	2d0c      	cmp	r5, #12
 800c942:	bf38      	it	cc
 800c944:	250c      	movcc	r5, #12
 800c946:	2d00      	cmp	r5, #0
 800c948:	4607      	mov	r7, r0
 800c94a:	db01      	blt.n	800c950 <_malloc_r+0x1c>
 800c94c:	42a9      	cmp	r1, r5
 800c94e:	d905      	bls.n	800c95c <_malloc_r+0x28>
 800c950:	230c      	movs	r3, #12
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	2600      	movs	r6, #0
 800c956:	4630      	mov	r0, r6
 800c958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c95c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca30 <_malloc_r+0xfc>
 800c960:	f000 f868 	bl	800ca34 <__malloc_lock>
 800c964:	f8d8 3000 	ldr.w	r3, [r8]
 800c968:	461c      	mov	r4, r3
 800c96a:	bb5c      	cbnz	r4, 800c9c4 <_malloc_r+0x90>
 800c96c:	4629      	mov	r1, r5
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ffc0 	bl	800c8f4 <sbrk_aligned>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	4604      	mov	r4, r0
 800c978:	d155      	bne.n	800ca26 <_malloc_r+0xf2>
 800c97a:	f8d8 4000 	ldr.w	r4, [r8]
 800c97e:	4626      	mov	r6, r4
 800c980:	2e00      	cmp	r6, #0
 800c982:	d145      	bne.n	800ca10 <_malloc_r+0xdc>
 800c984:	2c00      	cmp	r4, #0
 800c986:	d048      	beq.n	800ca1a <_malloc_r+0xe6>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	4631      	mov	r1, r6
 800c98c:	4638      	mov	r0, r7
 800c98e:	eb04 0903 	add.w	r9, r4, r3
 800c992:	f001 fdd1 	bl	800e538 <_sbrk_r>
 800c996:	4581      	cmp	r9, r0
 800c998:	d13f      	bne.n	800ca1a <_malloc_r+0xe6>
 800c99a:	6821      	ldr	r1, [r4, #0]
 800c99c:	1a6d      	subs	r5, r5, r1
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f7ff ffa7 	bl	800c8f4 <sbrk_aligned>
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d037      	beq.n	800ca1a <_malloc_r+0xe6>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	442b      	add	r3, r5
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d038      	beq.n	800ca2a <_malloc_r+0xf6>
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	42a2      	cmp	r2, r4
 800c9bc:	d12b      	bne.n	800ca16 <_malloc_r+0xe2>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	605a      	str	r2, [r3, #4]
 800c9c2:	e00f      	b.n	800c9e4 <_malloc_r+0xb0>
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	1b52      	subs	r2, r2, r5
 800c9c8:	d41f      	bmi.n	800ca0a <_malloc_r+0xd6>
 800c9ca:	2a0b      	cmp	r2, #11
 800c9cc:	d917      	bls.n	800c9fe <_malloc_r+0xca>
 800c9ce:	1961      	adds	r1, r4, r5
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	6025      	str	r5, [r4, #0]
 800c9d4:	bf18      	it	ne
 800c9d6:	6059      	strne	r1, [r3, #4]
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	bf08      	it	eq
 800c9dc:	f8c8 1000 	streq.w	r1, [r8]
 800c9e0:	5162      	str	r2, [r4, r5]
 800c9e2:	604b      	str	r3, [r1, #4]
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	f104 060b 	add.w	r6, r4, #11
 800c9ea:	f000 f829 	bl	800ca40 <__malloc_unlock>
 800c9ee:	f026 0607 	bic.w	r6, r6, #7
 800c9f2:	1d23      	adds	r3, r4, #4
 800c9f4:	1af2      	subs	r2, r6, r3
 800c9f6:	d0ae      	beq.n	800c956 <_malloc_r+0x22>
 800c9f8:	1b9b      	subs	r3, r3, r6
 800c9fa:	50a3      	str	r3, [r4, r2]
 800c9fc:	e7ab      	b.n	800c956 <_malloc_r+0x22>
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	6862      	ldr	r2, [r4, #4]
 800ca02:	d1dd      	bne.n	800c9c0 <_malloc_r+0x8c>
 800ca04:	f8c8 2000 	str.w	r2, [r8]
 800ca08:	e7ec      	b.n	800c9e4 <_malloc_r+0xb0>
 800ca0a:	4623      	mov	r3, r4
 800ca0c:	6864      	ldr	r4, [r4, #4]
 800ca0e:	e7ac      	b.n	800c96a <_malloc_r+0x36>
 800ca10:	4634      	mov	r4, r6
 800ca12:	6876      	ldr	r6, [r6, #4]
 800ca14:	e7b4      	b.n	800c980 <_malloc_r+0x4c>
 800ca16:	4613      	mov	r3, r2
 800ca18:	e7cc      	b.n	800c9b4 <_malloc_r+0x80>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	603b      	str	r3, [r7, #0]
 800ca1e:	4638      	mov	r0, r7
 800ca20:	f000 f80e 	bl	800ca40 <__malloc_unlock>
 800ca24:	e797      	b.n	800c956 <_malloc_r+0x22>
 800ca26:	6025      	str	r5, [r4, #0]
 800ca28:	e7dc      	b.n	800c9e4 <_malloc_r+0xb0>
 800ca2a:	605b      	str	r3, [r3, #4]
 800ca2c:	deff      	udf	#255	; 0xff
 800ca2e:	bf00      	nop
 800ca30:	200054a0 	.word	0x200054a0

0800ca34 <__malloc_lock>:
 800ca34:	4801      	ldr	r0, [pc, #4]	; (800ca3c <__malloc_lock+0x8>)
 800ca36:	f7ff b878 	b.w	800bb2a <__retarget_lock_acquire_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	2000549c 	.word	0x2000549c

0800ca40 <__malloc_unlock>:
 800ca40:	4801      	ldr	r0, [pc, #4]	; (800ca48 <__malloc_unlock+0x8>)
 800ca42:	f7ff b873 	b.w	800bb2c <__retarget_lock_release_recursive>
 800ca46:	bf00      	nop
 800ca48:	2000549c 	.word	0x2000549c

0800ca4c <_Balloc>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	69c6      	ldr	r6, [r0, #28]
 800ca50:	4604      	mov	r4, r0
 800ca52:	460d      	mov	r5, r1
 800ca54:	b976      	cbnz	r6, 800ca74 <_Balloc+0x28>
 800ca56:	2010      	movs	r0, #16
 800ca58:	f7ff ff44 	bl	800c8e4 <malloc>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	61e0      	str	r0, [r4, #28]
 800ca60:	b920      	cbnz	r0, 800ca6c <_Balloc+0x20>
 800ca62:	4b18      	ldr	r3, [pc, #96]	; (800cac4 <_Balloc+0x78>)
 800ca64:	4818      	ldr	r0, [pc, #96]	; (800cac8 <_Balloc+0x7c>)
 800ca66:	216b      	movs	r1, #107	; 0x6b
 800ca68:	f001 fd7e 	bl	800e568 <__assert_func>
 800ca6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca70:	6006      	str	r6, [r0, #0]
 800ca72:	60c6      	str	r6, [r0, #12]
 800ca74:	69e6      	ldr	r6, [r4, #28]
 800ca76:	68f3      	ldr	r3, [r6, #12]
 800ca78:	b183      	cbz	r3, 800ca9c <_Balloc+0x50>
 800ca7a:	69e3      	ldr	r3, [r4, #28]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca82:	b9b8      	cbnz	r0, 800cab4 <_Balloc+0x68>
 800ca84:	2101      	movs	r1, #1
 800ca86:	fa01 f605 	lsl.w	r6, r1, r5
 800ca8a:	1d72      	adds	r2, r6, #5
 800ca8c:	0092      	lsls	r2, r2, #2
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f001 fd88 	bl	800e5a4 <_calloc_r>
 800ca94:	b160      	cbz	r0, 800cab0 <_Balloc+0x64>
 800ca96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca9a:	e00e      	b.n	800caba <_Balloc+0x6e>
 800ca9c:	2221      	movs	r2, #33	; 0x21
 800ca9e:	2104      	movs	r1, #4
 800caa0:	4620      	mov	r0, r4
 800caa2:	f001 fd7f 	bl	800e5a4 <_calloc_r>
 800caa6:	69e3      	ldr	r3, [r4, #28]
 800caa8:	60f0      	str	r0, [r6, #12]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1e4      	bne.n	800ca7a <_Balloc+0x2e>
 800cab0:	2000      	movs	r0, #0
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	6802      	ldr	r2, [r0, #0]
 800cab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caba:	2300      	movs	r3, #0
 800cabc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cac0:	e7f7      	b.n	800cab2 <_Balloc+0x66>
 800cac2:	bf00      	nop
 800cac4:	08010623 	.word	0x08010623
 800cac8:	080106a3 	.word	0x080106a3

0800cacc <_Bfree>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	69c6      	ldr	r6, [r0, #28]
 800cad0:	4605      	mov	r5, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	b976      	cbnz	r6, 800caf4 <_Bfree+0x28>
 800cad6:	2010      	movs	r0, #16
 800cad8:	f7ff ff04 	bl	800c8e4 <malloc>
 800cadc:	4602      	mov	r2, r0
 800cade:	61e8      	str	r0, [r5, #28]
 800cae0:	b920      	cbnz	r0, 800caec <_Bfree+0x20>
 800cae2:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <_Bfree+0x3c>)
 800cae4:	4809      	ldr	r0, [pc, #36]	; (800cb0c <_Bfree+0x40>)
 800cae6:	218f      	movs	r1, #143	; 0x8f
 800cae8:	f001 fd3e 	bl	800e568 <__assert_func>
 800caec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caf0:	6006      	str	r6, [r0, #0]
 800caf2:	60c6      	str	r6, [r0, #12]
 800caf4:	b13c      	cbz	r4, 800cb06 <_Bfree+0x3a>
 800caf6:	69eb      	ldr	r3, [r5, #28]
 800caf8:	6862      	ldr	r2, [r4, #4]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb00:	6021      	str	r1, [r4, #0]
 800cb02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	08010623 	.word	0x08010623
 800cb0c:	080106a3 	.word	0x080106a3

0800cb10 <__multadd>:
 800cb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb14:	690d      	ldr	r5, [r1, #16]
 800cb16:	4607      	mov	r7, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	461e      	mov	r6, r3
 800cb1c:	f101 0c14 	add.w	ip, r1, #20
 800cb20:	2000      	movs	r0, #0
 800cb22:	f8dc 3000 	ldr.w	r3, [ip]
 800cb26:	b299      	uxth	r1, r3
 800cb28:	fb02 6101 	mla	r1, r2, r1, r6
 800cb2c:	0c1e      	lsrs	r6, r3, #16
 800cb2e:	0c0b      	lsrs	r3, r1, #16
 800cb30:	fb02 3306 	mla	r3, r2, r6, r3
 800cb34:	b289      	uxth	r1, r1
 800cb36:	3001      	adds	r0, #1
 800cb38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb3c:	4285      	cmp	r5, r0
 800cb3e:	f84c 1b04 	str.w	r1, [ip], #4
 800cb42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb46:	dcec      	bgt.n	800cb22 <__multadd+0x12>
 800cb48:	b30e      	cbz	r6, 800cb8e <__multadd+0x7e>
 800cb4a:	68a3      	ldr	r3, [r4, #8]
 800cb4c:	42ab      	cmp	r3, r5
 800cb4e:	dc19      	bgt.n	800cb84 <__multadd+0x74>
 800cb50:	6861      	ldr	r1, [r4, #4]
 800cb52:	4638      	mov	r0, r7
 800cb54:	3101      	adds	r1, #1
 800cb56:	f7ff ff79 	bl	800ca4c <_Balloc>
 800cb5a:	4680      	mov	r8, r0
 800cb5c:	b928      	cbnz	r0, 800cb6a <__multadd+0x5a>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	4b0c      	ldr	r3, [pc, #48]	; (800cb94 <__multadd+0x84>)
 800cb62:	480d      	ldr	r0, [pc, #52]	; (800cb98 <__multadd+0x88>)
 800cb64:	21ba      	movs	r1, #186	; 0xba
 800cb66:	f001 fcff 	bl	800e568 <__assert_func>
 800cb6a:	6922      	ldr	r2, [r4, #16]
 800cb6c:	3202      	adds	r2, #2
 800cb6e:	f104 010c 	add.w	r1, r4, #12
 800cb72:	0092      	lsls	r2, r2, #2
 800cb74:	300c      	adds	r0, #12
 800cb76:	f7fe ffda 	bl	800bb2e <memcpy>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff ffa5 	bl	800cacc <_Bfree>
 800cb82:	4644      	mov	r4, r8
 800cb84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb88:	3501      	adds	r5, #1
 800cb8a:	615e      	str	r6, [r3, #20]
 800cb8c:	6125      	str	r5, [r4, #16]
 800cb8e:	4620      	mov	r0, r4
 800cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb94:	08010692 	.word	0x08010692
 800cb98:	080106a3 	.word	0x080106a3

0800cb9c <__s2b>:
 800cb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba0:	460c      	mov	r4, r1
 800cba2:	4615      	mov	r5, r2
 800cba4:	461f      	mov	r7, r3
 800cba6:	2209      	movs	r2, #9
 800cba8:	3308      	adds	r3, #8
 800cbaa:	4606      	mov	r6, r0
 800cbac:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	db09      	blt.n	800cbcc <__s2b+0x30>
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7ff ff47 	bl	800ca4c <_Balloc>
 800cbbe:	b940      	cbnz	r0, 800cbd2 <__s2b+0x36>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	4b19      	ldr	r3, [pc, #100]	; (800cc28 <__s2b+0x8c>)
 800cbc4:	4819      	ldr	r0, [pc, #100]	; (800cc2c <__s2b+0x90>)
 800cbc6:	21d3      	movs	r1, #211	; 0xd3
 800cbc8:	f001 fcce 	bl	800e568 <__assert_func>
 800cbcc:	0052      	lsls	r2, r2, #1
 800cbce:	3101      	adds	r1, #1
 800cbd0:	e7f0      	b.n	800cbb4 <__s2b+0x18>
 800cbd2:	9b08      	ldr	r3, [sp, #32]
 800cbd4:	6143      	str	r3, [r0, #20]
 800cbd6:	2d09      	cmp	r5, #9
 800cbd8:	f04f 0301 	mov.w	r3, #1
 800cbdc:	6103      	str	r3, [r0, #16]
 800cbde:	dd16      	ble.n	800cc0e <__s2b+0x72>
 800cbe0:	f104 0909 	add.w	r9, r4, #9
 800cbe4:	46c8      	mov	r8, r9
 800cbe6:	442c      	add	r4, r5
 800cbe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbec:	4601      	mov	r1, r0
 800cbee:	3b30      	subs	r3, #48	; 0x30
 800cbf0:	220a      	movs	r2, #10
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7ff ff8c 	bl	800cb10 <__multadd>
 800cbf8:	45a0      	cmp	r8, r4
 800cbfa:	d1f5      	bne.n	800cbe8 <__s2b+0x4c>
 800cbfc:	f1a5 0408 	sub.w	r4, r5, #8
 800cc00:	444c      	add	r4, r9
 800cc02:	1b2d      	subs	r5, r5, r4
 800cc04:	1963      	adds	r3, r4, r5
 800cc06:	42bb      	cmp	r3, r7
 800cc08:	db04      	blt.n	800cc14 <__s2b+0x78>
 800cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0e:	340a      	adds	r4, #10
 800cc10:	2509      	movs	r5, #9
 800cc12:	e7f6      	b.n	800cc02 <__s2b+0x66>
 800cc14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc18:	4601      	mov	r1, r0
 800cc1a:	3b30      	subs	r3, #48	; 0x30
 800cc1c:	220a      	movs	r2, #10
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7ff ff76 	bl	800cb10 <__multadd>
 800cc24:	e7ee      	b.n	800cc04 <__s2b+0x68>
 800cc26:	bf00      	nop
 800cc28:	08010692 	.word	0x08010692
 800cc2c:	080106a3 	.word	0x080106a3

0800cc30 <__hi0bits>:
 800cc30:	0c03      	lsrs	r3, r0, #16
 800cc32:	041b      	lsls	r3, r3, #16
 800cc34:	b9d3      	cbnz	r3, 800cc6c <__hi0bits+0x3c>
 800cc36:	0400      	lsls	r0, r0, #16
 800cc38:	2310      	movs	r3, #16
 800cc3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc3e:	bf04      	itt	eq
 800cc40:	0200      	lsleq	r0, r0, #8
 800cc42:	3308      	addeq	r3, #8
 800cc44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc48:	bf04      	itt	eq
 800cc4a:	0100      	lsleq	r0, r0, #4
 800cc4c:	3304      	addeq	r3, #4
 800cc4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc52:	bf04      	itt	eq
 800cc54:	0080      	lsleq	r0, r0, #2
 800cc56:	3302      	addeq	r3, #2
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	db05      	blt.n	800cc68 <__hi0bits+0x38>
 800cc5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc60:	f103 0301 	add.w	r3, r3, #1
 800cc64:	bf08      	it	eq
 800cc66:	2320      	moveq	r3, #32
 800cc68:	4618      	mov	r0, r3
 800cc6a:	4770      	bx	lr
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e7e4      	b.n	800cc3a <__hi0bits+0xa>

0800cc70 <__lo0bits>:
 800cc70:	6803      	ldr	r3, [r0, #0]
 800cc72:	f013 0207 	ands.w	r2, r3, #7
 800cc76:	d00c      	beq.n	800cc92 <__lo0bits+0x22>
 800cc78:	07d9      	lsls	r1, r3, #31
 800cc7a:	d422      	bmi.n	800ccc2 <__lo0bits+0x52>
 800cc7c:	079a      	lsls	r2, r3, #30
 800cc7e:	bf49      	itett	mi
 800cc80:	085b      	lsrmi	r3, r3, #1
 800cc82:	089b      	lsrpl	r3, r3, #2
 800cc84:	6003      	strmi	r3, [r0, #0]
 800cc86:	2201      	movmi	r2, #1
 800cc88:	bf5c      	itt	pl
 800cc8a:	6003      	strpl	r3, [r0, #0]
 800cc8c:	2202      	movpl	r2, #2
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4770      	bx	lr
 800cc92:	b299      	uxth	r1, r3
 800cc94:	b909      	cbnz	r1, 800cc9a <__lo0bits+0x2a>
 800cc96:	0c1b      	lsrs	r3, r3, #16
 800cc98:	2210      	movs	r2, #16
 800cc9a:	b2d9      	uxtb	r1, r3
 800cc9c:	b909      	cbnz	r1, 800cca2 <__lo0bits+0x32>
 800cc9e:	3208      	adds	r2, #8
 800cca0:	0a1b      	lsrs	r3, r3, #8
 800cca2:	0719      	lsls	r1, r3, #28
 800cca4:	bf04      	itt	eq
 800cca6:	091b      	lsreq	r3, r3, #4
 800cca8:	3204      	addeq	r2, #4
 800ccaa:	0799      	lsls	r1, r3, #30
 800ccac:	bf04      	itt	eq
 800ccae:	089b      	lsreq	r3, r3, #2
 800ccb0:	3202      	addeq	r2, #2
 800ccb2:	07d9      	lsls	r1, r3, #31
 800ccb4:	d403      	bmi.n	800ccbe <__lo0bits+0x4e>
 800ccb6:	085b      	lsrs	r3, r3, #1
 800ccb8:	f102 0201 	add.w	r2, r2, #1
 800ccbc:	d003      	beq.n	800ccc6 <__lo0bits+0x56>
 800ccbe:	6003      	str	r3, [r0, #0]
 800ccc0:	e7e5      	b.n	800cc8e <__lo0bits+0x1e>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	e7e3      	b.n	800cc8e <__lo0bits+0x1e>
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	e7e1      	b.n	800cc8e <__lo0bits+0x1e>
	...

0800cccc <__i2b>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	460c      	mov	r4, r1
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	f7ff febb 	bl	800ca4c <_Balloc>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	b928      	cbnz	r0, 800cce6 <__i2b+0x1a>
 800ccda:	4b05      	ldr	r3, [pc, #20]	; (800ccf0 <__i2b+0x24>)
 800ccdc:	4805      	ldr	r0, [pc, #20]	; (800ccf4 <__i2b+0x28>)
 800ccde:	f240 1145 	movw	r1, #325	; 0x145
 800cce2:	f001 fc41 	bl	800e568 <__assert_func>
 800cce6:	2301      	movs	r3, #1
 800cce8:	6144      	str	r4, [r0, #20]
 800ccea:	6103      	str	r3, [r0, #16]
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	bf00      	nop
 800ccf0:	08010692 	.word	0x08010692
 800ccf4:	080106a3 	.word	0x080106a3

0800ccf8 <__multiply>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	4691      	mov	r9, r2
 800ccfe:	690a      	ldr	r2, [r1, #16]
 800cd00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	bfb8      	it	lt
 800cd08:	460b      	movlt	r3, r1
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	bfbc      	itt	lt
 800cd0e:	464c      	movlt	r4, r9
 800cd10:	4699      	movlt	r9, r3
 800cd12:	6927      	ldr	r7, [r4, #16]
 800cd14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd18:	68a3      	ldr	r3, [r4, #8]
 800cd1a:	6861      	ldr	r1, [r4, #4]
 800cd1c:	eb07 060a 	add.w	r6, r7, sl
 800cd20:	42b3      	cmp	r3, r6
 800cd22:	b085      	sub	sp, #20
 800cd24:	bfb8      	it	lt
 800cd26:	3101      	addlt	r1, #1
 800cd28:	f7ff fe90 	bl	800ca4c <_Balloc>
 800cd2c:	b930      	cbnz	r0, 800cd3c <__multiply+0x44>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4b44      	ldr	r3, [pc, #272]	; (800ce44 <__multiply+0x14c>)
 800cd32:	4845      	ldr	r0, [pc, #276]	; (800ce48 <__multiply+0x150>)
 800cd34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cd38:	f001 fc16 	bl	800e568 <__assert_func>
 800cd3c:	f100 0514 	add.w	r5, r0, #20
 800cd40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd44:	462b      	mov	r3, r5
 800cd46:	2200      	movs	r2, #0
 800cd48:	4543      	cmp	r3, r8
 800cd4a:	d321      	bcc.n	800cd90 <__multiply+0x98>
 800cd4c:	f104 0314 	add.w	r3, r4, #20
 800cd50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd54:	f109 0314 	add.w	r3, r9, #20
 800cd58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd5c:	9202      	str	r2, [sp, #8]
 800cd5e:	1b3a      	subs	r2, r7, r4
 800cd60:	3a15      	subs	r2, #21
 800cd62:	f022 0203 	bic.w	r2, r2, #3
 800cd66:	3204      	adds	r2, #4
 800cd68:	f104 0115 	add.w	r1, r4, #21
 800cd6c:	428f      	cmp	r7, r1
 800cd6e:	bf38      	it	cc
 800cd70:	2204      	movcc	r2, #4
 800cd72:	9201      	str	r2, [sp, #4]
 800cd74:	9a02      	ldr	r2, [sp, #8]
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d80c      	bhi.n	800cd96 <__multiply+0x9e>
 800cd7c:	2e00      	cmp	r6, #0
 800cd7e:	dd03      	ble.n	800cd88 <__multiply+0x90>
 800cd80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d05b      	beq.n	800ce40 <__multiply+0x148>
 800cd88:	6106      	str	r6, [r0, #16]
 800cd8a:	b005      	add	sp, #20
 800cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd90:	f843 2b04 	str.w	r2, [r3], #4
 800cd94:	e7d8      	b.n	800cd48 <__multiply+0x50>
 800cd96:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd9a:	f1ba 0f00 	cmp.w	sl, #0
 800cd9e:	d024      	beq.n	800cdea <__multiply+0xf2>
 800cda0:	f104 0e14 	add.w	lr, r4, #20
 800cda4:	46a9      	mov	r9, r5
 800cda6:	f04f 0c00 	mov.w	ip, #0
 800cdaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdae:	f8d9 1000 	ldr.w	r1, [r9]
 800cdb2:	fa1f fb82 	uxth.w	fp, r2
 800cdb6:	b289      	uxth	r1, r1
 800cdb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdc0:	f8d9 2000 	ldr.w	r2, [r9]
 800cdc4:	4461      	add	r1, ip
 800cdc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdca:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdd2:	b289      	uxth	r1, r1
 800cdd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdd8:	4577      	cmp	r7, lr
 800cdda:	f849 1b04 	str.w	r1, [r9], #4
 800cdde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cde2:	d8e2      	bhi.n	800cdaa <__multiply+0xb2>
 800cde4:	9a01      	ldr	r2, [sp, #4]
 800cde6:	f845 c002 	str.w	ip, [r5, r2]
 800cdea:	9a03      	ldr	r2, [sp, #12]
 800cdec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	f1b9 0f00 	cmp.w	r9, #0
 800cdf6:	d021      	beq.n	800ce3c <__multiply+0x144>
 800cdf8:	6829      	ldr	r1, [r5, #0]
 800cdfa:	f104 0c14 	add.w	ip, r4, #20
 800cdfe:	46ae      	mov	lr, r5
 800ce00:	f04f 0a00 	mov.w	sl, #0
 800ce04:	f8bc b000 	ldrh.w	fp, [ip]
 800ce08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce0c:	fb09 220b 	mla	r2, r9, fp, r2
 800ce10:	4452      	add	r2, sl
 800ce12:	b289      	uxth	r1, r1
 800ce14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce18:	f84e 1b04 	str.w	r1, [lr], #4
 800ce1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce24:	f8be 1000 	ldrh.w	r1, [lr]
 800ce28:	fb09 110a 	mla	r1, r9, sl, r1
 800ce2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce30:	4567      	cmp	r7, ip
 800ce32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce36:	d8e5      	bhi.n	800ce04 <__multiply+0x10c>
 800ce38:	9a01      	ldr	r2, [sp, #4]
 800ce3a:	50a9      	str	r1, [r5, r2]
 800ce3c:	3504      	adds	r5, #4
 800ce3e:	e799      	b.n	800cd74 <__multiply+0x7c>
 800ce40:	3e01      	subs	r6, #1
 800ce42:	e79b      	b.n	800cd7c <__multiply+0x84>
 800ce44:	08010692 	.word	0x08010692
 800ce48:	080106a3 	.word	0x080106a3

0800ce4c <__pow5mult>:
 800ce4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce50:	4615      	mov	r5, r2
 800ce52:	f012 0203 	ands.w	r2, r2, #3
 800ce56:	4606      	mov	r6, r0
 800ce58:	460f      	mov	r7, r1
 800ce5a:	d007      	beq.n	800ce6c <__pow5mult+0x20>
 800ce5c:	4c25      	ldr	r4, [pc, #148]	; (800cef4 <__pow5mult+0xa8>)
 800ce5e:	3a01      	subs	r2, #1
 800ce60:	2300      	movs	r3, #0
 800ce62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce66:	f7ff fe53 	bl	800cb10 <__multadd>
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	10ad      	asrs	r5, r5, #2
 800ce6e:	d03d      	beq.n	800ceec <__pow5mult+0xa0>
 800ce70:	69f4      	ldr	r4, [r6, #28]
 800ce72:	b97c      	cbnz	r4, 800ce94 <__pow5mult+0x48>
 800ce74:	2010      	movs	r0, #16
 800ce76:	f7ff fd35 	bl	800c8e4 <malloc>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	61f0      	str	r0, [r6, #28]
 800ce7e:	b928      	cbnz	r0, 800ce8c <__pow5mult+0x40>
 800ce80:	4b1d      	ldr	r3, [pc, #116]	; (800cef8 <__pow5mult+0xac>)
 800ce82:	481e      	ldr	r0, [pc, #120]	; (800cefc <__pow5mult+0xb0>)
 800ce84:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce88:	f001 fb6e 	bl	800e568 <__assert_func>
 800ce8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce90:	6004      	str	r4, [r0, #0]
 800ce92:	60c4      	str	r4, [r0, #12]
 800ce94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce9c:	b94c      	cbnz	r4, 800ceb2 <__pow5mult+0x66>
 800ce9e:	f240 2171 	movw	r1, #625	; 0x271
 800cea2:	4630      	mov	r0, r6
 800cea4:	f7ff ff12 	bl	800cccc <__i2b>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceae:	4604      	mov	r4, r0
 800ceb0:	6003      	str	r3, [r0, #0]
 800ceb2:	f04f 0900 	mov.w	r9, #0
 800ceb6:	07eb      	lsls	r3, r5, #31
 800ceb8:	d50a      	bpl.n	800ced0 <__pow5mult+0x84>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4622      	mov	r2, r4
 800cebe:	4630      	mov	r0, r6
 800cec0:	f7ff ff1a 	bl	800ccf8 <__multiply>
 800cec4:	4639      	mov	r1, r7
 800cec6:	4680      	mov	r8, r0
 800cec8:	4630      	mov	r0, r6
 800ceca:	f7ff fdff 	bl	800cacc <_Bfree>
 800cece:	4647      	mov	r7, r8
 800ced0:	106d      	asrs	r5, r5, #1
 800ced2:	d00b      	beq.n	800ceec <__pow5mult+0xa0>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	b938      	cbnz	r0, 800cee8 <__pow5mult+0x9c>
 800ced8:	4622      	mov	r2, r4
 800ceda:	4621      	mov	r1, r4
 800cedc:	4630      	mov	r0, r6
 800cede:	f7ff ff0b 	bl	800ccf8 <__multiply>
 800cee2:	6020      	str	r0, [r4, #0]
 800cee4:	f8c0 9000 	str.w	r9, [r0]
 800cee8:	4604      	mov	r4, r0
 800ceea:	e7e4      	b.n	800ceb6 <__pow5mult+0x6a>
 800ceec:	4638      	mov	r0, r7
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	bf00      	nop
 800cef4:	080107f0 	.word	0x080107f0
 800cef8:	08010623 	.word	0x08010623
 800cefc:	080106a3 	.word	0x080106a3

0800cf00 <__lshift>:
 800cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	6849      	ldr	r1, [r1, #4]
 800cf08:	6923      	ldr	r3, [r4, #16]
 800cf0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf0e:	68a3      	ldr	r3, [r4, #8]
 800cf10:	4607      	mov	r7, r0
 800cf12:	4691      	mov	r9, r2
 800cf14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf18:	f108 0601 	add.w	r6, r8, #1
 800cf1c:	42b3      	cmp	r3, r6
 800cf1e:	db0b      	blt.n	800cf38 <__lshift+0x38>
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7ff fd93 	bl	800ca4c <_Balloc>
 800cf26:	4605      	mov	r5, r0
 800cf28:	b948      	cbnz	r0, 800cf3e <__lshift+0x3e>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	4b28      	ldr	r3, [pc, #160]	; (800cfd0 <__lshift+0xd0>)
 800cf2e:	4829      	ldr	r0, [pc, #164]	; (800cfd4 <__lshift+0xd4>)
 800cf30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cf34:	f001 fb18 	bl	800e568 <__assert_func>
 800cf38:	3101      	adds	r1, #1
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	e7ee      	b.n	800cf1c <__lshift+0x1c>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f100 0114 	add.w	r1, r0, #20
 800cf44:	f100 0210 	add.w	r2, r0, #16
 800cf48:	4618      	mov	r0, r3
 800cf4a:	4553      	cmp	r3, sl
 800cf4c:	db33      	blt.n	800cfb6 <__lshift+0xb6>
 800cf4e:	6920      	ldr	r0, [r4, #16]
 800cf50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf54:	f104 0314 	add.w	r3, r4, #20
 800cf58:	f019 091f 	ands.w	r9, r9, #31
 800cf5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf64:	d02b      	beq.n	800cfbe <__lshift+0xbe>
 800cf66:	f1c9 0e20 	rsb	lr, r9, #32
 800cf6a:	468a      	mov	sl, r1
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	6818      	ldr	r0, [r3, #0]
 800cf70:	fa00 f009 	lsl.w	r0, r0, r9
 800cf74:	4310      	orrs	r0, r2
 800cf76:	f84a 0b04 	str.w	r0, [sl], #4
 800cf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7e:	459c      	cmp	ip, r3
 800cf80:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf84:	d8f3      	bhi.n	800cf6e <__lshift+0x6e>
 800cf86:	ebac 0304 	sub.w	r3, ip, r4
 800cf8a:	3b15      	subs	r3, #21
 800cf8c:	f023 0303 	bic.w	r3, r3, #3
 800cf90:	3304      	adds	r3, #4
 800cf92:	f104 0015 	add.w	r0, r4, #21
 800cf96:	4584      	cmp	ip, r0
 800cf98:	bf38      	it	cc
 800cf9a:	2304      	movcc	r3, #4
 800cf9c:	50ca      	str	r2, [r1, r3]
 800cf9e:	b10a      	cbz	r2, 800cfa4 <__lshift+0xa4>
 800cfa0:	f108 0602 	add.w	r6, r8, #2
 800cfa4:	3e01      	subs	r6, #1
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	612e      	str	r6, [r5, #16]
 800cfaa:	4621      	mov	r1, r4
 800cfac:	f7ff fd8e 	bl	800cacc <_Bfree>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfba:	3301      	adds	r3, #1
 800cfbc:	e7c5      	b.n	800cf4a <__lshift+0x4a>
 800cfbe:	3904      	subs	r1, #4
 800cfc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfc8:	459c      	cmp	ip, r3
 800cfca:	d8f9      	bhi.n	800cfc0 <__lshift+0xc0>
 800cfcc:	e7ea      	b.n	800cfa4 <__lshift+0xa4>
 800cfce:	bf00      	nop
 800cfd0:	08010692 	.word	0x08010692
 800cfd4:	080106a3 	.word	0x080106a3

0800cfd8 <__mcmp>:
 800cfd8:	b530      	push	{r4, r5, lr}
 800cfda:	6902      	ldr	r2, [r0, #16]
 800cfdc:	690c      	ldr	r4, [r1, #16]
 800cfde:	1b12      	subs	r2, r2, r4
 800cfe0:	d10e      	bne.n	800d000 <__mcmp+0x28>
 800cfe2:	f100 0314 	add.w	r3, r0, #20
 800cfe6:	3114      	adds	r1, #20
 800cfe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cff8:	42a5      	cmp	r5, r4
 800cffa:	d003      	beq.n	800d004 <__mcmp+0x2c>
 800cffc:	d305      	bcc.n	800d00a <__mcmp+0x32>
 800cffe:	2201      	movs	r2, #1
 800d000:	4610      	mov	r0, r2
 800d002:	bd30      	pop	{r4, r5, pc}
 800d004:	4283      	cmp	r3, r0
 800d006:	d3f3      	bcc.n	800cff0 <__mcmp+0x18>
 800d008:	e7fa      	b.n	800d000 <__mcmp+0x28>
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	e7f7      	b.n	800d000 <__mcmp+0x28>

0800d010 <__mdiff>:
 800d010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	460c      	mov	r4, r1
 800d016:	4606      	mov	r6, r0
 800d018:	4611      	mov	r1, r2
 800d01a:	4620      	mov	r0, r4
 800d01c:	4690      	mov	r8, r2
 800d01e:	f7ff ffdb 	bl	800cfd8 <__mcmp>
 800d022:	1e05      	subs	r5, r0, #0
 800d024:	d110      	bne.n	800d048 <__mdiff+0x38>
 800d026:	4629      	mov	r1, r5
 800d028:	4630      	mov	r0, r6
 800d02a:	f7ff fd0f 	bl	800ca4c <_Balloc>
 800d02e:	b930      	cbnz	r0, 800d03e <__mdiff+0x2e>
 800d030:	4b3a      	ldr	r3, [pc, #232]	; (800d11c <__mdiff+0x10c>)
 800d032:	4602      	mov	r2, r0
 800d034:	f240 2137 	movw	r1, #567	; 0x237
 800d038:	4839      	ldr	r0, [pc, #228]	; (800d120 <__mdiff+0x110>)
 800d03a:	f001 fa95 	bl	800e568 <__assert_func>
 800d03e:	2301      	movs	r3, #1
 800d040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	bfa4      	itt	ge
 800d04a:	4643      	movge	r3, r8
 800d04c:	46a0      	movge	r8, r4
 800d04e:	4630      	mov	r0, r6
 800d050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d054:	bfa6      	itte	ge
 800d056:	461c      	movge	r4, r3
 800d058:	2500      	movge	r5, #0
 800d05a:	2501      	movlt	r5, #1
 800d05c:	f7ff fcf6 	bl	800ca4c <_Balloc>
 800d060:	b920      	cbnz	r0, 800d06c <__mdiff+0x5c>
 800d062:	4b2e      	ldr	r3, [pc, #184]	; (800d11c <__mdiff+0x10c>)
 800d064:	4602      	mov	r2, r0
 800d066:	f240 2145 	movw	r1, #581	; 0x245
 800d06a:	e7e5      	b.n	800d038 <__mdiff+0x28>
 800d06c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d070:	6926      	ldr	r6, [r4, #16]
 800d072:	60c5      	str	r5, [r0, #12]
 800d074:	f104 0914 	add.w	r9, r4, #20
 800d078:	f108 0514 	add.w	r5, r8, #20
 800d07c:	f100 0e14 	add.w	lr, r0, #20
 800d080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d088:	f108 0210 	add.w	r2, r8, #16
 800d08c:	46f2      	mov	sl, lr
 800d08e:	2100      	movs	r1, #0
 800d090:	f859 3b04 	ldr.w	r3, [r9], #4
 800d094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d098:	fa11 f88b 	uxtah	r8, r1, fp
 800d09c:	b299      	uxth	r1, r3
 800d09e:	0c1b      	lsrs	r3, r3, #16
 800d0a0:	eba8 0801 	sub.w	r8, r8, r1
 800d0a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0ac:	fa1f f888 	uxth.w	r8, r8
 800d0b0:	1419      	asrs	r1, r3, #16
 800d0b2:	454e      	cmp	r6, r9
 800d0b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0b8:	f84a 3b04 	str.w	r3, [sl], #4
 800d0bc:	d8e8      	bhi.n	800d090 <__mdiff+0x80>
 800d0be:	1b33      	subs	r3, r6, r4
 800d0c0:	3b15      	subs	r3, #21
 800d0c2:	f023 0303 	bic.w	r3, r3, #3
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	3415      	adds	r4, #21
 800d0ca:	42a6      	cmp	r6, r4
 800d0cc:	bf38      	it	cc
 800d0ce:	2304      	movcc	r3, #4
 800d0d0:	441d      	add	r5, r3
 800d0d2:	4473      	add	r3, lr
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	462e      	mov	r6, r5
 800d0d8:	4566      	cmp	r6, ip
 800d0da:	d30e      	bcc.n	800d0fa <__mdiff+0xea>
 800d0dc:	f10c 0203 	add.w	r2, ip, #3
 800d0e0:	1b52      	subs	r2, r2, r5
 800d0e2:	f022 0203 	bic.w	r2, r2, #3
 800d0e6:	3d03      	subs	r5, #3
 800d0e8:	45ac      	cmp	ip, r5
 800d0ea:	bf38      	it	cc
 800d0ec:	2200      	movcc	r2, #0
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d0f4:	b17a      	cbz	r2, 800d116 <__mdiff+0x106>
 800d0f6:	6107      	str	r7, [r0, #16]
 800d0f8:	e7a4      	b.n	800d044 <__mdiff+0x34>
 800d0fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0fe:	fa11 f288 	uxtah	r2, r1, r8
 800d102:	1414      	asrs	r4, r2, #16
 800d104:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d108:	b292      	uxth	r2, r2
 800d10a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d10e:	f84e 2b04 	str.w	r2, [lr], #4
 800d112:	1421      	asrs	r1, r4, #16
 800d114:	e7e0      	b.n	800d0d8 <__mdiff+0xc8>
 800d116:	3f01      	subs	r7, #1
 800d118:	e7ea      	b.n	800d0f0 <__mdiff+0xe0>
 800d11a:	bf00      	nop
 800d11c:	08010692 	.word	0x08010692
 800d120:	080106a3 	.word	0x080106a3

0800d124 <__ulp>:
 800d124:	b082      	sub	sp, #8
 800d126:	ed8d 0b00 	vstr	d0, [sp]
 800d12a:	9a01      	ldr	r2, [sp, #4]
 800d12c:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <__ulp+0x48>)
 800d12e:	4013      	ands	r3, r2
 800d130:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d134:	2b00      	cmp	r3, #0
 800d136:	dc08      	bgt.n	800d14a <__ulp+0x26>
 800d138:	425b      	negs	r3, r3
 800d13a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d13e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d142:	da04      	bge.n	800d14e <__ulp+0x2a>
 800d144:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d148:	4113      	asrs	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	e008      	b.n	800d160 <__ulp+0x3c>
 800d14e:	f1a2 0314 	sub.w	r3, r2, #20
 800d152:	2b1e      	cmp	r3, #30
 800d154:	bfda      	itte	le
 800d156:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d15a:	40da      	lsrle	r2, r3
 800d15c:	2201      	movgt	r2, #1
 800d15e:	2300      	movs	r3, #0
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	ec41 0b10 	vmov	d0, r0, r1
 800d168:	b002      	add	sp, #8
 800d16a:	4770      	bx	lr
 800d16c:	7ff00000 	.word	0x7ff00000

0800d170 <__b2d>:
 800d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d174:	6906      	ldr	r6, [r0, #16]
 800d176:	f100 0814 	add.w	r8, r0, #20
 800d17a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d17e:	1f37      	subs	r7, r6, #4
 800d180:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d184:	4610      	mov	r0, r2
 800d186:	f7ff fd53 	bl	800cc30 <__hi0bits>
 800d18a:	f1c0 0320 	rsb	r3, r0, #32
 800d18e:	280a      	cmp	r0, #10
 800d190:	600b      	str	r3, [r1, #0]
 800d192:	491b      	ldr	r1, [pc, #108]	; (800d200 <__b2d+0x90>)
 800d194:	dc15      	bgt.n	800d1c2 <__b2d+0x52>
 800d196:	f1c0 0c0b 	rsb	ip, r0, #11
 800d19a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d19e:	45b8      	cmp	r8, r7
 800d1a0:	ea43 0501 	orr.w	r5, r3, r1
 800d1a4:	bf34      	ite	cc
 800d1a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1aa:	2300      	movcs	r3, #0
 800d1ac:	3015      	adds	r0, #21
 800d1ae:	fa02 f000 	lsl.w	r0, r2, r0
 800d1b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1b6:	4303      	orrs	r3, r0
 800d1b8:	461c      	mov	r4, r3
 800d1ba:	ec45 4b10 	vmov	d0, r4, r5
 800d1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c2:	45b8      	cmp	r8, r7
 800d1c4:	bf3a      	itte	cc
 800d1c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800d1ce:	2300      	movcs	r3, #0
 800d1d0:	380b      	subs	r0, #11
 800d1d2:	d012      	beq.n	800d1fa <__b2d+0x8a>
 800d1d4:	f1c0 0120 	rsb	r1, r0, #32
 800d1d8:	fa23 f401 	lsr.w	r4, r3, r1
 800d1dc:	4082      	lsls	r2, r0
 800d1de:	4322      	orrs	r2, r4
 800d1e0:	4547      	cmp	r7, r8
 800d1e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d1e6:	bf8c      	ite	hi
 800d1e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d1ec:	2200      	movls	r2, #0
 800d1ee:	4083      	lsls	r3, r0
 800d1f0:	40ca      	lsrs	r2, r1
 800d1f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	e7de      	b.n	800d1b8 <__b2d+0x48>
 800d1fa:	ea42 0501 	orr.w	r5, r2, r1
 800d1fe:	e7db      	b.n	800d1b8 <__b2d+0x48>
 800d200:	3ff00000 	.word	0x3ff00000

0800d204 <__d2b>:
 800d204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d208:	460f      	mov	r7, r1
 800d20a:	2101      	movs	r1, #1
 800d20c:	ec59 8b10 	vmov	r8, r9, d0
 800d210:	4616      	mov	r6, r2
 800d212:	f7ff fc1b 	bl	800ca4c <_Balloc>
 800d216:	4604      	mov	r4, r0
 800d218:	b930      	cbnz	r0, 800d228 <__d2b+0x24>
 800d21a:	4602      	mov	r2, r0
 800d21c:	4b24      	ldr	r3, [pc, #144]	; (800d2b0 <__d2b+0xac>)
 800d21e:	4825      	ldr	r0, [pc, #148]	; (800d2b4 <__d2b+0xb0>)
 800d220:	f240 310f 	movw	r1, #783	; 0x30f
 800d224:	f001 f9a0 	bl	800e568 <__assert_func>
 800d228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d22c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d230:	bb2d      	cbnz	r5, 800d27e <__d2b+0x7a>
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	f1b8 0300 	subs.w	r3, r8, #0
 800d238:	d026      	beq.n	800d288 <__d2b+0x84>
 800d23a:	4668      	mov	r0, sp
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	f7ff fd17 	bl	800cc70 <__lo0bits>
 800d242:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d246:	b1e8      	cbz	r0, 800d284 <__d2b+0x80>
 800d248:	f1c0 0320 	rsb	r3, r0, #32
 800d24c:	fa02 f303 	lsl.w	r3, r2, r3
 800d250:	430b      	orrs	r3, r1
 800d252:	40c2      	lsrs	r2, r0
 800d254:	6163      	str	r3, [r4, #20]
 800d256:	9201      	str	r2, [sp, #4]
 800d258:	9b01      	ldr	r3, [sp, #4]
 800d25a:	61a3      	str	r3, [r4, #24]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	bf14      	ite	ne
 800d260:	2202      	movne	r2, #2
 800d262:	2201      	moveq	r2, #1
 800d264:	6122      	str	r2, [r4, #16]
 800d266:	b1bd      	cbz	r5, 800d298 <__d2b+0x94>
 800d268:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d26c:	4405      	add	r5, r0
 800d26e:	603d      	str	r5, [r7, #0]
 800d270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d274:	6030      	str	r0, [r6, #0]
 800d276:	4620      	mov	r0, r4
 800d278:	b003      	add	sp, #12
 800d27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d282:	e7d6      	b.n	800d232 <__d2b+0x2e>
 800d284:	6161      	str	r1, [r4, #20]
 800d286:	e7e7      	b.n	800d258 <__d2b+0x54>
 800d288:	a801      	add	r0, sp, #4
 800d28a:	f7ff fcf1 	bl	800cc70 <__lo0bits>
 800d28e:	9b01      	ldr	r3, [sp, #4]
 800d290:	6163      	str	r3, [r4, #20]
 800d292:	3020      	adds	r0, #32
 800d294:	2201      	movs	r2, #1
 800d296:	e7e5      	b.n	800d264 <__d2b+0x60>
 800d298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d29c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2a0:	6038      	str	r0, [r7, #0]
 800d2a2:	6918      	ldr	r0, [r3, #16]
 800d2a4:	f7ff fcc4 	bl	800cc30 <__hi0bits>
 800d2a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2ac:	e7e2      	b.n	800d274 <__d2b+0x70>
 800d2ae:	bf00      	nop
 800d2b0:	08010692 	.word	0x08010692
 800d2b4:	080106a3 	.word	0x080106a3

0800d2b8 <__ratio>:
 800d2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2bc:	4688      	mov	r8, r1
 800d2be:	4669      	mov	r1, sp
 800d2c0:	4681      	mov	r9, r0
 800d2c2:	f7ff ff55 	bl	800d170 <__b2d>
 800d2c6:	a901      	add	r1, sp, #4
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	ec55 4b10 	vmov	r4, r5, d0
 800d2ce:	f7ff ff4f 	bl	800d170 <__b2d>
 800d2d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d2da:	eba3 0c02 	sub.w	ip, r3, r2
 800d2de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2e2:	1a9b      	subs	r3, r3, r2
 800d2e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d2e8:	ec51 0b10 	vmov	r0, r1, d0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bfd6      	itet	le
 800d2f0:	460a      	movle	r2, r1
 800d2f2:	462a      	movgt	r2, r5
 800d2f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	462f      	mov	r7, r5
 800d2fc:	bfd4      	ite	le
 800d2fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d302:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d306:	4620      	mov	r0, r4
 800d308:	ee10 2a10 	vmov	r2, s0
 800d30c:	465b      	mov	r3, fp
 800d30e:	4639      	mov	r1, r7
 800d310:	f7f3 fa9c 	bl	800084c <__aeabi_ddiv>
 800d314:	ec41 0b10 	vmov	d0, r0, r1
 800d318:	b003      	add	sp, #12
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d31e <__copybits>:
 800d31e:	3901      	subs	r1, #1
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	1149      	asrs	r1, r1, #5
 800d324:	6914      	ldr	r4, [r2, #16]
 800d326:	3101      	adds	r1, #1
 800d328:	f102 0314 	add.w	r3, r2, #20
 800d32c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d330:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d334:	1f05      	subs	r5, r0, #4
 800d336:	42a3      	cmp	r3, r4
 800d338:	d30c      	bcc.n	800d354 <__copybits+0x36>
 800d33a:	1aa3      	subs	r3, r4, r2
 800d33c:	3b11      	subs	r3, #17
 800d33e:	f023 0303 	bic.w	r3, r3, #3
 800d342:	3211      	adds	r2, #17
 800d344:	42a2      	cmp	r2, r4
 800d346:	bf88      	it	hi
 800d348:	2300      	movhi	r3, #0
 800d34a:	4418      	add	r0, r3
 800d34c:	2300      	movs	r3, #0
 800d34e:	4288      	cmp	r0, r1
 800d350:	d305      	bcc.n	800d35e <__copybits+0x40>
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	f853 6b04 	ldr.w	r6, [r3], #4
 800d358:	f845 6f04 	str.w	r6, [r5, #4]!
 800d35c:	e7eb      	b.n	800d336 <__copybits+0x18>
 800d35e:	f840 3b04 	str.w	r3, [r0], #4
 800d362:	e7f4      	b.n	800d34e <__copybits+0x30>

0800d364 <__any_on>:
 800d364:	f100 0214 	add.w	r2, r0, #20
 800d368:	6900      	ldr	r0, [r0, #16]
 800d36a:	114b      	asrs	r3, r1, #5
 800d36c:	4298      	cmp	r0, r3
 800d36e:	b510      	push	{r4, lr}
 800d370:	db11      	blt.n	800d396 <__any_on+0x32>
 800d372:	dd0a      	ble.n	800d38a <__any_on+0x26>
 800d374:	f011 011f 	ands.w	r1, r1, #31
 800d378:	d007      	beq.n	800d38a <__any_on+0x26>
 800d37a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d37e:	fa24 f001 	lsr.w	r0, r4, r1
 800d382:	fa00 f101 	lsl.w	r1, r0, r1
 800d386:	428c      	cmp	r4, r1
 800d388:	d10b      	bne.n	800d3a2 <__any_on+0x3e>
 800d38a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d38e:	4293      	cmp	r3, r2
 800d390:	d803      	bhi.n	800d39a <__any_on+0x36>
 800d392:	2000      	movs	r0, #0
 800d394:	bd10      	pop	{r4, pc}
 800d396:	4603      	mov	r3, r0
 800d398:	e7f7      	b.n	800d38a <__any_on+0x26>
 800d39a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	d0f5      	beq.n	800d38e <__any_on+0x2a>
 800d3a2:	2001      	movs	r0, #1
 800d3a4:	e7f6      	b.n	800d394 <__any_on+0x30>

0800d3a6 <sulp>:
 800d3a6:	b570      	push	{r4, r5, r6, lr}
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	ec45 4b10 	vmov	d0, r4, r5
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	f7ff feb7 	bl	800d124 <__ulp>
 800d3b6:	ec51 0b10 	vmov	r0, r1, d0
 800d3ba:	b17e      	cbz	r6, 800d3dc <sulp+0x36>
 800d3bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dd09      	ble.n	800d3dc <sulp+0x36>
 800d3c8:	051b      	lsls	r3, r3, #20
 800d3ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d3ce:	2400      	movs	r4, #0
 800d3d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d3d4:	4622      	mov	r2, r4
 800d3d6:	462b      	mov	r3, r5
 800d3d8:	f7f3 f90e 	bl	80005f8 <__aeabi_dmul>
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3e0 <_strtod_l>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	ed2d 8b02 	vpush	{d8}
 800d3e8:	b09b      	sub	sp, #108	; 0x6c
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	9216      	str	r2, [sp, #88]	; 0x58
 800d3f2:	460d      	mov	r5, r1
 800d3f4:	f04f 0800 	mov.w	r8, #0
 800d3f8:	f04f 0900 	mov.w	r9, #0
 800d3fc:	460a      	mov	r2, r1
 800d3fe:	9215      	str	r2, [sp, #84]	; 0x54
 800d400:	7811      	ldrb	r1, [r2, #0]
 800d402:	292b      	cmp	r1, #43	; 0x2b
 800d404:	d04c      	beq.n	800d4a0 <_strtod_l+0xc0>
 800d406:	d83a      	bhi.n	800d47e <_strtod_l+0x9e>
 800d408:	290d      	cmp	r1, #13
 800d40a:	d834      	bhi.n	800d476 <_strtod_l+0x96>
 800d40c:	2908      	cmp	r1, #8
 800d40e:	d834      	bhi.n	800d47a <_strtod_l+0x9a>
 800d410:	2900      	cmp	r1, #0
 800d412:	d03d      	beq.n	800d490 <_strtod_l+0xb0>
 800d414:	2200      	movs	r2, #0
 800d416:	920a      	str	r2, [sp, #40]	; 0x28
 800d418:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d41a:	7832      	ldrb	r2, [r6, #0]
 800d41c:	2a30      	cmp	r2, #48	; 0x30
 800d41e:	f040 80b4 	bne.w	800d58a <_strtod_l+0x1aa>
 800d422:	7872      	ldrb	r2, [r6, #1]
 800d424:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d428:	2a58      	cmp	r2, #88	; 0x58
 800d42a:	d170      	bne.n	800d50e <_strtod_l+0x12e>
 800d42c:	9302      	str	r3, [sp, #8]
 800d42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	ab16      	add	r3, sp, #88	; 0x58
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	4a8e      	ldr	r2, [pc, #568]	; (800d670 <_strtod_l+0x290>)
 800d438:	ab17      	add	r3, sp, #92	; 0x5c
 800d43a:	a915      	add	r1, sp, #84	; 0x54
 800d43c:	4620      	mov	r0, r4
 800d43e:	f001 f92f 	bl	800e6a0 <__gethex>
 800d442:	f010 070f 	ands.w	r7, r0, #15
 800d446:	4605      	mov	r5, r0
 800d448:	d005      	beq.n	800d456 <_strtod_l+0x76>
 800d44a:	2f06      	cmp	r7, #6
 800d44c:	d12a      	bne.n	800d4a4 <_strtod_l+0xc4>
 800d44e:	3601      	adds	r6, #1
 800d450:	2300      	movs	r3, #0
 800d452:	9615      	str	r6, [sp, #84]	; 0x54
 800d454:	930a      	str	r3, [sp, #40]	; 0x28
 800d456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f040 857f 	bne.w	800df5c <_strtod_l+0xb7c>
 800d45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d460:	b1db      	cbz	r3, 800d49a <_strtod_l+0xba>
 800d462:	4642      	mov	r2, r8
 800d464:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d468:	ec43 2b10 	vmov	d0, r2, r3
 800d46c:	b01b      	add	sp, #108	; 0x6c
 800d46e:	ecbd 8b02 	vpop	{d8}
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	2920      	cmp	r1, #32
 800d478:	d1cc      	bne.n	800d414 <_strtod_l+0x34>
 800d47a:	3201      	adds	r2, #1
 800d47c:	e7bf      	b.n	800d3fe <_strtod_l+0x1e>
 800d47e:	292d      	cmp	r1, #45	; 0x2d
 800d480:	d1c8      	bne.n	800d414 <_strtod_l+0x34>
 800d482:	2101      	movs	r1, #1
 800d484:	910a      	str	r1, [sp, #40]	; 0x28
 800d486:	1c51      	adds	r1, r2, #1
 800d488:	9115      	str	r1, [sp, #84]	; 0x54
 800d48a:	7852      	ldrb	r2, [r2, #1]
 800d48c:	2a00      	cmp	r2, #0
 800d48e:	d1c3      	bne.n	800d418 <_strtod_l+0x38>
 800d490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d492:	9515      	str	r5, [sp, #84]	; 0x54
 800d494:	2b00      	cmp	r3, #0
 800d496:	f040 855f 	bne.w	800df58 <_strtod_l+0xb78>
 800d49a:	4642      	mov	r2, r8
 800d49c:	464b      	mov	r3, r9
 800d49e:	e7e3      	b.n	800d468 <_strtod_l+0x88>
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	e7ef      	b.n	800d484 <_strtod_l+0xa4>
 800d4a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4a6:	b13a      	cbz	r2, 800d4b8 <_strtod_l+0xd8>
 800d4a8:	2135      	movs	r1, #53	; 0x35
 800d4aa:	a818      	add	r0, sp, #96	; 0x60
 800d4ac:	f7ff ff37 	bl	800d31e <__copybits>
 800d4b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f7ff fb0a 	bl	800cacc <_Bfree>
 800d4b8:	3f01      	subs	r7, #1
 800d4ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4bc:	2f04      	cmp	r7, #4
 800d4be:	d806      	bhi.n	800d4ce <_strtod_l+0xee>
 800d4c0:	e8df f007 	tbb	[pc, r7]
 800d4c4:	201d0314 	.word	0x201d0314
 800d4c8:	14          	.byte	0x14
 800d4c9:	00          	.byte	0x00
 800d4ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d4ce:	05e9      	lsls	r1, r5, #23
 800d4d0:	bf48      	it	mi
 800d4d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d4d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4da:	0d1b      	lsrs	r3, r3, #20
 800d4dc:	051b      	lsls	r3, r3, #20
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1b9      	bne.n	800d456 <_strtod_l+0x76>
 800d4e2:	f7fe faf7 	bl	800bad4 <__errno>
 800d4e6:	2322      	movs	r3, #34	; 0x22
 800d4e8:	6003      	str	r3, [r0, #0]
 800d4ea:	e7b4      	b.n	800d456 <_strtod_l+0x76>
 800d4ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d4f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d4f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d4fc:	e7e7      	b.n	800d4ce <_strtod_l+0xee>
 800d4fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d678 <_strtod_l+0x298>
 800d502:	e7e4      	b.n	800d4ce <_strtod_l+0xee>
 800d504:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d508:	f04f 38ff 	mov.w	r8, #4294967295
 800d50c:	e7df      	b.n	800d4ce <_strtod_l+0xee>
 800d50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	9215      	str	r2, [sp, #84]	; 0x54
 800d514:	785b      	ldrb	r3, [r3, #1]
 800d516:	2b30      	cmp	r3, #48	; 0x30
 800d518:	d0f9      	beq.n	800d50e <_strtod_l+0x12e>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d09b      	beq.n	800d456 <_strtod_l+0x76>
 800d51e:	2301      	movs	r3, #1
 800d520:	f04f 0a00 	mov.w	sl, #0
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d528:	930b      	str	r3, [sp, #44]	; 0x2c
 800d52a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d52e:	46d3      	mov	fp, sl
 800d530:	220a      	movs	r2, #10
 800d532:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d534:	7806      	ldrb	r6, [r0, #0]
 800d536:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d53a:	b2d9      	uxtb	r1, r3
 800d53c:	2909      	cmp	r1, #9
 800d53e:	d926      	bls.n	800d58e <_strtod_l+0x1ae>
 800d540:	494c      	ldr	r1, [pc, #304]	; (800d674 <_strtod_l+0x294>)
 800d542:	2201      	movs	r2, #1
 800d544:	f000 ffe6 	bl	800e514 <strncmp>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d030      	beq.n	800d5ae <_strtod_l+0x1ce>
 800d54c:	2000      	movs	r0, #0
 800d54e:	4632      	mov	r2, r6
 800d550:	9005      	str	r0, [sp, #20]
 800d552:	465e      	mov	r6, fp
 800d554:	4603      	mov	r3, r0
 800d556:	2a65      	cmp	r2, #101	; 0x65
 800d558:	d001      	beq.n	800d55e <_strtod_l+0x17e>
 800d55a:	2a45      	cmp	r2, #69	; 0x45
 800d55c:	d113      	bne.n	800d586 <_strtod_l+0x1a6>
 800d55e:	b91e      	cbnz	r6, 800d568 <_strtod_l+0x188>
 800d560:	9a04      	ldr	r2, [sp, #16]
 800d562:	4302      	orrs	r2, r0
 800d564:	d094      	beq.n	800d490 <_strtod_l+0xb0>
 800d566:	2600      	movs	r6, #0
 800d568:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d56a:	1c6a      	adds	r2, r5, #1
 800d56c:	9215      	str	r2, [sp, #84]	; 0x54
 800d56e:	786a      	ldrb	r2, [r5, #1]
 800d570:	2a2b      	cmp	r2, #43	; 0x2b
 800d572:	d074      	beq.n	800d65e <_strtod_l+0x27e>
 800d574:	2a2d      	cmp	r2, #45	; 0x2d
 800d576:	d078      	beq.n	800d66a <_strtod_l+0x28a>
 800d578:	f04f 0c00 	mov.w	ip, #0
 800d57c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d580:	2909      	cmp	r1, #9
 800d582:	d97f      	bls.n	800d684 <_strtod_l+0x2a4>
 800d584:	9515      	str	r5, [sp, #84]	; 0x54
 800d586:	2700      	movs	r7, #0
 800d588:	e09e      	b.n	800d6c8 <_strtod_l+0x2e8>
 800d58a:	2300      	movs	r3, #0
 800d58c:	e7c8      	b.n	800d520 <_strtod_l+0x140>
 800d58e:	f1bb 0f08 	cmp.w	fp, #8
 800d592:	bfd8      	it	le
 800d594:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d596:	f100 0001 	add.w	r0, r0, #1
 800d59a:	bfda      	itte	le
 800d59c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800d5a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d5a6:	f10b 0b01 	add.w	fp, fp, #1
 800d5aa:	9015      	str	r0, [sp, #84]	; 0x54
 800d5ac:	e7c1      	b.n	800d532 <_strtod_l+0x152>
 800d5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	9215      	str	r2, [sp, #84]	; 0x54
 800d5b4:	785a      	ldrb	r2, [r3, #1]
 800d5b6:	f1bb 0f00 	cmp.w	fp, #0
 800d5ba:	d037      	beq.n	800d62c <_strtod_l+0x24c>
 800d5bc:	9005      	str	r0, [sp, #20]
 800d5be:	465e      	mov	r6, fp
 800d5c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d5c4:	2b09      	cmp	r3, #9
 800d5c6:	d912      	bls.n	800d5ee <_strtod_l+0x20e>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e7c4      	b.n	800d556 <_strtod_l+0x176>
 800d5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5ce:	1c5a      	adds	r2, r3, #1
 800d5d0:	9215      	str	r2, [sp, #84]	; 0x54
 800d5d2:	785a      	ldrb	r2, [r3, #1]
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	2a30      	cmp	r2, #48	; 0x30
 800d5d8:	d0f8      	beq.n	800d5cc <_strtod_l+0x1ec>
 800d5da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	f200 84c1 	bhi.w	800df66 <_strtod_l+0xb86>
 800d5e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5e6:	9005      	str	r0, [sp, #20]
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	3a30      	subs	r2, #48	; 0x30
 800d5f0:	f100 0301 	add.w	r3, r0, #1
 800d5f4:	d014      	beq.n	800d620 <_strtod_l+0x240>
 800d5f6:	9905      	ldr	r1, [sp, #20]
 800d5f8:	4419      	add	r1, r3
 800d5fa:	9105      	str	r1, [sp, #20]
 800d5fc:	4633      	mov	r3, r6
 800d5fe:	eb00 0c06 	add.w	ip, r0, r6
 800d602:	210a      	movs	r1, #10
 800d604:	4563      	cmp	r3, ip
 800d606:	d113      	bne.n	800d630 <_strtod_l+0x250>
 800d608:	1833      	adds	r3, r6, r0
 800d60a:	2b08      	cmp	r3, #8
 800d60c:	f106 0601 	add.w	r6, r6, #1
 800d610:	4406      	add	r6, r0
 800d612:	dc1a      	bgt.n	800d64a <_strtod_l+0x26a>
 800d614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d616:	230a      	movs	r3, #10
 800d618:	fb03 2301 	mla	r3, r3, r1, r2
 800d61c:	9309      	str	r3, [sp, #36]	; 0x24
 800d61e:	2300      	movs	r3, #0
 800d620:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d622:	1c51      	adds	r1, r2, #1
 800d624:	9115      	str	r1, [sp, #84]	; 0x54
 800d626:	7852      	ldrb	r2, [r2, #1]
 800d628:	4618      	mov	r0, r3
 800d62a:	e7c9      	b.n	800d5c0 <_strtod_l+0x1e0>
 800d62c:	4658      	mov	r0, fp
 800d62e:	e7d2      	b.n	800d5d6 <_strtod_l+0x1f6>
 800d630:	2b08      	cmp	r3, #8
 800d632:	f103 0301 	add.w	r3, r3, #1
 800d636:	dc03      	bgt.n	800d640 <_strtod_l+0x260>
 800d638:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d63a:	434f      	muls	r7, r1
 800d63c:	9709      	str	r7, [sp, #36]	; 0x24
 800d63e:	e7e1      	b.n	800d604 <_strtod_l+0x224>
 800d640:	2b10      	cmp	r3, #16
 800d642:	bfd8      	it	le
 800d644:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d648:	e7dc      	b.n	800d604 <_strtod_l+0x224>
 800d64a:	2e10      	cmp	r6, #16
 800d64c:	bfdc      	itt	le
 800d64e:	230a      	movle	r3, #10
 800d650:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d654:	e7e3      	b.n	800d61e <_strtod_l+0x23e>
 800d656:	2300      	movs	r3, #0
 800d658:	9305      	str	r3, [sp, #20]
 800d65a:	2301      	movs	r3, #1
 800d65c:	e780      	b.n	800d560 <_strtod_l+0x180>
 800d65e:	f04f 0c00 	mov.w	ip, #0
 800d662:	1caa      	adds	r2, r5, #2
 800d664:	9215      	str	r2, [sp, #84]	; 0x54
 800d666:	78aa      	ldrb	r2, [r5, #2]
 800d668:	e788      	b.n	800d57c <_strtod_l+0x19c>
 800d66a:	f04f 0c01 	mov.w	ip, #1
 800d66e:	e7f8      	b.n	800d662 <_strtod_l+0x282>
 800d670:	08010800 	.word	0x08010800
 800d674:	080107fc 	.word	0x080107fc
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d67e:	1c51      	adds	r1, r2, #1
 800d680:	9115      	str	r1, [sp, #84]	; 0x54
 800d682:	7852      	ldrb	r2, [r2, #1]
 800d684:	2a30      	cmp	r2, #48	; 0x30
 800d686:	d0f9      	beq.n	800d67c <_strtod_l+0x29c>
 800d688:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d68c:	2908      	cmp	r1, #8
 800d68e:	f63f af7a 	bhi.w	800d586 <_strtod_l+0x1a6>
 800d692:	3a30      	subs	r2, #48	; 0x30
 800d694:	9208      	str	r2, [sp, #32]
 800d696:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d698:	920c      	str	r2, [sp, #48]	; 0x30
 800d69a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d69c:	1c57      	adds	r7, r2, #1
 800d69e:	9715      	str	r7, [sp, #84]	; 0x54
 800d6a0:	7852      	ldrb	r2, [r2, #1]
 800d6a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d6a6:	f1be 0f09 	cmp.w	lr, #9
 800d6aa:	d938      	bls.n	800d71e <_strtod_l+0x33e>
 800d6ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d6ae:	1a7f      	subs	r7, r7, r1
 800d6b0:	2f08      	cmp	r7, #8
 800d6b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d6b6:	dc03      	bgt.n	800d6c0 <_strtod_l+0x2e0>
 800d6b8:	9908      	ldr	r1, [sp, #32]
 800d6ba:	428f      	cmp	r7, r1
 800d6bc:	bfa8      	it	ge
 800d6be:	460f      	movge	r7, r1
 800d6c0:	f1bc 0f00 	cmp.w	ip, #0
 800d6c4:	d000      	beq.n	800d6c8 <_strtod_l+0x2e8>
 800d6c6:	427f      	negs	r7, r7
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	d14f      	bne.n	800d76c <_strtod_l+0x38c>
 800d6cc:	9904      	ldr	r1, [sp, #16]
 800d6ce:	4301      	orrs	r1, r0
 800d6d0:	f47f aec1 	bne.w	800d456 <_strtod_l+0x76>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f47f aedb 	bne.w	800d490 <_strtod_l+0xb0>
 800d6da:	2a69      	cmp	r2, #105	; 0x69
 800d6dc:	d029      	beq.n	800d732 <_strtod_l+0x352>
 800d6de:	dc26      	bgt.n	800d72e <_strtod_l+0x34e>
 800d6e0:	2a49      	cmp	r2, #73	; 0x49
 800d6e2:	d026      	beq.n	800d732 <_strtod_l+0x352>
 800d6e4:	2a4e      	cmp	r2, #78	; 0x4e
 800d6e6:	f47f aed3 	bne.w	800d490 <_strtod_l+0xb0>
 800d6ea:	499b      	ldr	r1, [pc, #620]	; (800d958 <_strtod_l+0x578>)
 800d6ec:	a815      	add	r0, sp, #84	; 0x54
 800d6ee:	f001 fa17 	bl	800eb20 <__match>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f43f aecc 	beq.w	800d490 <_strtod_l+0xb0>
 800d6f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b28      	cmp	r3, #40	; 0x28
 800d6fe:	d12f      	bne.n	800d760 <_strtod_l+0x380>
 800d700:	4996      	ldr	r1, [pc, #600]	; (800d95c <_strtod_l+0x57c>)
 800d702:	aa18      	add	r2, sp, #96	; 0x60
 800d704:	a815      	add	r0, sp, #84	; 0x54
 800d706:	f001 fa1f 	bl	800eb48 <__hexnan>
 800d70a:	2805      	cmp	r0, #5
 800d70c:	d128      	bne.n	800d760 <_strtod_l+0x380>
 800d70e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d710:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d714:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d718:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d71c:	e69b      	b.n	800d456 <_strtod_l+0x76>
 800d71e:	9f08      	ldr	r7, [sp, #32]
 800d720:	210a      	movs	r1, #10
 800d722:	fb01 2107 	mla	r1, r1, r7, r2
 800d726:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d72a:	9208      	str	r2, [sp, #32]
 800d72c:	e7b5      	b.n	800d69a <_strtod_l+0x2ba>
 800d72e:	2a6e      	cmp	r2, #110	; 0x6e
 800d730:	e7d9      	b.n	800d6e6 <_strtod_l+0x306>
 800d732:	498b      	ldr	r1, [pc, #556]	; (800d960 <_strtod_l+0x580>)
 800d734:	a815      	add	r0, sp, #84	; 0x54
 800d736:	f001 f9f3 	bl	800eb20 <__match>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	f43f aea8 	beq.w	800d490 <_strtod_l+0xb0>
 800d740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d742:	4988      	ldr	r1, [pc, #544]	; (800d964 <_strtod_l+0x584>)
 800d744:	3b01      	subs	r3, #1
 800d746:	a815      	add	r0, sp, #84	; 0x54
 800d748:	9315      	str	r3, [sp, #84]	; 0x54
 800d74a:	f001 f9e9 	bl	800eb20 <__match>
 800d74e:	b910      	cbnz	r0, 800d756 <_strtod_l+0x376>
 800d750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d752:	3301      	adds	r3, #1
 800d754:	9315      	str	r3, [sp, #84]	; 0x54
 800d756:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d974 <_strtod_l+0x594>
 800d75a:	f04f 0800 	mov.w	r8, #0
 800d75e:	e67a      	b.n	800d456 <_strtod_l+0x76>
 800d760:	4881      	ldr	r0, [pc, #516]	; (800d968 <_strtod_l+0x588>)
 800d762:	f000 fef9 	bl	800e558 <nan>
 800d766:	ec59 8b10 	vmov	r8, r9, d0
 800d76a:	e674      	b.n	800d456 <_strtod_l+0x76>
 800d76c:	9b05      	ldr	r3, [sp, #20]
 800d76e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d770:	1afb      	subs	r3, r7, r3
 800d772:	f1bb 0f00 	cmp.w	fp, #0
 800d776:	bf08      	it	eq
 800d778:	46b3      	moveq	fp, r6
 800d77a:	2e10      	cmp	r6, #16
 800d77c:	9308      	str	r3, [sp, #32]
 800d77e:	4635      	mov	r5, r6
 800d780:	bfa8      	it	ge
 800d782:	2510      	movge	r5, #16
 800d784:	f7f2 febe 	bl	8000504 <__aeabi_ui2d>
 800d788:	2e09      	cmp	r6, #9
 800d78a:	4680      	mov	r8, r0
 800d78c:	4689      	mov	r9, r1
 800d78e:	dd13      	ble.n	800d7b8 <_strtod_l+0x3d8>
 800d790:	4b76      	ldr	r3, [pc, #472]	; (800d96c <_strtod_l+0x58c>)
 800d792:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d796:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d79a:	f7f2 ff2d 	bl	80005f8 <__aeabi_dmul>
 800d79e:	4680      	mov	r8, r0
 800d7a0:	4650      	mov	r0, sl
 800d7a2:	4689      	mov	r9, r1
 800d7a4:	f7f2 feae 	bl	8000504 <__aeabi_ui2d>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	f7f2 fd6c 	bl	800028c <__adddf3>
 800d7b4:	4680      	mov	r8, r0
 800d7b6:	4689      	mov	r9, r1
 800d7b8:	2e0f      	cmp	r6, #15
 800d7ba:	dc38      	bgt.n	800d82e <_strtod_l+0x44e>
 800d7bc:	9b08      	ldr	r3, [sp, #32]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f43f ae49 	beq.w	800d456 <_strtod_l+0x76>
 800d7c4:	dd24      	ble.n	800d810 <_strtod_l+0x430>
 800d7c6:	2b16      	cmp	r3, #22
 800d7c8:	dc0b      	bgt.n	800d7e2 <_strtod_l+0x402>
 800d7ca:	4968      	ldr	r1, [pc, #416]	; (800d96c <_strtod_l+0x58c>)
 800d7cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d4:	4642      	mov	r2, r8
 800d7d6:	464b      	mov	r3, r9
 800d7d8:	f7f2 ff0e 	bl	80005f8 <__aeabi_dmul>
 800d7dc:	4680      	mov	r8, r0
 800d7de:	4689      	mov	r9, r1
 800d7e0:	e639      	b.n	800d456 <_strtod_l+0x76>
 800d7e2:	9a08      	ldr	r2, [sp, #32]
 800d7e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	db20      	blt.n	800d82e <_strtod_l+0x44e>
 800d7ec:	4c5f      	ldr	r4, [pc, #380]	; (800d96c <_strtod_l+0x58c>)
 800d7ee:	f1c6 060f 	rsb	r6, r6, #15
 800d7f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d7f6:	4642      	mov	r2, r8
 800d7f8:	464b      	mov	r3, r9
 800d7fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7fe:	f7f2 fefb 	bl	80005f8 <__aeabi_dmul>
 800d802:	9b08      	ldr	r3, [sp, #32]
 800d804:	1b9e      	subs	r6, r3, r6
 800d806:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d80a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d80e:	e7e3      	b.n	800d7d8 <_strtod_l+0x3f8>
 800d810:	9b08      	ldr	r3, [sp, #32]
 800d812:	3316      	adds	r3, #22
 800d814:	db0b      	blt.n	800d82e <_strtod_l+0x44e>
 800d816:	9b05      	ldr	r3, [sp, #20]
 800d818:	1bdf      	subs	r7, r3, r7
 800d81a:	4b54      	ldr	r3, [pc, #336]	; (800d96c <_strtod_l+0x58c>)
 800d81c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d824:	4640      	mov	r0, r8
 800d826:	4649      	mov	r1, r9
 800d828:	f7f3 f810 	bl	800084c <__aeabi_ddiv>
 800d82c:	e7d6      	b.n	800d7dc <_strtod_l+0x3fc>
 800d82e:	9b08      	ldr	r3, [sp, #32]
 800d830:	1b75      	subs	r5, r6, r5
 800d832:	441d      	add	r5, r3
 800d834:	2d00      	cmp	r5, #0
 800d836:	dd70      	ble.n	800d91a <_strtod_l+0x53a>
 800d838:	f015 030f 	ands.w	r3, r5, #15
 800d83c:	d00a      	beq.n	800d854 <_strtod_l+0x474>
 800d83e:	494b      	ldr	r1, [pc, #300]	; (800d96c <_strtod_l+0x58c>)
 800d840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d844:	4642      	mov	r2, r8
 800d846:	464b      	mov	r3, r9
 800d848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d84c:	f7f2 fed4 	bl	80005f8 <__aeabi_dmul>
 800d850:	4680      	mov	r8, r0
 800d852:	4689      	mov	r9, r1
 800d854:	f035 050f 	bics.w	r5, r5, #15
 800d858:	d04d      	beq.n	800d8f6 <_strtod_l+0x516>
 800d85a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d85e:	dd22      	ble.n	800d8a6 <_strtod_l+0x4c6>
 800d860:	2500      	movs	r5, #0
 800d862:	46ab      	mov	fp, r5
 800d864:	9509      	str	r5, [sp, #36]	; 0x24
 800d866:	9505      	str	r5, [sp, #20]
 800d868:	2322      	movs	r3, #34	; 0x22
 800d86a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d974 <_strtod_l+0x594>
 800d86e:	6023      	str	r3, [r4, #0]
 800d870:	f04f 0800 	mov.w	r8, #0
 800d874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d876:	2b00      	cmp	r3, #0
 800d878:	f43f aded 	beq.w	800d456 <_strtod_l+0x76>
 800d87c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d87e:	4620      	mov	r0, r4
 800d880:	f7ff f924 	bl	800cacc <_Bfree>
 800d884:	9905      	ldr	r1, [sp, #20]
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff f920 	bl	800cacc <_Bfree>
 800d88c:	4659      	mov	r1, fp
 800d88e:	4620      	mov	r0, r4
 800d890:	f7ff f91c 	bl	800cacc <_Bfree>
 800d894:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d896:	4620      	mov	r0, r4
 800d898:	f7ff f918 	bl	800cacc <_Bfree>
 800d89c:	4629      	mov	r1, r5
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7ff f914 	bl	800cacc <_Bfree>
 800d8a4:	e5d7      	b.n	800d456 <_strtod_l+0x76>
 800d8a6:	4b32      	ldr	r3, [pc, #200]	; (800d970 <_strtod_l+0x590>)
 800d8a8:	9304      	str	r3, [sp, #16]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	112d      	asrs	r5, r5, #4
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	469a      	mov	sl, r3
 800d8b4:	2d01      	cmp	r5, #1
 800d8b6:	dc21      	bgt.n	800d8fc <_strtod_l+0x51c>
 800d8b8:	b10b      	cbz	r3, 800d8be <_strtod_l+0x4de>
 800d8ba:	4680      	mov	r8, r0
 800d8bc:	4689      	mov	r9, r1
 800d8be:	492c      	ldr	r1, [pc, #176]	; (800d970 <_strtod_l+0x590>)
 800d8c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d8c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d8c8:	4642      	mov	r2, r8
 800d8ca:	464b      	mov	r3, r9
 800d8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8d0:	f7f2 fe92 	bl	80005f8 <__aeabi_dmul>
 800d8d4:	4b27      	ldr	r3, [pc, #156]	; (800d974 <_strtod_l+0x594>)
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	400b      	ands	r3, r1
 800d8da:	4927      	ldr	r1, [pc, #156]	; (800d978 <_strtod_l+0x598>)
 800d8dc:	428b      	cmp	r3, r1
 800d8de:	4680      	mov	r8, r0
 800d8e0:	d8be      	bhi.n	800d860 <_strtod_l+0x480>
 800d8e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d8e6:	428b      	cmp	r3, r1
 800d8e8:	bf86      	itte	hi
 800d8ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d97c <_strtod_l+0x59c>
 800d8ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800d8f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	e07b      	b.n	800d9f4 <_strtod_l+0x614>
 800d8fc:	07ea      	lsls	r2, r5, #31
 800d8fe:	d505      	bpl.n	800d90c <_strtod_l+0x52c>
 800d900:	9b04      	ldr	r3, [sp, #16]
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fe77 	bl	80005f8 <__aeabi_dmul>
 800d90a:	2301      	movs	r3, #1
 800d90c:	9a04      	ldr	r2, [sp, #16]
 800d90e:	3208      	adds	r2, #8
 800d910:	f10a 0a01 	add.w	sl, sl, #1
 800d914:	106d      	asrs	r5, r5, #1
 800d916:	9204      	str	r2, [sp, #16]
 800d918:	e7cc      	b.n	800d8b4 <_strtod_l+0x4d4>
 800d91a:	d0ec      	beq.n	800d8f6 <_strtod_l+0x516>
 800d91c:	426d      	negs	r5, r5
 800d91e:	f015 020f 	ands.w	r2, r5, #15
 800d922:	d00a      	beq.n	800d93a <_strtod_l+0x55a>
 800d924:	4b11      	ldr	r3, [pc, #68]	; (800d96c <_strtod_l+0x58c>)
 800d926:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d92a:	4640      	mov	r0, r8
 800d92c:	4649      	mov	r1, r9
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	f7f2 ff8b 	bl	800084c <__aeabi_ddiv>
 800d936:	4680      	mov	r8, r0
 800d938:	4689      	mov	r9, r1
 800d93a:	112d      	asrs	r5, r5, #4
 800d93c:	d0db      	beq.n	800d8f6 <_strtod_l+0x516>
 800d93e:	2d1f      	cmp	r5, #31
 800d940:	dd1e      	ble.n	800d980 <_strtod_l+0x5a0>
 800d942:	2500      	movs	r5, #0
 800d944:	46ab      	mov	fp, r5
 800d946:	9509      	str	r5, [sp, #36]	; 0x24
 800d948:	9505      	str	r5, [sp, #20]
 800d94a:	2322      	movs	r3, #34	; 0x22
 800d94c:	f04f 0800 	mov.w	r8, #0
 800d950:	f04f 0900 	mov.w	r9, #0
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	e78d      	b.n	800d874 <_strtod_l+0x494>
 800d958:	080105ea 	.word	0x080105ea
 800d95c:	08010814 	.word	0x08010814
 800d960:	080105e2 	.word	0x080105e2
 800d964:	08010619 	.word	0x08010619
 800d968:	080108a4 	.word	0x080108a4
 800d96c:	08010728 	.word	0x08010728
 800d970:	08010700 	.word	0x08010700
 800d974:	7ff00000 	.word	0x7ff00000
 800d978:	7ca00000 	.word	0x7ca00000
 800d97c:	7fefffff 	.word	0x7fefffff
 800d980:	f015 0310 	ands.w	r3, r5, #16
 800d984:	bf18      	it	ne
 800d986:	236a      	movne	r3, #106	; 0x6a
 800d988:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800dd2c <_strtod_l+0x94c>
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	4640      	mov	r0, r8
 800d990:	4649      	mov	r1, r9
 800d992:	2300      	movs	r3, #0
 800d994:	07ea      	lsls	r2, r5, #31
 800d996:	d504      	bpl.n	800d9a2 <_strtod_l+0x5c2>
 800d998:	e9da 2300 	ldrd	r2, r3, [sl]
 800d99c:	f7f2 fe2c 	bl	80005f8 <__aeabi_dmul>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	106d      	asrs	r5, r5, #1
 800d9a4:	f10a 0a08 	add.w	sl, sl, #8
 800d9a8:	d1f4      	bne.n	800d994 <_strtod_l+0x5b4>
 800d9aa:	b10b      	cbz	r3, 800d9b0 <_strtod_l+0x5d0>
 800d9ac:	4680      	mov	r8, r0
 800d9ae:	4689      	mov	r9, r1
 800d9b0:	9b04      	ldr	r3, [sp, #16]
 800d9b2:	b1bb      	cbz	r3, 800d9e4 <_strtod_l+0x604>
 800d9b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d9b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	4649      	mov	r1, r9
 800d9c0:	dd10      	ble.n	800d9e4 <_strtod_l+0x604>
 800d9c2:	2b1f      	cmp	r3, #31
 800d9c4:	f340 811e 	ble.w	800dc04 <_strtod_l+0x824>
 800d9c8:	2b34      	cmp	r3, #52	; 0x34
 800d9ca:	bfde      	ittt	le
 800d9cc:	f04f 33ff 	movle.w	r3, #4294967295
 800d9d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d9d4:	4093      	lslle	r3, r2
 800d9d6:	f04f 0800 	mov.w	r8, #0
 800d9da:	bfcc      	ite	gt
 800d9dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d9e0:	ea03 0901 	andle.w	r9, r3, r1
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	4640      	mov	r0, r8
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	f7f3 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d1a6      	bne.n	800d942 <_strtod_l+0x562>
 800d9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9fa:	4633      	mov	r3, r6
 800d9fc:	465a      	mov	r2, fp
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7ff f8cc 	bl	800cb9c <__s2b>
 800da04:	9009      	str	r0, [sp, #36]	; 0x24
 800da06:	2800      	cmp	r0, #0
 800da08:	f43f af2a 	beq.w	800d860 <_strtod_l+0x480>
 800da0c:	9a08      	ldr	r2, [sp, #32]
 800da0e:	9b05      	ldr	r3, [sp, #20]
 800da10:	2a00      	cmp	r2, #0
 800da12:	eba3 0307 	sub.w	r3, r3, r7
 800da16:	bfa8      	it	ge
 800da18:	2300      	movge	r3, #0
 800da1a:	930c      	str	r3, [sp, #48]	; 0x30
 800da1c:	2500      	movs	r5, #0
 800da1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da22:	9312      	str	r3, [sp, #72]	; 0x48
 800da24:	46ab      	mov	fp, r5
 800da26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da28:	4620      	mov	r0, r4
 800da2a:	6859      	ldr	r1, [r3, #4]
 800da2c:	f7ff f80e 	bl	800ca4c <_Balloc>
 800da30:	9005      	str	r0, [sp, #20]
 800da32:	2800      	cmp	r0, #0
 800da34:	f43f af18 	beq.w	800d868 <_strtod_l+0x488>
 800da38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	3202      	adds	r2, #2
 800da3e:	f103 010c 	add.w	r1, r3, #12
 800da42:	0092      	lsls	r2, r2, #2
 800da44:	300c      	adds	r0, #12
 800da46:	f7fe f872 	bl	800bb2e <memcpy>
 800da4a:	ec49 8b10 	vmov	d0, r8, r9
 800da4e:	aa18      	add	r2, sp, #96	; 0x60
 800da50:	a917      	add	r1, sp, #92	; 0x5c
 800da52:	4620      	mov	r0, r4
 800da54:	f7ff fbd6 	bl	800d204 <__d2b>
 800da58:	ec49 8b18 	vmov	d8, r8, r9
 800da5c:	9016      	str	r0, [sp, #88]	; 0x58
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f af02 	beq.w	800d868 <_strtod_l+0x488>
 800da64:	2101      	movs	r1, #1
 800da66:	4620      	mov	r0, r4
 800da68:	f7ff f930 	bl	800cccc <__i2b>
 800da6c:	4683      	mov	fp, r0
 800da6e:	2800      	cmp	r0, #0
 800da70:	f43f aefa 	beq.w	800d868 <_strtod_l+0x488>
 800da74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800da76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da78:	2e00      	cmp	r6, #0
 800da7a:	bfab      	itete	ge
 800da7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800da7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800da80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800da82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800da86:	bfac      	ite	ge
 800da88:	eb06 0a03 	addge.w	sl, r6, r3
 800da8c:	1b9f      	sublt	r7, r3, r6
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	1af6      	subs	r6, r6, r3
 800da92:	4416      	add	r6, r2
 800da94:	4ba0      	ldr	r3, [pc, #640]	; (800dd18 <_strtod_l+0x938>)
 800da96:	3e01      	subs	r6, #1
 800da98:	429e      	cmp	r6, r3
 800da9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da9e:	f280 80c4 	bge.w	800dc2a <_strtod_l+0x84a>
 800daa2:	1b9b      	subs	r3, r3, r6
 800daa4:	2b1f      	cmp	r3, #31
 800daa6:	eba2 0203 	sub.w	r2, r2, r3
 800daaa:	f04f 0101 	mov.w	r1, #1
 800daae:	f300 80b0 	bgt.w	800dc12 <_strtod_l+0x832>
 800dab2:	fa01 f303 	lsl.w	r3, r1, r3
 800dab6:	930e      	str	r3, [sp, #56]	; 0x38
 800dab8:	2300      	movs	r3, #0
 800daba:	930d      	str	r3, [sp, #52]	; 0x34
 800dabc:	eb0a 0602 	add.w	r6, sl, r2
 800dac0:	9b04      	ldr	r3, [sp, #16]
 800dac2:	45b2      	cmp	sl, r6
 800dac4:	4417      	add	r7, r2
 800dac6:	441f      	add	r7, r3
 800dac8:	4653      	mov	r3, sl
 800daca:	bfa8      	it	ge
 800dacc:	4633      	movge	r3, r6
 800dace:	42bb      	cmp	r3, r7
 800dad0:	bfa8      	it	ge
 800dad2:	463b      	movge	r3, r7
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	bfc2      	ittt	gt
 800dad8:	1af6      	subgt	r6, r6, r3
 800dada:	1aff      	subgt	r7, r7, r3
 800dadc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800dae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dd17      	ble.n	800db16 <_strtod_l+0x736>
 800dae6:	4659      	mov	r1, fp
 800dae8:	461a      	mov	r2, r3
 800daea:	4620      	mov	r0, r4
 800daec:	f7ff f9ae 	bl	800ce4c <__pow5mult>
 800daf0:	4683      	mov	fp, r0
 800daf2:	2800      	cmp	r0, #0
 800daf4:	f43f aeb8 	beq.w	800d868 <_strtod_l+0x488>
 800daf8:	4601      	mov	r1, r0
 800dafa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dafc:	4620      	mov	r0, r4
 800dafe:	f7ff f8fb 	bl	800ccf8 <__multiply>
 800db02:	900b      	str	r0, [sp, #44]	; 0x2c
 800db04:	2800      	cmp	r0, #0
 800db06:	f43f aeaf 	beq.w	800d868 <_strtod_l+0x488>
 800db0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7fe ffdd 	bl	800cacc <_Bfree>
 800db12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db14:	9316      	str	r3, [sp, #88]	; 0x58
 800db16:	2e00      	cmp	r6, #0
 800db18:	f300 808c 	bgt.w	800dc34 <_strtod_l+0x854>
 800db1c:	9b08      	ldr	r3, [sp, #32]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	dd08      	ble.n	800db34 <_strtod_l+0x754>
 800db22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db24:	9905      	ldr	r1, [sp, #20]
 800db26:	4620      	mov	r0, r4
 800db28:	f7ff f990 	bl	800ce4c <__pow5mult>
 800db2c:	9005      	str	r0, [sp, #20]
 800db2e:	2800      	cmp	r0, #0
 800db30:	f43f ae9a 	beq.w	800d868 <_strtod_l+0x488>
 800db34:	2f00      	cmp	r7, #0
 800db36:	dd08      	ble.n	800db4a <_strtod_l+0x76a>
 800db38:	9905      	ldr	r1, [sp, #20]
 800db3a:	463a      	mov	r2, r7
 800db3c:	4620      	mov	r0, r4
 800db3e:	f7ff f9df 	bl	800cf00 <__lshift>
 800db42:	9005      	str	r0, [sp, #20]
 800db44:	2800      	cmp	r0, #0
 800db46:	f43f ae8f 	beq.w	800d868 <_strtod_l+0x488>
 800db4a:	f1ba 0f00 	cmp.w	sl, #0
 800db4e:	dd08      	ble.n	800db62 <_strtod_l+0x782>
 800db50:	4659      	mov	r1, fp
 800db52:	4652      	mov	r2, sl
 800db54:	4620      	mov	r0, r4
 800db56:	f7ff f9d3 	bl	800cf00 <__lshift>
 800db5a:	4683      	mov	fp, r0
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f43f ae83 	beq.w	800d868 <_strtod_l+0x488>
 800db62:	9a05      	ldr	r2, [sp, #20]
 800db64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db66:	4620      	mov	r0, r4
 800db68:	f7ff fa52 	bl	800d010 <__mdiff>
 800db6c:	4605      	mov	r5, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f ae7a 	beq.w	800d868 <_strtod_l+0x488>
 800db74:	68c3      	ldr	r3, [r0, #12]
 800db76:	930b      	str	r3, [sp, #44]	; 0x2c
 800db78:	2300      	movs	r3, #0
 800db7a:	60c3      	str	r3, [r0, #12]
 800db7c:	4659      	mov	r1, fp
 800db7e:	f7ff fa2b 	bl	800cfd8 <__mcmp>
 800db82:	2800      	cmp	r0, #0
 800db84:	da60      	bge.n	800dc48 <_strtod_l+0x868>
 800db86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db88:	ea53 0308 	orrs.w	r3, r3, r8
 800db8c:	f040 8084 	bne.w	800dc98 <_strtod_l+0x8b8>
 800db90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db94:	2b00      	cmp	r3, #0
 800db96:	d17f      	bne.n	800dc98 <_strtod_l+0x8b8>
 800db98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db9c:	0d1b      	lsrs	r3, r3, #20
 800db9e:	051b      	lsls	r3, r3, #20
 800dba0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dba4:	d978      	bls.n	800dc98 <_strtod_l+0x8b8>
 800dba6:	696b      	ldr	r3, [r5, #20]
 800dba8:	b913      	cbnz	r3, 800dbb0 <_strtod_l+0x7d0>
 800dbaa:	692b      	ldr	r3, [r5, #16]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	dd73      	ble.n	800dc98 <_strtod_l+0x8b8>
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7ff f9a3 	bl	800cf00 <__lshift>
 800dbba:	4659      	mov	r1, fp
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	f7ff fa0b 	bl	800cfd8 <__mcmp>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	dd68      	ble.n	800dc98 <_strtod_l+0x8b8>
 800dbc6:	9904      	ldr	r1, [sp, #16]
 800dbc8:	4a54      	ldr	r2, [pc, #336]	; (800dd1c <_strtod_l+0x93c>)
 800dbca:	464b      	mov	r3, r9
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	f000 8084 	beq.w	800dcda <_strtod_l+0x8fa>
 800dbd2:	ea02 0109 	and.w	r1, r2, r9
 800dbd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dbda:	dc7e      	bgt.n	800dcda <_strtod_l+0x8fa>
 800dbdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dbe0:	f77f aeb3 	ble.w	800d94a <_strtod_l+0x56a>
 800dbe4:	4b4e      	ldr	r3, [pc, #312]	; (800dd20 <_strtod_l+0x940>)
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	4649      	mov	r1, r9
 800dbea:	2200      	movs	r2, #0
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	4b4a      	ldr	r3, [pc, #296]	; (800dd1c <_strtod_l+0x93c>)
 800dbf2:	400b      	ands	r3, r1
 800dbf4:	4680      	mov	r8, r0
 800dbf6:	4689      	mov	r9, r1
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f47f ae3f 	bne.w	800d87c <_strtod_l+0x49c>
 800dbfe:	2322      	movs	r3, #34	; 0x22
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	e63b      	b.n	800d87c <_strtod_l+0x49c>
 800dc04:	f04f 32ff 	mov.w	r2, #4294967295
 800dc08:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0c:	ea03 0808 	and.w	r8, r3, r8
 800dc10:	e6e8      	b.n	800d9e4 <_strtod_l+0x604>
 800dc12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dc16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dc1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dc1e:	36e2      	adds	r6, #226	; 0xe2
 800dc20:	fa01 f306 	lsl.w	r3, r1, r6
 800dc24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800dc28:	e748      	b.n	800dabc <_strtod_l+0x6dc>
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800dc32:	e743      	b.n	800dabc <_strtod_l+0x6dc>
 800dc34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc36:	4632      	mov	r2, r6
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f7ff f961 	bl	800cf00 <__lshift>
 800dc3e:	9016      	str	r0, [sp, #88]	; 0x58
 800dc40:	2800      	cmp	r0, #0
 800dc42:	f47f af6b 	bne.w	800db1c <_strtod_l+0x73c>
 800dc46:	e60f      	b.n	800d868 <_strtod_l+0x488>
 800dc48:	46ca      	mov	sl, r9
 800dc4a:	d171      	bne.n	800dd30 <_strtod_l+0x950>
 800dc4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc52:	b352      	cbz	r2, 800dcaa <_strtod_l+0x8ca>
 800dc54:	4a33      	ldr	r2, [pc, #204]	; (800dd24 <_strtod_l+0x944>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d12a      	bne.n	800dcb0 <_strtod_l+0x8d0>
 800dc5a:	9b04      	ldr	r3, [sp, #16]
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	b1fb      	cbz	r3, 800dca0 <_strtod_l+0x8c0>
 800dc60:	4b2e      	ldr	r3, [pc, #184]	; (800dd1c <_strtod_l+0x93c>)
 800dc62:	ea09 0303 	and.w	r3, r9, r3
 800dc66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6e:	d81a      	bhi.n	800dca6 <_strtod_l+0x8c6>
 800dc70:	0d1b      	lsrs	r3, r3, #20
 800dc72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc76:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7a:	4299      	cmp	r1, r3
 800dc7c:	d118      	bne.n	800dcb0 <_strtod_l+0x8d0>
 800dc7e:	4b2a      	ldr	r3, [pc, #168]	; (800dd28 <_strtod_l+0x948>)
 800dc80:	459a      	cmp	sl, r3
 800dc82:	d102      	bne.n	800dc8a <_strtod_l+0x8aa>
 800dc84:	3101      	adds	r1, #1
 800dc86:	f43f adef 	beq.w	800d868 <_strtod_l+0x488>
 800dc8a:	4b24      	ldr	r3, [pc, #144]	; (800dd1c <_strtod_l+0x93c>)
 800dc8c:	ea0a 0303 	and.w	r3, sl, r3
 800dc90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800dc94:	f04f 0800 	mov.w	r8, #0
 800dc98:	9b04      	ldr	r3, [sp, #16]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1a2      	bne.n	800dbe4 <_strtod_l+0x804>
 800dc9e:	e5ed      	b.n	800d87c <_strtod_l+0x49c>
 800dca0:	f04f 33ff 	mov.w	r3, #4294967295
 800dca4:	e7e9      	b.n	800dc7a <_strtod_l+0x89a>
 800dca6:	4613      	mov	r3, r2
 800dca8:	e7e7      	b.n	800dc7a <_strtod_l+0x89a>
 800dcaa:	ea53 0308 	orrs.w	r3, r3, r8
 800dcae:	d08a      	beq.n	800dbc6 <_strtod_l+0x7e6>
 800dcb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcb2:	b1e3      	cbz	r3, 800dcee <_strtod_l+0x90e>
 800dcb4:	ea13 0f0a 	tst.w	r3, sl
 800dcb8:	d0ee      	beq.n	800dc98 <_strtod_l+0x8b8>
 800dcba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcbc:	9a04      	ldr	r2, [sp, #16]
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	b1c3      	cbz	r3, 800dcf6 <_strtod_l+0x916>
 800dcc4:	f7ff fb6f 	bl	800d3a6 <sulp>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	ec51 0b18 	vmov	r0, r1, d8
 800dcd0:	f7f2 fadc 	bl	800028c <__adddf3>
 800dcd4:	4680      	mov	r8, r0
 800dcd6:	4689      	mov	r9, r1
 800dcd8:	e7de      	b.n	800dc98 <_strtod_l+0x8b8>
 800dcda:	4013      	ands	r3, r2
 800dcdc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dce0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800dce4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800dce8:	f04f 38ff 	mov.w	r8, #4294967295
 800dcec:	e7d4      	b.n	800dc98 <_strtod_l+0x8b8>
 800dcee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcf0:	ea13 0f08 	tst.w	r3, r8
 800dcf4:	e7e0      	b.n	800dcb8 <_strtod_l+0x8d8>
 800dcf6:	f7ff fb56 	bl	800d3a6 <sulp>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	ec51 0b18 	vmov	r0, r1, d8
 800dd02:	f7f2 fac1 	bl	8000288 <__aeabi_dsub>
 800dd06:	2200      	movs	r2, #0
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	f7f2 fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d0c0      	beq.n	800dc98 <_strtod_l+0x8b8>
 800dd16:	e618      	b.n	800d94a <_strtod_l+0x56a>
 800dd18:	fffffc02 	.word	0xfffffc02
 800dd1c:	7ff00000 	.word	0x7ff00000
 800dd20:	39500000 	.word	0x39500000
 800dd24:	000fffff 	.word	0x000fffff
 800dd28:	7fefffff 	.word	0x7fefffff
 800dd2c:	08010828 	.word	0x08010828
 800dd30:	4659      	mov	r1, fp
 800dd32:	4628      	mov	r0, r5
 800dd34:	f7ff fac0 	bl	800d2b8 <__ratio>
 800dd38:	ec57 6b10 	vmov	r6, r7, d0
 800dd3c:	ee10 0a10 	vmov	r0, s0
 800dd40:	2200      	movs	r2, #0
 800dd42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd46:	4639      	mov	r1, r7
 800dd48:	f7f2 fed2 	bl	8000af0 <__aeabi_dcmple>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d071      	beq.n	800de34 <_strtod_l+0xa54>
 800dd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d17c      	bne.n	800de50 <_strtod_l+0xa70>
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d15a      	bne.n	800de12 <_strtod_l+0xa32>
 800dd5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d15d      	bne.n	800de20 <_strtod_l+0xa40>
 800dd64:	4b90      	ldr	r3, [pc, #576]	; (800dfa8 <_strtod_l+0xbc8>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	4630      	mov	r0, r6
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	f7f2 feb6 	bl	8000adc <__aeabi_dcmplt>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d15c      	bne.n	800de2e <_strtod_l+0xa4e>
 800dd74:	4630      	mov	r0, r6
 800dd76:	4639      	mov	r1, r7
 800dd78:	4b8c      	ldr	r3, [pc, #560]	; (800dfac <_strtod_l+0xbcc>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f7f2 fc3c 	bl	80005f8 <__aeabi_dmul>
 800dd80:	4606      	mov	r6, r0
 800dd82:	460f      	mov	r7, r1
 800dd84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dd88:	9606      	str	r6, [sp, #24]
 800dd8a:	9307      	str	r3, [sp, #28]
 800dd8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800dd94:	4b86      	ldr	r3, [pc, #536]	; (800dfb0 <_strtod_l+0xbd0>)
 800dd96:	ea0a 0303 	and.w	r3, sl, r3
 800dd9a:	930d      	str	r3, [sp, #52]	; 0x34
 800dd9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd9e:	4b85      	ldr	r3, [pc, #532]	; (800dfb4 <_strtod_l+0xbd4>)
 800dda0:	429a      	cmp	r2, r3
 800dda2:	f040 8090 	bne.w	800dec6 <_strtod_l+0xae6>
 800dda6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ddaa:	ec49 8b10 	vmov	d0, r8, r9
 800ddae:	f7ff f9b9 	bl	800d124 <__ulp>
 800ddb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddb6:	ec51 0b10 	vmov	r0, r1, d0
 800ddba:	f7f2 fc1d 	bl	80005f8 <__aeabi_dmul>
 800ddbe:	4642      	mov	r2, r8
 800ddc0:	464b      	mov	r3, r9
 800ddc2:	f7f2 fa63 	bl	800028c <__adddf3>
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4979      	ldr	r1, [pc, #484]	; (800dfb0 <_strtod_l+0xbd0>)
 800ddca:	4a7b      	ldr	r2, [pc, #492]	; (800dfb8 <_strtod_l+0xbd8>)
 800ddcc:	4019      	ands	r1, r3
 800ddce:	4291      	cmp	r1, r2
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	d944      	bls.n	800de5e <_strtod_l+0xa7e>
 800ddd4:	ee18 2a90 	vmov	r2, s17
 800ddd8:	4b78      	ldr	r3, [pc, #480]	; (800dfbc <_strtod_l+0xbdc>)
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d104      	bne.n	800dde8 <_strtod_l+0xa08>
 800ddde:	ee18 3a10 	vmov	r3, s16
 800dde2:	3301      	adds	r3, #1
 800dde4:	f43f ad40 	beq.w	800d868 <_strtod_l+0x488>
 800dde8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dfbc <_strtod_l+0xbdc>
 800ddec:	f04f 38ff 	mov.w	r8, #4294967295
 800ddf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7fe fe6a 	bl	800cacc <_Bfree>
 800ddf8:	9905      	ldr	r1, [sp, #20]
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7fe fe66 	bl	800cacc <_Bfree>
 800de00:	4659      	mov	r1, fp
 800de02:	4620      	mov	r0, r4
 800de04:	f7fe fe62 	bl	800cacc <_Bfree>
 800de08:	4629      	mov	r1, r5
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7fe fe5e 	bl	800cacc <_Bfree>
 800de10:	e609      	b.n	800da26 <_strtod_l+0x646>
 800de12:	f1b8 0f01 	cmp.w	r8, #1
 800de16:	d103      	bne.n	800de20 <_strtod_l+0xa40>
 800de18:	f1b9 0f00 	cmp.w	r9, #0
 800de1c:	f43f ad95 	beq.w	800d94a <_strtod_l+0x56a>
 800de20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800df78 <_strtod_l+0xb98>
 800de24:	4f60      	ldr	r7, [pc, #384]	; (800dfa8 <_strtod_l+0xbc8>)
 800de26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de2a:	2600      	movs	r6, #0
 800de2c:	e7ae      	b.n	800dd8c <_strtod_l+0x9ac>
 800de2e:	4f5f      	ldr	r7, [pc, #380]	; (800dfac <_strtod_l+0xbcc>)
 800de30:	2600      	movs	r6, #0
 800de32:	e7a7      	b.n	800dd84 <_strtod_l+0x9a4>
 800de34:	4b5d      	ldr	r3, [pc, #372]	; (800dfac <_strtod_l+0xbcc>)
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	2200      	movs	r2, #0
 800de3c:	f7f2 fbdc 	bl	80005f8 <__aeabi_dmul>
 800de40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d09c      	beq.n	800dd84 <_strtod_l+0x9a4>
 800de4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de4e:	e79d      	b.n	800dd8c <_strtod_l+0x9ac>
 800de50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800df80 <_strtod_l+0xba0>
 800de54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de58:	ec57 6b17 	vmov	r6, r7, d7
 800de5c:	e796      	b.n	800dd8c <_strtod_l+0x9ac>
 800de5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	46ca      	mov	sl, r9
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1c2      	bne.n	800ddf0 <_strtod_l+0xa10>
 800de6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de70:	0d1b      	lsrs	r3, r3, #20
 800de72:	051b      	lsls	r3, r3, #20
 800de74:	429a      	cmp	r2, r3
 800de76:	d1bb      	bne.n	800ddf0 <_strtod_l+0xa10>
 800de78:	4630      	mov	r0, r6
 800de7a:	4639      	mov	r1, r7
 800de7c:	f7f2 ff1c 	bl	8000cb8 <__aeabi_d2lz>
 800de80:	f7f2 fb8c 	bl	800059c <__aeabi_l2d>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	4630      	mov	r0, r6
 800de8a:	4639      	mov	r1, r7
 800de8c:	f7f2 f9fc 	bl	8000288 <__aeabi_dsub>
 800de90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de96:	ea43 0308 	orr.w	r3, r3, r8
 800de9a:	4313      	orrs	r3, r2
 800de9c:	4606      	mov	r6, r0
 800de9e:	460f      	mov	r7, r1
 800dea0:	d054      	beq.n	800df4c <_strtod_l+0xb6c>
 800dea2:	a339      	add	r3, pc, #228	; (adr r3, 800df88 <_strtod_l+0xba8>)
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	f7f2 fe18 	bl	8000adc <__aeabi_dcmplt>
 800deac:	2800      	cmp	r0, #0
 800deae:	f47f ace5 	bne.w	800d87c <_strtod_l+0x49c>
 800deb2:	a337      	add	r3, pc, #220	; (adr r3, 800df90 <_strtod_l+0xbb0>)
 800deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb8:	4630      	mov	r0, r6
 800deba:	4639      	mov	r1, r7
 800debc:	f7f2 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d095      	beq.n	800ddf0 <_strtod_l+0xa10>
 800dec4:	e4da      	b.n	800d87c <_strtod_l+0x49c>
 800dec6:	9b04      	ldr	r3, [sp, #16]
 800dec8:	b333      	cbz	r3, 800df18 <_strtod_l+0xb38>
 800deca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800decc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ded0:	d822      	bhi.n	800df18 <_strtod_l+0xb38>
 800ded2:	a331      	add	r3, pc, #196	; (adr r3, 800df98 <_strtod_l+0xbb8>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	4630      	mov	r0, r6
 800deda:	4639      	mov	r1, r7
 800dedc:	f7f2 fe08 	bl	8000af0 <__aeabi_dcmple>
 800dee0:	b1a0      	cbz	r0, 800df0c <_strtod_l+0xb2c>
 800dee2:	4639      	mov	r1, r7
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7f2 fe5f 	bl	8000ba8 <__aeabi_d2uiz>
 800deea:	2801      	cmp	r0, #1
 800deec:	bf38      	it	cc
 800deee:	2001      	movcc	r0, #1
 800def0:	f7f2 fb08 	bl	8000504 <__aeabi_ui2d>
 800def4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	bb23      	cbnz	r3, 800df46 <_strtod_l+0xb66>
 800defc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df00:	9010      	str	r0, [sp, #64]	; 0x40
 800df02:	9311      	str	r3, [sp, #68]	; 0x44
 800df04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800df0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df14:	1a9b      	subs	r3, r3, r2
 800df16:	930f      	str	r3, [sp, #60]	; 0x3c
 800df18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df1c:	eeb0 0a48 	vmov.f32	s0, s16
 800df20:	eef0 0a68 	vmov.f32	s1, s17
 800df24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800df28:	f7ff f8fc 	bl	800d124 <__ulp>
 800df2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df30:	ec53 2b10 	vmov	r2, r3, d0
 800df34:	f7f2 fb60 	bl	80005f8 <__aeabi_dmul>
 800df38:	ec53 2b18 	vmov	r2, r3, d8
 800df3c:	f7f2 f9a6 	bl	800028c <__adddf3>
 800df40:	4680      	mov	r8, r0
 800df42:	4689      	mov	r9, r1
 800df44:	e78d      	b.n	800de62 <_strtod_l+0xa82>
 800df46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800df4a:	e7db      	b.n	800df04 <_strtod_l+0xb24>
 800df4c:	a314      	add	r3, pc, #80	; (adr r3, 800dfa0 <_strtod_l+0xbc0>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	f7f2 fdc3 	bl	8000adc <__aeabi_dcmplt>
 800df56:	e7b3      	b.n	800dec0 <_strtod_l+0xae0>
 800df58:	2300      	movs	r3, #0
 800df5a:	930a      	str	r3, [sp, #40]	; 0x28
 800df5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	f7ff ba7c 	b.w	800d45e <_strtod_l+0x7e>
 800df66:	2a65      	cmp	r2, #101	; 0x65
 800df68:	f43f ab75 	beq.w	800d656 <_strtod_l+0x276>
 800df6c:	2a45      	cmp	r2, #69	; 0x45
 800df6e:	f43f ab72 	beq.w	800d656 <_strtod_l+0x276>
 800df72:	2301      	movs	r3, #1
 800df74:	f7ff bbaa 	b.w	800d6cc <_strtod_l+0x2ec>
 800df78:	00000000 	.word	0x00000000
 800df7c:	bff00000 	.word	0xbff00000
 800df80:	00000000 	.word	0x00000000
 800df84:	3ff00000 	.word	0x3ff00000
 800df88:	94a03595 	.word	0x94a03595
 800df8c:	3fdfffff 	.word	0x3fdfffff
 800df90:	35afe535 	.word	0x35afe535
 800df94:	3fe00000 	.word	0x3fe00000
 800df98:	ffc00000 	.word	0xffc00000
 800df9c:	41dfffff 	.word	0x41dfffff
 800dfa0:	94a03595 	.word	0x94a03595
 800dfa4:	3fcfffff 	.word	0x3fcfffff
 800dfa8:	3ff00000 	.word	0x3ff00000
 800dfac:	3fe00000 	.word	0x3fe00000
 800dfb0:	7ff00000 	.word	0x7ff00000
 800dfb4:	7fe00000 	.word	0x7fe00000
 800dfb8:	7c9fffff 	.word	0x7c9fffff
 800dfbc:	7fefffff 	.word	0x7fefffff

0800dfc0 <_strtod_r>:
 800dfc0:	4b01      	ldr	r3, [pc, #4]	; (800dfc8 <_strtod_r+0x8>)
 800dfc2:	f7ff ba0d 	b.w	800d3e0 <_strtod_l>
 800dfc6:	bf00      	nop
 800dfc8:	20000094 	.word	0x20000094

0800dfcc <_strtol_l.constprop.0>:
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd2:	d001      	beq.n	800dfd8 <_strtol_l.constprop.0+0xc>
 800dfd4:	2b24      	cmp	r3, #36	; 0x24
 800dfd6:	d906      	bls.n	800dfe6 <_strtol_l.constprop.0+0x1a>
 800dfd8:	f7fd fd7c 	bl	800bad4 <__errno>
 800dfdc:	2316      	movs	r3, #22
 800dfde:	6003      	str	r3, [r0, #0]
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e0cc <_strtol_l.constprop.0+0x100>
 800dfea:	460d      	mov	r5, r1
 800dfec:	462e      	mov	r6, r5
 800dfee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dff2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dff6:	f017 0708 	ands.w	r7, r7, #8
 800dffa:	d1f7      	bne.n	800dfec <_strtol_l.constprop.0+0x20>
 800dffc:	2c2d      	cmp	r4, #45	; 0x2d
 800dffe:	d132      	bne.n	800e066 <_strtol_l.constprop.0+0x9a>
 800e000:	782c      	ldrb	r4, [r5, #0]
 800e002:	2701      	movs	r7, #1
 800e004:	1cb5      	adds	r5, r6, #2
 800e006:	2b00      	cmp	r3, #0
 800e008:	d05b      	beq.n	800e0c2 <_strtol_l.constprop.0+0xf6>
 800e00a:	2b10      	cmp	r3, #16
 800e00c:	d109      	bne.n	800e022 <_strtol_l.constprop.0+0x56>
 800e00e:	2c30      	cmp	r4, #48	; 0x30
 800e010:	d107      	bne.n	800e022 <_strtol_l.constprop.0+0x56>
 800e012:	782c      	ldrb	r4, [r5, #0]
 800e014:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e018:	2c58      	cmp	r4, #88	; 0x58
 800e01a:	d14d      	bne.n	800e0b8 <_strtol_l.constprop.0+0xec>
 800e01c:	786c      	ldrb	r4, [r5, #1]
 800e01e:	2310      	movs	r3, #16
 800e020:	3502      	adds	r5, #2
 800e022:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e026:	f108 38ff 	add.w	r8, r8, #4294967295
 800e02a:	f04f 0e00 	mov.w	lr, #0
 800e02e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e032:	4676      	mov	r6, lr
 800e034:	fb03 8a19 	mls	sl, r3, r9, r8
 800e038:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e03c:	f1bc 0f09 	cmp.w	ip, #9
 800e040:	d816      	bhi.n	800e070 <_strtol_l.constprop.0+0xa4>
 800e042:	4664      	mov	r4, ip
 800e044:	42a3      	cmp	r3, r4
 800e046:	dd24      	ble.n	800e092 <_strtol_l.constprop.0+0xc6>
 800e048:	f1be 3fff 	cmp.w	lr, #4294967295
 800e04c:	d008      	beq.n	800e060 <_strtol_l.constprop.0+0x94>
 800e04e:	45b1      	cmp	r9, r6
 800e050:	d31c      	bcc.n	800e08c <_strtol_l.constprop.0+0xc0>
 800e052:	d101      	bne.n	800e058 <_strtol_l.constprop.0+0x8c>
 800e054:	45a2      	cmp	sl, r4
 800e056:	db19      	blt.n	800e08c <_strtol_l.constprop.0+0xc0>
 800e058:	fb06 4603 	mla	r6, r6, r3, r4
 800e05c:	f04f 0e01 	mov.w	lr, #1
 800e060:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e064:	e7e8      	b.n	800e038 <_strtol_l.constprop.0+0x6c>
 800e066:	2c2b      	cmp	r4, #43	; 0x2b
 800e068:	bf04      	itt	eq
 800e06a:	782c      	ldrbeq	r4, [r5, #0]
 800e06c:	1cb5      	addeq	r5, r6, #2
 800e06e:	e7ca      	b.n	800e006 <_strtol_l.constprop.0+0x3a>
 800e070:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e074:	f1bc 0f19 	cmp.w	ip, #25
 800e078:	d801      	bhi.n	800e07e <_strtol_l.constprop.0+0xb2>
 800e07a:	3c37      	subs	r4, #55	; 0x37
 800e07c:	e7e2      	b.n	800e044 <_strtol_l.constprop.0+0x78>
 800e07e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e082:	f1bc 0f19 	cmp.w	ip, #25
 800e086:	d804      	bhi.n	800e092 <_strtol_l.constprop.0+0xc6>
 800e088:	3c57      	subs	r4, #87	; 0x57
 800e08a:	e7db      	b.n	800e044 <_strtol_l.constprop.0+0x78>
 800e08c:	f04f 3eff 	mov.w	lr, #4294967295
 800e090:	e7e6      	b.n	800e060 <_strtol_l.constprop.0+0x94>
 800e092:	f1be 3fff 	cmp.w	lr, #4294967295
 800e096:	d105      	bne.n	800e0a4 <_strtol_l.constprop.0+0xd8>
 800e098:	2322      	movs	r3, #34	; 0x22
 800e09a:	6003      	str	r3, [r0, #0]
 800e09c:	4646      	mov	r6, r8
 800e09e:	b942      	cbnz	r2, 800e0b2 <_strtol_l.constprop.0+0xe6>
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	e79e      	b.n	800dfe2 <_strtol_l.constprop.0+0x16>
 800e0a4:	b107      	cbz	r7, 800e0a8 <_strtol_l.constprop.0+0xdc>
 800e0a6:	4276      	negs	r6, r6
 800e0a8:	2a00      	cmp	r2, #0
 800e0aa:	d0f9      	beq.n	800e0a0 <_strtol_l.constprop.0+0xd4>
 800e0ac:	f1be 0f00 	cmp.w	lr, #0
 800e0b0:	d000      	beq.n	800e0b4 <_strtol_l.constprop.0+0xe8>
 800e0b2:	1e69      	subs	r1, r5, #1
 800e0b4:	6011      	str	r1, [r2, #0]
 800e0b6:	e7f3      	b.n	800e0a0 <_strtol_l.constprop.0+0xd4>
 800e0b8:	2430      	movs	r4, #48	; 0x30
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1b1      	bne.n	800e022 <_strtol_l.constprop.0+0x56>
 800e0be:	2308      	movs	r3, #8
 800e0c0:	e7af      	b.n	800e022 <_strtol_l.constprop.0+0x56>
 800e0c2:	2c30      	cmp	r4, #48	; 0x30
 800e0c4:	d0a5      	beq.n	800e012 <_strtol_l.constprop.0+0x46>
 800e0c6:	230a      	movs	r3, #10
 800e0c8:	e7ab      	b.n	800e022 <_strtol_l.constprop.0+0x56>
 800e0ca:	bf00      	nop
 800e0cc:	080104dd 	.word	0x080104dd

0800e0d0 <_strtol_r>:
 800e0d0:	f7ff bf7c 	b.w	800dfcc <_strtol_l.constprop.0>

0800e0d4 <__ssputs_r>:
 800e0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d8:	688e      	ldr	r6, [r1, #8]
 800e0da:	461f      	mov	r7, r3
 800e0dc:	42be      	cmp	r6, r7
 800e0de:	680b      	ldr	r3, [r1, #0]
 800e0e0:	4682      	mov	sl, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	4690      	mov	r8, r2
 800e0e6:	d82c      	bhi.n	800e142 <__ssputs_r+0x6e>
 800e0e8:	898a      	ldrh	r2, [r1, #12]
 800e0ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0ee:	d026      	beq.n	800e13e <__ssputs_r+0x6a>
 800e0f0:	6965      	ldr	r5, [r4, #20]
 800e0f2:	6909      	ldr	r1, [r1, #16]
 800e0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0f8:	eba3 0901 	sub.w	r9, r3, r1
 800e0fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e100:	1c7b      	adds	r3, r7, #1
 800e102:	444b      	add	r3, r9
 800e104:	106d      	asrs	r5, r5, #1
 800e106:	429d      	cmp	r5, r3
 800e108:	bf38      	it	cc
 800e10a:	461d      	movcc	r5, r3
 800e10c:	0553      	lsls	r3, r2, #21
 800e10e:	d527      	bpl.n	800e160 <__ssputs_r+0x8c>
 800e110:	4629      	mov	r1, r5
 800e112:	f7fe fc0f 	bl	800c934 <_malloc_r>
 800e116:	4606      	mov	r6, r0
 800e118:	b360      	cbz	r0, 800e174 <__ssputs_r+0xa0>
 800e11a:	6921      	ldr	r1, [r4, #16]
 800e11c:	464a      	mov	r2, r9
 800e11e:	f7fd fd06 	bl	800bb2e <memcpy>
 800e122:	89a3      	ldrh	r3, [r4, #12]
 800e124:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e12c:	81a3      	strh	r3, [r4, #12]
 800e12e:	6126      	str	r6, [r4, #16]
 800e130:	6165      	str	r5, [r4, #20]
 800e132:	444e      	add	r6, r9
 800e134:	eba5 0509 	sub.w	r5, r5, r9
 800e138:	6026      	str	r6, [r4, #0]
 800e13a:	60a5      	str	r5, [r4, #8]
 800e13c:	463e      	mov	r6, r7
 800e13e:	42be      	cmp	r6, r7
 800e140:	d900      	bls.n	800e144 <__ssputs_r+0x70>
 800e142:	463e      	mov	r6, r7
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	4632      	mov	r2, r6
 800e148:	4641      	mov	r1, r8
 800e14a:	f000 f9c9 	bl	800e4e0 <memmove>
 800e14e:	68a3      	ldr	r3, [r4, #8]
 800e150:	1b9b      	subs	r3, r3, r6
 800e152:	60a3      	str	r3, [r4, #8]
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	4433      	add	r3, r6
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	2000      	movs	r0, #0
 800e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e160:	462a      	mov	r2, r5
 800e162:	f000 fd9e 	bl	800eca2 <_realloc_r>
 800e166:	4606      	mov	r6, r0
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1e0      	bne.n	800e12e <__ssputs_r+0x5a>
 800e16c:	6921      	ldr	r1, [r4, #16]
 800e16e:	4650      	mov	r0, sl
 800e170:	f7fe fb6c 	bl	800c84c <_free_r>
 800e174:	230c      	movs	r3, #12
 800e176:	f8ca 3000 	str.w	r3, [sl]
 800e17a:	89a3      	ldrh	r3, [r4, #12]
 800e17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	e7e9      	b.n	800e15c <__ssputs_r+0x88>

0800e188 <_svfiprintf_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4698      	mov	r8, r3
 800e18e:	898b      	ldrh	r3, [r1, #12]
 800e190:	061b      	lsls	r3, r3, #24
 800e192:	b09d      	sub	sp, #116	; 0x74
 800e194:	4607      	mov	r7, r0
 800e196:	460d      	mov	r5, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	d50e      	bpl.n	800e1ba <_svfiprintf_r+0x32>
 800e19c:	690b      	ldr	r3, [r1, #16]
 800e19e:	b963      	cbnz	r3, 800e1ba <_svfiprintf_r+0x32>
 800e1a0:	2140      	movs	r1, #64	; 0x40
 800e1a2:	f7fe fbc7 	bl	800c934 <_malloc_r>
 800e1a6:	6028      	str	r0, [r5, #0]
 800e1a8:	6128      	str	r0, [r5, #16]
 800e1aa:	b920      	cbnz	r0, 800e1b6 <_svfiprintf_r+0x2e>
 800e1ac:	230c      	movs	r3, #12
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b4:	e0d0      	b.n	800e358 <_svfiprintf_r+0x1d0>
 800e1b6:	2340      	movs	r3, #64	; 0x40
 800e1b8:	616b      	str	r3, [r5, #20]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1be:	2320      	movs	r3, #32
 800e1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c8:	2330      	movs	r3, #48	; 0x30
 800e1ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e370 <_svfiprintf_r+0x1e8>
 800e1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1d2:	f04f 0901 	mov.w	r9, #1
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	469a      	mov	sl, r3
 800e1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1de:	b10a      	cbz	r2, 800e1e4 <_svfiprintf_r+0x5c>
 800e1e0:	2a25      	cmp	r2, #37	; 0x25
 800e1e2:	d1f9      	bne.n	800e1d8 <_svfiprintf_r+0x50>
 800e1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e8:	d00b      	beq.n	800e202 <_svfiprintf_r+0x7a>
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7ff ff6f 	bl	800e0d4 <__ssputs_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f000 80a9 	beq.w	800e34e <_svfiprintf_r+0x1c6>
 800e1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1fe:	445a      	add	r2, fp
 800e200:	9209      	str	r2, [sp, #36]	; 0x24
 800e202:	f89a 3000 	ldrb.w	r3, [sl]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 80a1 	beq.w	800e34e <_svfiprintf_r+0x1c6>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e216:	f10a 0a01 	add.w	sl, sl, #1
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e222:	931a      	str	r3, [sp, #104]	; 0x68
 800e224:	4654      	mov	r4, sl
 800e226:	2205      	movs	r2, #5
 800e228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22c:	4850      	ldr	r0, [pc, #320]	; (800e370 <_svfiprintf_r+0x1e8>)
 800e22e:	f7f1 ffcf 	bl	80001d0 <memchr>
 800e232:	9a04      	ldr	r2, [sp, #16]
 800e234:	b9d8      	cbnz	r0, 800e26e <_svfiprintf_r+0xe6>
 800e236:	06d0      	lsls	r0, r2, #27
 800e238:	bf44      	itt	mi
 800e23a:	2320      	movmi	r3, #32
 800e23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e240:	0711      	lsls	r1, r2, #28
 800e242:	bf44      	itt	mi
 800e244:	232b      	movmi	r3, #43	; 0x2b
 800e246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e24a:	f89a 3000 	ldrb.w	r3, [sl]
 800e24e:	2b2a      	cmp	r3, #42	; 0x2a
 800e250:	d015      	beq.n	800e27e <_svfiprintf_r+0xf6>
 800e252:	9a07      	ldr	r2, [sp, #28]
 800e254:	4654      	mov	r4, sl
 800e256:	2000      	movs	r0, #0
 800e258:	f04f 0c0a 	mov.w	ip, #10
 800e25c:	4621      	mov	r1, r4
 800e25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e262:	3b30      	subs	r3, #48	; 0x30
 800e264:	2b09      	cmp	r3, #9
 800e266:	d94d      	bls.n	800e304 <_svfiprintf_r+0x17c>
 800e268:	b1b0      	cbz	r0, 800e298 <_svfiprintf_r+0x110>
 800e26a:	9207      	str	r2, [sp, #28]
 800e26c:	e014      	b.n	800e298 <_svfiprintf_r+0x110>
 800e26e:	eba0 0308 	sub.w	r3, r0, r8
 800e272:	fa09 f303 	lsl.w	r3, r9, r3
 800e276:	4313      	orrs	r3, r2
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	46a2      	mov	sl, r4
 800e27c:	e7d2      	b.n	800e224 <_svfiprintf_r+0x9c>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d19      	adds	r1, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9103      	str	r1, [sp, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfbb      	ittet	lt
 800e28a:	425b      	neglt	r3, r3
 800e28c:	f042 0202 	orrlt.w	r2, r2, #2
 800e290:	9307      	strge	r3, [sp, #28]
 800e292:	9307      	strlt	r3, [sp, #28]
 800e294:	bfb8      	it	lt
 800e296:	9204      	strlt	r2, [sp, #16]
 800e298:	7823      	ldrb	r3, [r4, #0]
 800e29a:	2b2e      	cmp	r3, #46	; 0x2e
 800e29c:	d10c      	bne.n	800e2b8 <_svfiprintf_r+0x130>
 800e29e:	7863      	ldrb	r3, [r4, #1]
 800e2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2a2:	d134      	bne.n	800e30e <_svfiprintf_r+0x186>
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	1d1a      	adds	r2, r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	9203      	str	r2, [sp, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	bfb8      	it	lt
 800e2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2b4:	3402      	adds	r4, #2
 800e2b6:	9305      	str	r3, [sp, #20]
 800e2b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e380 <_svfiprintf_r+0x1f8>
 800e2bc:	7821      	ldrb	r1, [r4, #0]
 800e2be:	2203      	movs	r2, #3
 800e2c0:	4650      	mov	r0, sl
 800e2c2:	f7f1 ff85 	bl	80001d0 <memchr>
 800e2c6:	b138      	cbz	r0, 800e2d8 <_svfiprintf_r+0x150>
 800e2c8:	9b04      	ldr	r3, [sp, #16]
 800e2ca:	eba0 000a 	sub.w	r0, r0, sl
 800e2ce:	2240      	movs	r2, #64	; 0x40
 800e2d0:	4082      	lsls	r2, r0
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	3401      	adds	r4, #1
 800e2d6:	9304      	str	r3, [sp, #16]
 800e2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2dc:	4825      	ldr	r0, [pc, #148]	; (800e374 <_svfiprintf_r+0x1ec>)
 800e2de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2e2:	2206      	movs	r2, #6
 800e2e4:	f7f1 ff74 	bl	80001d0 <memchr>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d038      	beq.n	800e35e <_svfiprintf_r+0x1d6>
 800e2ec:	4b22      	ldr	r3, [pc, #136]	; (800e378 <_svfiprintf_r+0x1f0>)
 800e2ee:	bb1b      	cbnz	r3, 800e338 <_svfiprintf_r+0x1b0>
 800e2f0:	9b03      	ldr	r3, [sp, #12]
 800e2f2:	3307      	adds	r3, #7
 800e2f4:	f023 0307 	bic.w	r3, r3, #7
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	9303      	str	r3, [sp, #12]
 800e2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fe:	4433      	add	r3, r6
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	e768      	b.n	800e1d6 <_svfiprintf_r+0x4e>
 800e304:	fb0c 3202 	mla	r2, ip, r2, r3
 800e308:	460c      	mov	r4, r1
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7a6      	b.n	800e25c <_svfiprintf_r+0xd4>
 800e30e:	2300      	movs	r3, #0
 800e310:	3401      	adds	r4, #1
 800e312:	9305      	str	r3, [sp, #20]
 800e314:	4619      	mov	r1, r3
 800e316:	f04f 0c0a 	mov.w	ip, #10
 800e31a:	4620      	mov	r0, r4
 800e31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e320:	3a30      	subs	r2, #48	; 0x30
 800e322:	2a09      	cmp	r2, #9
 800e324:	d903      	bls.n	800e32e <_svfiprintf_r+0x1a6>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d0c6      	beq.n	800e2b8 <_svfiprintf_r+0x130>
 800e32a:	9105      	str	r1, [sp, #20]
 800e32c:	e7c4      	b.n	800e2b8 <_svfiprintf_r+0x130>
 800e32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e332:	4604      	mov	r4, r0
 800e334:	2301      	movs	r3, #1
 800e336:	e7f0      	b.n	800e31a <_svfiprintf_r+0x192>
 800e338:	ab03      	add	r3, sp, #12
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	462a      	mov	r2, r5
 800e33e:	4b0f      	ldr	r3, [pc, #60]	; (800e37c <_svfiprintf_r+0x1f4>)
 800e340:	a904      	add	r1, sp, #16
 800e342:	4638      	mov	r0, r7
 800e344:	f7fc fc78 	bl	800ac38 <_printf_float>
 800e348:	1c42      	adds	r2, r0, #1
 800e34a:	4606      	mov	r6, r0
 800e34c:	d1d6      	bne.n	800e2fc <_svfiprintf_r+0x174>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	065b      	lsls	r3, r3, #25
 800e352:	f53f af2d 	bmi.w	800e1b0 <_svfiprintf_r+0x28>
 800e356:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e358:	b01d      	add	sp, #116	; 0x74
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	462a      	mov	r2, r5
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <_svfiprintf_r+0x1f4>)
 800e366:	a904      	add	r1, sp, #16
 800e368:	4638      	mov	r0, r7
 800e36a:	f7fc ff09 	bl	800b180 <_printf_i>
 800e36e:	e7eb      	b.n	800e348 <_svfiprintf_r+0x1c0>
 800e370:	08010850 	.word	0x08010850
 800e374:	0801085a 	.word	0x0801085a
 800e378:	0800ac39 	.word	0x0800ac39
 800e37c:	0800e0d5 	.word	0x0800e0d5
 800e380:	08010856 	.word	0x08010856

0800e384 <__sflush_r>:
 800e384:	898a      	ldrh	r2, [r1, #12]
 800e386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38a:	4605      	mov	r5, r0
 800e38c:	0710      	lsls	r0, r2, #28
 800e38e:	460c      	mov	r4, r1
 800e390:	d458      	bmi.n	800e444 <__sflush_r+0xc0>
 800e392:	684b      	ldr	r3, [r1, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	dc05      	bgt.n	800e3a4 <__sflush_r+0x20>
 800e398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	dc02      	bgt.n	800e3a4 <__sflush_r+0x20>
 800e39e:	2000      	movs	r0, #0
 800e3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	d0f9      	beq.n	800e39e <__sflush_r+0x1a>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3b0:	682f      	ldr	r7, [r5, #0]
 800e3b2:	6a21      	ldr	r1, [r4, #32]
 800e3b4:	602b      	str	r3, [r5, #0]
 800e3b6:	d032      	beq.n	800e41e <__sflush_r+0x9a>
 800e3b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3ba:	89a3      	ldrh	r3, [r4, #12]
 800e3bc:	075a      	lsls	r2, r3, #29
 800e3be:	d505      	bpl.n	800e3cc <__sflush_r+0x48>
 800e3c0:	6863      	ldr	r3, [r4, #4]
 800e3c2:	1ac0      	subs	r0, r0, r3
 800e3c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3c6:	b10b      	cbz	r3, 800e3cc <__sflush_r+0x48>
 800e3c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3ca:	1ac0      	subs	r0, r0, r3
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3d2:	6a21      	ldr	r1, [r4, #32]
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b0      	blx	r6
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	d106      	bne.n	800e3ec <__sflush_r+0x68>
 800e3de:	6829      	ldr	r1, [r5, #0]
 800e3e0:	291d      	cmp	r1, #29
 800e3e2:	d82b      	bhi.n	800e43c <__sflush_r+0xb8>
 800e3e4:	4a29      	ldr	r2, [pc, #164]	; (800e48c <__sflush_r+0x108>)
 800e3e6:	410a      	asrs	r2, r1
 800e3e8:	07d6      	lsls	r6, r2, #31
 800e3ea:	d427      	bmi.n	800e43c <__sflush_r+0xb8>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	6062      	str	r2, [r4, #4]
 800e3f0:	04d9      	lsls	r1, r3, #19
 800e3f2:	6922      	ldr	r2, [r4, #16]
 800e3f4:	6022      	str	r2, [r4, #0]
 800e3f6:	d504      	bpl.n	800e402 <__sflush_r+0x7e>
 800e3f8:	1c42      	adds	r2, r0, #1
 800e3fa:	d101      	bne.n	800e400 <__sflush_r+0x7c>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	b903      	cbnz	r3, 800e402 <__sflush_r+0x7e>
 800e400:	6560      	str	r0, [r4, #84]	; 0x54
 800e402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e404:	602f      	str	r7, [r5, #0]
 800e406:	2900      	cmp	r1, #0
 800e408:	d0c9      	beq.n	800e39e <__sflush_r+0x1a>
 800e40a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e40e:	4299      	cmp	r1, r3
 800e410:	d002      	beq.n	800e418 <__sflush_r+0x94>
 800e412:	4628      	mov	r0, r5
 800e414:	f7fe fa1a 	bl	800c84c <_free_r>
 800e418:	2000      	movs	r0, #0
 800e41a:	6360      	str	r0, [r4, #52]	; 0x34
 800e41c:	e7c0      	b.n	800e3a0 <__sflush_r+0x1c>
 800e41e:	2301      	movs	r3, #1
 800e420:	4628      	mov	r0, r5
 800e422:	47b0      	blx	r6
 800e424:	1c41      	adds	r1, r0, #1
 800e426:	d1c8      	bne.n	800e3ba <__sflush_r+0x36>
 800e428:	682b      	ldr	r3, [r5, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0c5      	beq.n	800e3ba <__sflush_r+0x36>
 800e42e:	2b1d      	cmp	r3, #29
 800e430:	d001      	beq.n	800e436 <__sflush_r+0xb2>
 800e432:	2b16      	cmp	r3, #22
 800e434:	d101      	bne.n	800e43a <__sflush_r+0xb6>
 800e436:	602f      	str	r7, [r5, #0]
 800e438:	e7b1      	b.n	800e39e <__sflush_r+0x1a>
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	e7ad      	b.n	800e3a0 <__sflush_r+0x1c>
 800e444:	690f      	ldr	r7, [r1, #16]
 800e446:	2f00      	cmp	r7, #0
 800e448:	d0a9      	beq.n	800e39e <__sflush_r+0x1a>
 800e44a:	0793      	lsls	r3, r2, #30
 800e44c:	680e      	ldr	r6, [r1, #0]
 800e44e:	bf08      	it	eq
 800e450:	694b      	ldreq	r3, [r1, #20]
 800e452:	600f      	str	r7, [r1, #0]
 800e454:	bf18      	it	ne
 800e456:	2300      	movne	r3, #0
 800e458:	eba6 0807 	sub.w	r8, r6, r7
 800e45c:	608b      	str	r3, [r1, #8]
 800e45e:	f1b8 0f00 	cmp.w	r8, #0
 800e462:	dd9c      	ble.n	800e39e <__sflush_r+0x1a>
 800e464:	6a21      	ldr	r1, [r4, #32]
 800e466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e468:	4643      	mov	r3, r8
 800e46a:	463a      	mov	r2, r7
 800e46c:	4628      	mov	r0, r5
 800e46e:	47b0      	blx	r6
 800e470:	2800      	cmp	r0, #0
 800e472:	dc06      	bgt.n	800e482 <__sflush_r+0xfe>
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e47a:	81a3      	strh	r3, [r4, #12]
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295
 800e480:	e78e      	b.n	800e3a0 <__sflush_r+0x1c>
 800e482:	4407      	add	r7, r0
 800e484:	eba8 0800 	sub.w	r8, r8, r0
 800e488:	e7e9      	b.n	800e45e <__sflush_r+0xda>
 800e48a:	bf00      	nop
 800e48c:	dfbffffe 	.word	0xdfbffffe

0800e490 <_fflush_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	690b      	ldr	r3, [r1, #16]
 800e494:	4605      	mov	r5, r0
 800e496:	460c      	mov	r4, r1
 800e498:	b913      	cbnz	r3, 800e4a0 <_fflush_r+0x10>
 800e49a:	2500      	movs	r5, #0
 800e49c:	4628      	mov	r0, r5
 800e49e:	bd38      	pop	{r3, r4, r5, pc}
 800e4a0:	b118      	cbz	r0, 800e4aa <_fflush_r+0x1a>
 800e4a2:	6a03      	ldr	r3, [r0, #32]
 800e4a4:	b90b      	cbnz	r3, 800e4aa <_fflush_r+0x1a>
 800e4a6:	f7fd fa29 	bl	800b8fc <__sinit>
 800e4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0f3      	beq.n	800e49a <_fflush_r+0xa>
 800e4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4b4:	07d0      	lsls	r0, r2, #31
 800e4b6:	d404      	bmi.n	800e4c2 <_fflush_r+0x32>
 800e4b8:	0599      	lsls	r1, r3, #22
 800e4ba:	d402      	bmi.n	800e4c2 <_fflush_r+0x32>
 800e4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4be:	f7fd fb34 	bl	800bb2a <__retarget_lock_acquire_recursive>
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f7ff ff5d 	bl	800e384 <__sflush_r>
 800e4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4cc:	07da      	lsls	r2, r3, #31
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	d4e4      	bmi.n	800e49c <_fflush_r+0xc>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	059b      	lsls	r3, r3, #22
 800e4d6:	d4e1      	bmi.n	800e49c <_fflush_r+0xc>
 800e4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4da:	f7fd fb27 	bl	800bb2c <__retarget_lock_release_recursive>
 800e4de:	e7dd      	b.n	800e49c <_fflush_r+0xc>

0800e4e0 <memmove>:
 800e4e0:	4288      	cmp	r0, r1
 800e4e2:	b510      	push	{r4, lr}
 800e4e4:	eb01 0402 	add.w	r4, r1, r2
 800e4e8:	d902      	bls.n	800e4f0 <memmove+0x10>
 800e4ea:	4284      	cmp	r4, r0
 800e4ec:	4623      	mov	r3, r4
 800e4ee:	d807      	bhi.n	800e500 <memmove+0x20>
 800e4f0:	1e43      	subs	r3, r0, #1
 800e4f2:	42a1      	cmp	r1, r4
 800e4f4:	d008      	beq.n	800e508 <memmove+0x28>
 800e4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4fe:	e7f8      	b.n	800e4f2 <memmove+0x12>
 800e500:	4402      	add	r2, r0
 800e502:	4601      	mov	r1, r0
 800e504:	428a      	cmp	r2, r1
 800e506:	d100      	bne.n	800e50a <memmove+0x2a>
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e512:	e7f7      	b.n	800e504 <memmove+0x24>

0800e514 <strncmp>:
 800e514:	b510      	push	{r4, lr}
 800e516:	b16a      	cbz	r2, 800e534 <strncmp+0x20>
 800e518:	3901      	subs	r1, #1
 800e51a:	1884      	adds	r4, r0, r2
 800e51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e520:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e524:	429a      	cmp	r2, r3
 800e526:	d103      	bne.n	800e530 <strncmp+0x1c>
 800e528:	42a0      	cmp	r0, r4
 800e52a:	d001      	beq.n	800e530 <strncmp+0x1c>
 800e52c:	2a00      	cmp	r2, #0
 800e52e:	d1f5      	bne.n	800e51c <strncmp+0x8>
 800e530:	1ad0      	subs	r0, r2, r3
 800e532:	bd10      	pop	{r4, pc}
 800e534:	4610      	mov	r0, r2
 800e536:	e7fc      	b.n	800e532 <strncmp+0x1e>

0800e538 <_sbrk_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d06      	ldr	r5, [pc, #24]	; (800e554 <_sbrk_r+0x1c>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	602b      	str	r3, [r5, #0]
 800e544:	f7f4 fe38 	bl	80031b8 <_sbrk>
 800e548:	1c43      	adds	r3, r0, #1
 800e54a:	d102      	bne.n	800e552 <_sbrk_r+0x1a>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	b103      	cbz	r3, 800e552 <_sbrk_r+0x1a>
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	bd38      	pop	{r3, r4, r5, pc}
 800e554:	20005498 	.word	0x20005498

0800e558 <nan>:
 800e558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e560 <nan+0x8>
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	00000000 	.word	0x00000000
 800e564:	7ff80000 	.word	0x7ff80000

0800e568 <__assert_func>:
 800e568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e56a:	4614      	mov	r4, r2
 800e56c:	461a      	mov	r2, r3
 800e56e:	4b09      	ldr	r3, [pc, #36]	; (800e594 <__assert_func+0x2c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4605      	mov	r5, r0
 800e574:	68d8      	ldr	r0, [r3, #12]
 800e576:	b14c      	cbz	r4, 800e58c <__assert_func+0x24>
 800e578:	4b07      	ldr	r3, [pc, #28]	; (800e598 <__assert_func+0x30>)
 800e57a:	9100      	str	r1, [sp, #0]
 800e57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e580:	4906      	ldr	r1, [pc, #24]	; (800e59c <__assert_func+0x34>)
 800e582:	462b      	mov	r3, r5
 800e584:	f000 fbca 	bl	800ed1c <fiprintf>
 800e588:	f000 fbda 	bl	800ed40 <abort>
 800e58c:	4b04      	ldr	r3, [pc, #16]	; (800e5a0 <__assert_func+0x38>)
 800e58e:	461c      	mov	r4, r3
 800e590:	e7f3      	b.n	800e57a <__assert_func+0x12>
 800e592:	bf00      	nop
 800e594:	20000090 	.word	0x20000090
 800e598:	08010869 	.word	0x08010869
 800e59c:	08010876 	.word	0x08010876
 800e5a0:	080108a4 	.word	0x080108a4

0800e5a4 <_calloc_r>:
 800e5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5a6:	fba1 2402 	umull	r2, r4, r1, r2
 800e5aa:	b94c      	cbnz	r4, 800e5c0 <_calloc_r+0x1c>
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	9201      	str	r2, [sp, #4]
 800e5b0:	f7fe f9c0 	bl	800c934 <_malloc_r>
 800e5b4:	9a01      	ldr	r2, [sp, #4]
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	b930      	cbnz	r0, 800e5c8 <_calloc_r+0x24>
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	b003      	add	sp, #12
 800e5be:	bd30      	pop	{r4, r5, pc}
 800e5c0:	220c      	movs	r2, #12
 800e5c2:	6002      	str	r2, [r0, #0]
 800e5c4:	2500      	movs	r5, #0
 800e5c6:	e7f8      	b.n	800e5ba <_calloc_r+0x16>
 800e5c8:	4621      	mov	r1, r4
 800e5ca:	f7fd fa30 	bl	800ba2e <memset>
 800e5ce:	e7f4      	b.n	800e5ba <_calloc_r+0x16>

0800e5d0 <rshift>:
 800e5d0:	6903      	ldr	r3, [r0, #16]
 800e5d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e5d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e5de:	f100 0414 	add.w	r4, r0, #20
 800e5e2:	dd45      	ble.n	800e670 <rshift+0xa0>
 800e5e4:	f011 011f 	ands.w	r1, r1, #31
 800e5e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5f0:	d10c      	bne.n	800e60c <rshift+0x3c>
 800e5f2:	f100 0710 	add.w	r7, r0, #16
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	42b1      	cmp	r1, r6
 800e5fa:	d334      	bcc.n	800e666 <rshift+0x96>
 800e5fc:	1a9b      	subs	r3, r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	1eea      	subs	r2, r5, #3
 800e602:	4296      	cmp	r6, r2
 800e604:	bf38      	it	cc
 800e606:	2300      	movcc	r3, #0
 800e608:	4423      	add	r3, r4
 800e60a:	e015      	b.n	800e638 <rshift+0x68>
 800e60c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e610:	f1c1 0820 	rsb	r8, r1, #32
 800e614:	40cf      	lsrs	r7, r1
 800e616:	f105 0e04 	add.w	lr, r5, #4
 800e61a:	46a1      	mov	r9, r4
 800e61c:	4576      	cmp	r6, lr
 800e61e:	46f4      	mov	ip, lr
 800e620:	d815      	bhi.n	800e64e <rshift+0x7e>
 800e622:	1a9a      	subs	r2, r3, r2
 800e624:	0092      	lsls	r2, r2, #2
 800e626:	3a04      	subs	r2, #4
 800e628:	3501      	adds	r5, #1
 800e62a:	42ae      	cmp	r6, r5
 800e62c:	bf38      	it	cc
 800e62e:	2200      	movcc	r2, #0
 800e630:	18a3      	adds	r3, r4, r2
 800e632:	50a7      	str	r7, [r4, r2]
 800e634:	b107      	cbz	r7, 800e638 <rshift+0x68>
 800e636:	3304      	adds	r3, #4
 800e638:	1b1a      	subs	r2, r3, r4
 800e63a:	42a3      	cmp	r3, r4
 800e63c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e640:	bf08      	it	eq
 800e642:	2300      	moveq	r3, #0
 800e644:	6102      	str	r2, [r0, #16]
 800e646:	bf08      	it	eq
 800e648:	6143      	streq	r3, [r0, #20]
 800e64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e64e:	f8dc c000 	ldr.w	ip, [ip]
 800e652:	fa0c fc08 	lsl.w	ip, ip, r8
 800e656:	ea4c 0707 	orr.w	r7, ip, r7
 800e65a:	f849 7b04 	str.w	r7, [r9], #4
 800e65e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e662:	40cf      	lsrs	r7, r1
 800e664:	e7da      	b.n	800e61c <rshift+0x4c>
 800e666:	f851 cb04 	ldr.w	ip, [r1], #4
 800e66a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e66e:	e7c3      	b.n	800e5f8 <rshift+0x28>
 800e670:	4623      	mov	r3, r4
 800e672:	e7e1      	b.n	800e638 <rshift+0x68>

0800e674 <__hexdig_fun>:
 800e674:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e678:	2b09      	cmp	r3, #9
 800e67a:	d802      	bhi.n	800e682 <__hexdig_fun+0xe>
 800e67c:	3820      	subs	r0, #32
 800e67e:	b2c0      	uxtb	r0, r0
 800e680:	4770      	bx	lr
 800e682:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e686:	2b05      	cmp	r3, #5
 800e688:	d801      	bhi.n	800e68e <__hexdig_fun+0x1a>
 800e68a:	3847      	subs	r0, #71	; 0x47
 800e68c:	e7f7      	b.n	800e67e <__hexdig_fun+0xa>
 800e68e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e692:	2b05      	cmp	r3, #5
 800e694:	d801      	bhi.n	800e69a <__hexdig_fun+0x26>
 800e696:	3827      	subs	r0, #39	; 0x27
 800e698:	e7f1      	b.n	800e67e <__hexdig_fun+0xa>
 800e69a:	2000      	movs	r0, #0
 800e69c:	4770      	bx	lr
	...

0800e6a0 <__gethex>:
 800e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	4617      	mov	r7, r2
 800e6a6:	680a      	ldr	r2, [r1, #0]
 800e6a8:	b085      	sub	sp, #20
 800e6aa:	f102 0b02 	add.w	fp, r2, #2
 800e6ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e6b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e6b6:	4681      	mov	r9, r0
 800e6b8:	468a      	mov	sl, r1
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	32fe      	adds	r2, #254	; 0xfe
 800e6be:	eb02 030b 	add.w	r3, r2, fp
 800e6c2:	46d8      	mov	r8, fp
 800e6c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e6c8:	9301      	str	r3, [sp, #4]
 800e6ca:	2830      	cmp	r0, #48	; 0x30
 800e6cc:	d0f7      	beq.n	800e6be <__gethex+0x1e>
 800e6ce:	f7ff ffd1 	bl	800e674 <__hexdig_fun>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d138      	bne.n	800e74a <__gethex+0xaa>
 800e6d8:	49a7      	ldr	r1, [pc, #668]	; (800e978 <__gethex+0x2d8>)
 800e6da:	2201      	movs	r2, #1
 800e6dc:	4640      	mov	r0, r8
 800e6de:	f7ff ff19 	bl	800e514 <strncmp>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d169      	bne.n	800e7bc <__gethex+0x11c>
 800e6e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e6ec:	465d      	mov	r5, fp
 800e6ee:	f7ff ffc1 	bl	800e674 <__hexdig_fun>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d064      	beq.n	800e7c0 <__gethex+0x120>
 800e6f6:	465a      	mov	r2, fp
 800e6f8:	7810      	ldrb	r0, [r2, #0]
 800e6fa:	2830      	cmp	r0, #48	; 0x30
 800e6fc:	4690      	mov	r8, r2
 800e6fe:	f102 0201 	add.w	r2, r2, #1
 800e702:	d0f9      	beq.n	800e6f8 <__gethex+0x58>
 800e704:	f7ff ffb6 	bl	800e674 <__hexdig_fun>
 800e708:	2301      	movs	r3, #1
 800e70a:	fab0 f480 	clz	r4, r0
 800e70e:	0964      	lsrs	r4, r4, #5
 800e710:	465e      	mov	r6, fp
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	4642      	mov	r2, r8
 800e716:	4615      	mov	r5, r2
 800e718:	3201      	adds	r2, #1
 800e71a:	7828      	ldrb	r0, [r5, #0]
 800e71c:	f7ff ffaa 	bl	800e674 <__hexdig_fun>
 800e720:	2800      	cmp	r0, #0
 800e722:	d1f8      	bne.n	800e716 <__gethex+0x76>
 800e724:	4994      	ldr	r1, [pc, #592]	; (800e978 <__gethex+0x2d8>)
 800e726:	2201      	movs	r2, #1
 800e728:	4628      	mov	r0, r5
 800e72a:	f7ff fef3 	bl	800e514 <strncmp>
 800e72e:	b978      	cbnz	r0, 800e750 <__gethex+0xb0>
 800e730:	b946      	cbnz	r6, 800e744 <__gethex+0xa4>
 800e732:	1c6e      	adds	r6, r5, #1
 800e734:	4632      	mov	r2, r6
 800e736:	4615      	mov	r5, r2
 800e738:	3201      	adds	r2, #1
 800e73a:	7828      	ldrb	r0, [r5, #0]
 800e73c:	f7ff ff9a 	bl	800e674 <__hexdig_fun>
 800e740:	2800      	cmp	r0, #0
 800e742:	d1f8      	bne.n	800e736 <__gethex+0x96>
 800e744:	1b73      	subs	r3, r6, r5
 800e746:	009e      	lsls	r6, r3, #2
 800e748:	e004      	b.n	800e754 <__gethex+0xb4>
 800e74a:	2400      	movs	r4, #0
 800e74c:	4626      	mov	r6, r4
 800e74e:	e7e1      	b.n	800e714 <__gethex+0x74>
 800e750:	2e00      	cmp	r6, #0
 800e752:	d1f7      	bne.n	800e744 <__gethex+0xa4>
 800e754:	782b      	ldrb	r3, [r5, #0]
 800e756:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e75a:	2b50      	cmp	r3, #80	; 0x50
 800e75c:	d13d      	bne.n	800e7da <__gethex+0x13a>
 800e75e:	786b      	ldrb	r3, [r5, #1]
 800e760:	2b2b      	cmp	r3, #43	; 0x2b
 800e762:	d02f      	beq.n	800e7c4 <__gethex+0x124>
 800e764:	2b2d      	cmp	r3, #45	; 0x2d
 800e766:	d031      	beq.n	800e7cc <__gethex+0x12c>
 800e768:	1c69      	adds	r1, r5, #1
 800e76a:	f04f 0b00 	mov.w	fp, #0
 800e76e:	7808      	ldrb	r0, [r1, #0]
 800e770:	f7ff ff80 	bl	800e674 <__hexdig_fun>
 800e774:	1e42      	subs	r2, r0, #1
 800e776:	b2d2      	uxtb	r2, r2
 800e778:	2a18      	cmp	r2, #24
 800e77a:	d82e      	bhi.n	800e7da <__gethex+0x13a>
 800e77c:	f1a0 0210 	sub.w	r2, r0, #16
 800e780:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e784:	f7ff ff76 	bl	800e674 <__hexdig_fun>
 800e788:	f100 3cff 	add.w	ip, r0, #4294967295
 800e78c:	fa5f fc8c 	uxtb.w	ip, ip
 800e790:	f1bc 0f18 	cmp.w	ip, #24
 800e794:	d91d      	bls.n	800e7d2 <__gethex+0x132>
 800e796:	f1bb 0f00 	cmp.w	fp, #0
 800e79a:	d000      	beq.n	800e79e <__gethex+0xfe>
 800e79c:	4252      	negs	r2, r2
 800e79e:	4416      	add	r6, r2
 800e7a0:	f8ca 1000 	str.w	r1, [sl]
 800e7a4:	b1dc      	cbz	r4, 800e7de <__gethex+0x13e>
 800e7a6:	9b01      	ldr	r3, [sp, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	bf14      	ite	ne
 800e7ac:	f04f 0800 	movne.w	r8, #0
 800e7b0:	f04f 0806 	moveq.w	r8, #6
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	b005      	add	sp, #20
 800e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7bc:	4645      	mov	r5, r8
 800e7be:	4626      	mov	r6, r4
 800e7c0:	2401      	movs	r4, #1
 800e7c2:	e7c7      	b.n	800e754 <__gethex+0xb4>
 800e7c4:	f04f 0b00 	mov.w	fp, #0
 800e7c8:	1ca9      	adds	r1, r5, #2
 800e7ca:	e7d0      	b.n	800e76e <__gethex+0xce>
 800e7cc:	f04f 0b01 	mov.w	fp, #1
 800e7d0:	e7fa      	b.n	800e7c8 <__gethex+0x128>
 800e7d2:	230a      	movs	r3, #10
 800e7d4:	fb03 0002 	mla	r0, r3, r2, r0
 800e7d8:	e7d0      	b.n	800e77c <__gethex+0xdc>
 800e7da:	4629      	mov	r1, r5
 800e7dc:	e7e0      	b.n	800e7a0 <__gethex+0x100>
 800e7de:	eba5 0308 	sub.w	r3, r5, r8
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	2b07      	cmp	r3, #7
 800e7e8:	dc0a      	bgt.n	800e800 <__gethex+0x160>
 800e7ea:	4648      	mov	r0, r9
 800e7ec:	f7fe f92e 	bl	800ca4c <_Balloc>
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	b940      	cbnz	r0, 800e806 <__gethex+0x166>
 800e7f4:	4b61      	ldr	r3, [pc, #388]	; (800e97c <__gethex+0x2dc>)
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	21e4      	movs	r1, #228	; 0xe4
 800e7fa:	4861      	ldr	r0, [pc, #388]	; (800e980 <__gethex+0x2e0>)
 800e7fc:	f7ff feb4 	bl	800e568 <__assert_func>
 800e800:	3101      	adds	r1, #1
 800e802:	105b      	asrs	r3, r3, #1
 800e804:	e7ef      	b.n	800e7e6 <__gethex+0x146>
 800e806:	f100 0a14 	add.w	sl, r0, #20
 800e80a:	2300      	movs	r3, #0
 800e80c:	495a      	ldr	r1, [pc, #360]	; (800e978 <__gethex+0x2d8>)
 800e80e:	f8cd a004 	str.w	sl, [sp, #4]
 800e812:	469b      	mov	fp, r3
 800e814:	45a8      	cmp	r8, r5
 800e816:	d342      	bcc.n	800e89e <__gethex+0x1fe>
 800e818:	9801      	ldr	r0, [sp, #4]
 800e81a:	f840 bb04 	str.w	fp, [r0], #4
 800e81e:	eba0 000a 	sub.w	r0, r0, sl
 800e822:	1080      	asrs	r0, r0, #2
 800e824:	6120      	str	r0, [r4, #16]
 800e826:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e82a:	4658      	mov	r0, fp
 800e82c:	f7fe fa00 	bl	800cc30 <__hi0bits>
 800e830:	683d      	ldr	r5, [r7, #0]
 800e832:	eba8 0000 	sub.w	r0, r8, r0
 800e836:	42a8      	cmp	r0, r5
 800e838:	dd59      	ble.n	800e8ee <__gethex+0x24e>
 800e83a:	eba0 0805 	sub.w	r8, r0, r5
 800e83e:	4641      	mov	r1, r8
 800e840:	4620      	mov	r0, r4
 800e842:	f7fe fd8f 	bl	800d364 <__any_on>
 800e846:	4683      	mov	fp, r0
 800e848:	b1b8      	cbz	r0, 800e87a <__gethex+0x1da>
 800e84a:	f108 33ff 	add.w	r3, r8, #4294967295
 800e84e:	1159      	asrs	r1, r3, #5
 800e850:	f003 021f 	and.w	r2, r3, #31
 800e854:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e858:	f04f 0b01 	mov.w	fp, #1
 800e85c:	fa0b f202 	lsl.w	r2, fp, r2
 800e860:	420a      	tst	r2, r1
 800e862:	d00a      	beq.n	800e87a <__gethex+0x1da>
 800e864:	455b      	cmp	r3, fp
 800e866:	dd06      	ble.n	800e876 <__gethex+0x1d6>
 800e868:	f1a8 0102 	sub.w	r1, r8, #2
 800e86c:	4620      	mov	r0, r4
 800e86e:	f7fe fd79 	bl	800d364 <__any_on>
 800e872:	2800      	cmp	r0, #0
 800e874:	d138      	bne.n	800e8e8 <__gethex+0x248>
 800e876:	f04f 0b02 	mov.w	fp, #2
 800e87a:	4641      	mov	r1, r8
 800e87c:	4620      	mov	r0, r4
 800e87e:	f7ff fea7 	bl	800e5d0 <rshift>
 800e882:	4446      	add	r6, r8
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	42b3      	cmp	r3, r6
 800e888:	da41      	bge.n	800e90e <__gethex+0x26e>
 800e88a:	4621      	mov	r1, r4
 800e88c:	4648      	mov	r0, r9
 800e88e:	f7fe f91d 	bl	800cacc <_Bfree>
 800e892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e894:	2300      	movs	r3, #0
 800e896:	6013      	str	r3, [r2, #0]
 800e898:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e89c:	e78a      	b.n	800e7b4 <__gethex+0x114>
 800e89e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e8a2:	2a2e      	cmp	r2, #46	; 0x2e
 800e8a4:	d014      	beq.n	800e8d0 <__gethex+0x230>
 800e8a6:	2b20      	cmp	r3, #32
 800e8a8:	d106      	bne.n	800e8b8 <__gethex+0x218>
 800e8aa:	9b01      	ldr	r3, [sp, #4]
 800e8ac:	f843 bb04 	str.w	fp, [r3], #4
 800e8b0:	f04f 0b00 	mov.w	fp, #0
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	465b      	mov	r3, fp
 800e8b8:	7828      	ldrb	r0, [r5, #0]
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	f7ff feda 	bl	800e674 <__hexdig_fun>
 800e8c0:	9b03      	ldr	r3, [sp, #12]
 800e8c2:	f000 000f 	and.w	r0, r0, #15
 800e8c6:	4098      	lsls	r0, r3
 800e8c8:	ea4b 0b00 	orr.w	fp, fp, r0
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	e7a1      	b.n	800e814 <__gethex+0x174>
 800e8d0:	45a8      	cmp	r8, r5
 800e8d2:	d8e8      	bhi.n	800e8a6 <__gethex+0x206>
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	9303      	str	r3, [sp, #12]
 800e8da:	f7ff fe1b 	bl	800e514 <strncmp>
 800e8de:	4926      	ldr	r1, [pc, #152]	; (800e978 <__gethex+0x2d8>)
 800e8e0:	9b03      	ldr	r3, [sp, #12]
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d1df      	bne.n	800e8a6 <__gethex+0x206>
 800e8e6:	e795      	b.n	800e814 <__gethex+0x174>
 800e8e8:	f04f 0b03 	mov.w	fp, #3
 800e8ec:	e7c5      	b.n	800e87a <__gethex+0x1da>
 800e8ee:	da0b      	bge.n	800e908 <__gethex+0x268>
 800e8f0:	eba5 0800 	sub.w	r8, r5, r0
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4642      	mov	r2, r8
 800e8f8:	4648      	mov	r0, r9
 800e8fa:	f7fe fb01 	bl	800cf00 <__lshift>
 800e8fe:	eba6 0608 	sub.w	r6, r6, r8
 800e902:	4604      	mov	r4, r0
 800e904:	f100 0a14 	add.w	sl, r0, #20
 800e908:	f04f 0b00 	mov.w	fp, #0
 800e90c:	e7ba      	b.n	800e884 <__gethex+0x1e4>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	42b3      	cmp	r3, r6
 800e912:	dd73      	ble.n	800e9fc <__gethex+0x35c>
 800e914:	1b9e      	subs	r6, r3, r6
 800e916:	42b5      	cmp	r5, r6
 800e918:	dc34      	bgt.n	800e984 <__gethex+0x2e4>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d023      	beq.n	800e968 <__gethex+0x2c8>
 800e920:	2b03      	cmp	r3, #3
 800e922:	d025      	beq.n	800e970 <__gethex+0x2d0>
 800e924:	2b01      	cmp	r3, #1
 800e926:	d115      	bne.n	800e954 <__gethex+0x2b4>
 800e928:	42b5      	cmp	r5, r6
 800e92a:	d113      	bne.n	800e954 <__gethex+0x2b4>
 800e92c:	2d01      	cmp	r5, #1
 800e92e:	d10b      	bne.n	800e948 <__gethex+0x2a8>
 800e930:	9a02      	ldr	r2, [sp, #8]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6013      	str	r3, [r2, #0]
 800e936:	2301      	movs	r3, #1
 800e938:	6123      	str	r3, [r4, #16]
 800e93a:	f8ca 3000 	str.w	r3, [sl]
 800e93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e940:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e944:	601c      	str	r4, [r3, #0]
 800e946:	e735      	b.n	800e7b4 <__gethex+0x114>
 800e948:	1e69      	subs	r1, r5, #1
 800e94a:	4620      	mov	r0, r4
 800e94c:	f7fe fd0a 	bl	800d364 <__any_on>
 800e950:	2800      	cmp	r0, #0
 800e952:	d1ed      	bne.n	800e930 <__gethex+0x290>
 800e954:	4621      	mov	r1, r4
 800e956:	4648      	mov	r0, r9
 800e958:	f7fe f8b8 	bl	800cacc <_Bfree>
 800e95c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e95e:	2300      	movs	r3, #0
 800e960:	6013      	str	r3, [r2, #0]
 800e962:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e966:	e725      	b.n	800e7b4 <__gethex+0x114>
 800e968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1f2      	bne.n	800e954 <__gethex+0x2b4>
 800e96e:	e7df      	b.n	800e930 <__gethex+0x290>
 800e970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1dc      	bne.n	800e930 <__gethex+0x290>
 800e976:	e7ed      	b.n	800e954 <__gethex+0x2b4>
 800e978:	080107fc 	.word	0x080107fc
 800e97c:	08010692 	.word	0x08010692
 800e980:	080108a5 	.word	0x080108a5
 800e984:	f106 38ff 	add.w	r8, r6, #4294967295
 800e988:	f1bb 0f00 	cmp.w	fp, #0
 800e98c:	d133      	bne.n	800e9f6 <__gethex+0x356>
 800e98e:	f1b8 0f00 	cmp.w	r8, #0
 800e992:	d004      	beq.n	800e99e <__gethex+0x2fe>
 800e994:	4641      	mov	r1, r8
 800e996:	4620      	mov	r0, r4
 800e998:	f7fe fce4 	bl	800d364 <__any_on>
 800e99c:	4683      	mov	fp, r0
 800e99e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9a8:	f008 081f 	and.w	r8, r8, #31
 800e9ac:	fa03 f308 	lsl.w	r3, r3, r8
 800e9b0:	4213      	tst	r3, r2
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	bf18      	it	ne
 800e9b8:	f04b 0b02 	orrne.w	fp, fp, #2
 800e9bc:	1bad      	subs	r5, r5, r6
 800e9be:	f7ff fe07 	bl	800e5d0 <rshift>
 800e9c2:	687e      	ldr	r6, [r7, #4]
 800e9c4:	f04f 0802 	mov.w	r8, #2
 800e9c8:	f1bb 0f00 	cmp.w	fp, #0
 800e9cc:	d04a      	beq.n	800ea64 <__gethex+0x3c4>
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d016      	beq.n	800ea02 <__gethex+0x362>
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	d018      	beq.n	800ea0a <__gethex+0x36a>
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d109      	bne.n	800e9f0 <__gethex+0x350>
 800e9dc:	f01b 0f02 	tst.w	fp, #2
 800e9e0:	d006      	beq.n	800e9f0 <__gethex+0x350>
 800e9e2:	f8da 3000 	ldr.w	r3, [sl]
 800e9e6:	ea4b 0b03 	orr.w	fp, fp, r3
 800e9ea:	f01b 0f01 	tst.w	fp, #1
 800e9ee:	d10f      	bne.n	800ea10 <__gethex+0x370>
 800e9f0:	f048 0810 	orr.w	r8, r8, #16
 800e9f4:	e036      	b.n	800ea64 <__gethex+0x3c4>
 800e9f6:	f04f 0b01 	mov.w	fp, #1
 800e9fa:	e7d0      	b.n	800e99e <__gethex+0x2fe>
 800e9fc:	f04f 0801 	mov.w	r8, #1
 800ea00:	e7e2      	b.n	800e9c8 <__gethex+0x328>
 800ea02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea04:	f1c3 0301 	rsb	r3, r3, #1
 800ea08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d0ef      	beq.n	800e9f0 <__gethex+0x350>
 800ea10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea14:	f104 0214 	add.w	r2, r4, #20
 800ea18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ea1c:	9301      	str	r3, [sp, #4]
 800ea1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ea22:	2300      	movs	r3, #0
 800ea24:	4694      	mov	ip, r2
 800ea26:	f852 1b04 	ldr.w	r1, [r2], #4
 800ea2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ea2e:	d01e      	beq.n	800ea6e <__gethex+0x3ce>
 800ea30:	3101      	adds	r1, #1
 800ea32:	f8cc 1000 	str.w	r1, [ip]
 800ea36:	f1b8 0f02 	cmp.w	r8, #2
 800ea3a:	f104 0214 	add.w	r2, r4, #20
 800ea3e:	d13d      	bne.n	800eabc <__gethex+0x41c>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	42ab      	cmp	r3, r5
 800ea46:	d10b      	bne.n	800ea60 <__gethex+0x3c0>
 800ea48:	1169      	asrs	r1, r5, #5
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	f005 051f 	and.w	r5, r5, #31
 800ea50:	fa03 f505 	lsl.w	r5, r3, r5
 800ea54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea58:	421d      	tst	r5, r3
 800ea5a:	bf18      	it	ne
 800ea5c:	f04f 0801 	movne.w	r8, #1
 800ea60:	f048 0820 	orr.w	r8, r8, #32
 800ea64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea66:	601c      	str	r4, [r3, #0]
 800ea68:	9b02      	ldr	r3, [sp, #8]
 800ea6a:	601e      	str	r6, [r3, #0]
 800ea6c:	e6a2      	b.n	800e7b4 <__gethex+0x114>
 800ea6e:	4290      	cmp	r0, r2
 800ea70:	f842 3c04 	str.w	r3, [r2, #-4]
 800ea74:	d8d6      	bhi.n	800ea24 <__gethex+0x384>
 800ea76:	68a2      	ldr	r2, [r4, #8]
 800ea78:	4593      	cmp	fp, r2
 800ea7a:	db17      	blt.n	800eaac <__gethex+0x40c>
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	4648      	mov	r0, r9
 800ea80:	3101      	adds	r1, #1
 800ea82:	f7fd ffe3 	bl	800ca4c <_Balloc>
 800ea86:	4682      	mov	sl, r0
 800ea88:	b918      	cbnz	r0, 800ea92 <__gethex+0x3f2>
 800ea8a:	4b1b      	ldr	r3, [pc, #108]	; (800eaf8 <__gethex+0x458>)
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	2184      	movs	r1, #132	; 0x84
 800ea90:	e6b3      	b.n	800e7fa <__gethex+0x15a>
 800ea92:	6922      	ldr	r2, [r4, #16]
 800ea94:	3202      	adds	r2, #2
 800ea96:	f104 010c 	add.w	r1, r4, #12
 800ea9a:	0092      	lsls	r2, r2, #2
 800ea9c:	300c      	adds	r0, #12
 800ea9e:	f7fd f846 	bl	800bb2e <memcpy>
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4648      	mov	r0, r9
 800eaa6:	f7fe f811 	bl	800cacc <_Bfree>
 800eaaa:	4654      	mov	r4, sl
 800eaac:	6922      	ldr	r2, [r4, #16]
 800eaae:	1c51      	adds	r1, r2, #1
 800eab0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eab4:	6121      	str	r1, [r4, #16]
 800eab6:	2101      	movs	r1, #1
 800eab8:	6151      	str	r1, [r2, #20]
 800eaba:	e7bc      	b.n	800ea36 <__gethex+0x396>
 800eabc:	6921      	ldr	r1, [r4, #16]
 800eabe:	4559      	cmp	r1, fp
 800eac0:	dd0b      	ble.n	800eada <__gethex+0x43a>
 800eac2:	2101      	movs	r1, #1
 800eac4:	4620      	mov	r0, r4
 800eac6:	f7ff fd83 	bl	800e5d0 <rshift>
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	3601      	adds	r6, #1
 800eace:	42b3      	cmp	r3, r6
 800ead0:	f6ff aedb 	blt.w	800e88a <__gethex+0x1ea>
 800ead4:	f04f 0801 	mov.w	r8, #1
 800ead8:	e7c2      	b.n	800ea60 <__gethex+0x3c0>
 800eada:	f015 051f 	ands.w	r5, r5, #31
 800eade:	d0f9      	beq.n	800ead4 <__gethex+0x434>
 800eae0:	9b01      	ldr	r3, [sp, #4]
 800eae2:	441a      	add	r2, r3
 800eae4:	f1c5 0520 	rsb	r5, r5, #32
 800eae8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800eaec:	f7fe f8a0 	bl	800cc30 <__hi0bits>
 800eaf0:	42a8      	cmp	r0, r5
 800eaf2:	dbe6      	blt.n	800eac2 <__gethex+0x422>
 800eaf4:	e7ee      	b.n	800ead4 <__gethex+0x434>
 800eaf6:	bf00      	nop
 800eaf8:	08010692 	.word	0x08010692

0800eafc <L_shift>:
 800eafc:	f1c2 0208 	rsb	r2, r2, #8
 800eb00:	0092      	lsls	r2, r2, #2
 800eb02:	b570      	push	{r4, r5, r6, lr}
 800eb04:	f1c2 0620 	rsb	r6, r2, #32
 800eb08:	6843      	ldr	r3, [r0, #4]
 800eb0a:	6804      	ldr	r4, [r0, #0]
 800eb0c:	fa03 f506 	lsl.w	r5, r3, r6
 800eb10:	432c      	orrs	r4, r5
 800eb12:	40d3      	lsrs	r3, r2
 800eb14:	6004      	str	r4, [r0, #0]
 800eb16:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb1a:	4288      	cmp	r0, r1
 800eb1c:	d3f4      	bcc.n	800eb08 <L_shift+0xc>
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}

0800eb20 <__match>:
 800eb20:	b530      	push	{r4, r5, lr}
 800eb22:	6803      	ldr	r3, [r0, #0]
 800eb24:	3301      	adds	r3, #1
 800eb26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb2a:	b914      	cbnz	r4, 800eb32 <__match+0x12>
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	2001      	movs	r0, #1
 800eb30:	bd30      	pop	{r4, r5, pc}
 800eb32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eb3a:	2d19      	cmp	r5, #25
 800eb3c:	bf98      	it	ls
 800eb3e:	3220      	addls	r2, #32
 800eb40:	42a2      	cmp	r2, r4
 800eb42:	d0f0      	beq.n	800eb26 <__match+0x6>
 800eb44:	2000      	movs	r0, #0
 800eb46:	e7f3      	b.n	800eb30 <__match+0x10>

0800eb48 <__hexnan>:
 800eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4c:	680b      	ldr	r3, [r1, #0]
 800eb4e:	6801      	ldr	r1, [r0, #0]
 800eb50:	115e      	asrs	r6, r3, #5
 800eb52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb56:	f013 031f 	ands.w	r3, r3, #31
 800eb5a:	b087      	sub	sp, #28
 800eb5c:	bf18      	it	ne
 800eb5e:	3604      	addne	r6, #4
 800eb60:	2500      	movs	r5, #0
 800eb62:	1f37      	subs	r7, r6, #4
 800eb64:	4682      	mov	sl, r0
 800eb66:	4690      	mov	r8, r2
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb6e:	46b9      	mov	r9, r7
 800eb70:	463c      	mov	r4, r7
 800eb72:	9502      	str	r5, [sp, #8]
 800eb74:	46ab      	mov	fp, r5
 800eb76:	784a      	ldrb	r2, [r1, #1]
 800eb78:	1c4b      	adds	r3, r1, #1
 800eb7a:	9303      	str	r3, [sp, #12]
 800eb7c:	b342      	cbz	r2, 800ebd0 <__hexnan+0x88>
 800eb7e:	4610      	mov	r0, r2
 800eb80:	9105      	str	r1, [sp, #20]
 800eb82:	9204      	str	r2, [sp, #16]
 800eb84:	f7ff fd76 	bl	800e674 <__hexdig_fun>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d14f      	bne.n	800ec2c <__hexnan+0xe4>
 800eb8c:	9a04      	ldr	r2, [sp, #16]
 800eb8e:	9905      	ldr	r1, [sp, #20]
 800eb90:	2a20      	cmp	r2, #32
 800eb92:	d818      	bhi.n	800ebc6 <__hexnan+0x7e>
 800eb94:	9b02      	ldr	r3, [sp, #8]
 800eb96:	459b      	cmp	fp, r3
 800eb98:	dd13      	ble.n	800ebc2 <__hexnan+0x7a>
 800eb9a:	454c      	cmp	r4, r9
 800eb9c:	d206      	bcs.n	800ebac <__hexnan+0x64>
 800eb9e:	2d07      	cmp	r5, #7
 800eba0:	dc04      	bgt.n	800ebac <__hexnan+0x64>
 800eba2:	462a      	mov	r2, r5
 800eba4:	4649      	mov	r1, r9
 800eba6:	4620      	mov	r0, r4
 800eba8:	f7ff ffa8 	bl	800eafc <L_shift>
 800ebac:	4544      	cmp	r4, r8
 800ebae:	d950      	bls.n	800ec52 <__hexnan+0x10a>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f1a4 0904 	sub.w	r9, r4, #4
 800ebb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebba:	f8cd b008 	str.w	fp, [sp, #8]
 800ebbe:	464c      	mov	r4, r9
 800ebc0:	461d      	mov	r5, r3
 800ebc2:	9903      	ldr	r1, [sp, #12]
 800ebc4:	e7d7      	b.n	800eb76 <__hexnan+0x2e>
 800ebc6:	2a29      	cmp	r2, #41	; 0x29
 800ebc8:	d155      	bne.n	800ec76 <__hexnan+0x12e>
 800ebca:	3102      	adds	r1, #2
 800ebcc:	f8ca 1000 	str.w	r1, [sl]
 800ebd0:	f1bb 0f00 	cmp.w	fp, #0
 800ebd4:	d04f      	beq.n	800ec76 <__hexnan+0x12e>
 800ebd6:	454c      	cmp	r4, r9
 800ebd8:	d206      	bcs.n	800ebe8 <__hexnan+0xa0>
 800ebda:	2d07      	cmp	r5, #7
 800ebdc:	dc04      	bgt.n	800ebe8 <__hexnan+0xa0>
 800ebde:	462a      	mov	r2, r5
 800ebe0:	4649      	mov	r1, r9
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f7ff ff8a 	bl	800eafc <L_shift>
 800ebe8:	4544      	cmp	r4, r8
 800ebea:	d934      	bls.n	800ec56 <__hexnan+0x10e>
 800ebec:	f1a8 0204 	sub.w	r2, r8, #4
 800ebf0:	4623      	mov	r3, r4
 800ebf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ebf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ebfa:	429f      	cmp	r7, r3
 800ebfc:	d2f9      	bcs.n	800ebf2 <__hexnan+0xaa>
 800ebfe:	1b3b      	subs	r3, r7, r4
 800ec00:	f023 0303 	bic.w	r3, r3, #3
 800ec04:	3304      	adds	r3, #4
 800ec06:	3e03      	subs	r6, #3
 800ec08:	3401      	adds	r4, #1
 800ec0a:	42a6      	cmp	r6, r4
 800ec0c:	bf38      	it	cc
 800ec0e:	2304      	movcc	r3, #4
 800ec10:	4443      	add	r3, r8
 800ec12:	2200      	movs	r2, #0
 800ec14:	f843 2b04 	str.w	r2, [r3], #4
 800ec18:	429f      	cmp	r7, r3
 800ec1a:	d2fb      	bcs.n	800ec14 <__hexnan+0xcc>
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	b91b      	cbnz	r3, 800ec28 <__hexnan+0xe0>
 800ec20:	4547      	cmp	r7, r8
 800ec22:	d126      	bne.n	800ec72 <__hexnan+0x12a>
 800ec24:	2301      	movs	r3, #1
 800ec26:	603b      	str	r3, [r7, #0]
 800ec28:	2005      	movs	r0, #5
 800ec2a:	e025      	b.n	800ec78 <__hexnan+0x130>
 800ec2c:	3501      	adds	r5, #1
 800ec2e:	2d08      	cmp	r5, #8
 800ec30:	f10b 0b01 	add.w	fp, fp, #1
 800ec34:	dd06      	ble.n	800ec44 <__hexnan+0xfc>
 800ec36:	4544      	cmp	r4, r8
 800ec38:	d9c3      	bls.n	800ebc2 <__hexnan+0x7a>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec40:	2501      	movs	r5, #1
 800ec42:	3c04      	subs	r4, #4
 800ec44:	6822      	ldr	r2, [r4, #0]
 800ec46:	f000 000f 	and.w	r0, r0, #15
 800ec4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec4e:	6020      	str	r0, [r4, #0]
 800ec50:	e7b7      	b.n	800ebc2 <__hexnan+0x7a>
 800ec52:	2508      	movs	r5, #8
 800ec54:	e7b5      	b.n	800ebc2 <__hexnan+0x7a>
 800ec56:	9b01      	ldr	r3, [sp, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0df      	beq.n	800ec1c <__hexnan+0xd4>
 800ec5c:	f1c3 0320 	rsb	r3, r3, #32
 800ec60:	f04f 32ff 	mov.w	r2, #4294967295
 800ec64:	40da      	lsrs	r2, r3
 800ec66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec70:	e7d4      	b.n	800ec1c <__hexnan+0xd4>
 800ec72:	3f04      	subs	r7, #4
 800ec74:	e7d2      	b.n	800ec1c <__hexnan+0xd4>
 800ec76:	2004      	movs	r0, #4
 800ec78:	b007      	add	sp, #28
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec7e <__ascii_mbtowc>:
 800ec7e:	b082      	sub	sp, #8
 800ec80:	b901      	cbnz	r1, 800ec84 <__ascii_mbtowc+0x6>
 800ec82:	a901      	add	r1, sp, #4
 800ec84:	b142      	cbz	r2, 800ec98 <__ascii_mbtowc+0x1a>
 800ec86:	b14b      	cbz	r3, 800ec9c <__ascii_mbtowc+0x1e>
 800ec88:	7813      	ldrb	r3, [r2, #0]
 800ec8a:	600b      	str	r3, [r1, #0]
 800ec8c:	7812      	ldrb	r2, [r2, #0]
 800ec8e:	1e10      	subs	r0, r2, #0
 800ec90:	bf18      	it	ne
 800ec92:	2001      	movne	r0, #1
 800ec94:	b002      	add	sp, #8
 800ec96:	4770      	bx	lr
 800ec98:	4610      	mov	r0, r2
 800ec9a:	e7fb      	b.n	800ec94 <__ascii_mbtowc+0x16>
 800ec9c:	f06f 0001 	mvn.w	r0, #1
 800eca0:	e7f8      	b.n	800ec94 <__ascii_mbtowc+0x16>

0800eca2 <_realloc_r>:
 800eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca6:	4680      	mov	r8, r0
 800eca8:	4614      	mov	r4, r2
 800ecaa:	460e      	mov	r6, r1
 800ecac:	b921      	cbnz	r1, 800ecb8 <_realloc_r+0x16>
 800ecae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	f7fd be3e 	b.w	800c934 <_malloc_r>
 800ecb8:	b92a      	cbnz	r2, 800ecc6 <_realloc_r+0x24>
 800ecba:	f7fd fdc7 	bl	800c84c <_free_r>
 800ecbe:	4625      	mov	r5, r4
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc6:	f000 f842 	bl	800ed4e <_malloc_usable_size_r>
 800ecca:	4284      	cmp	r4, r0
 800eccc:	4607      	mov	r7, r0
 800ecce:	d802      	bhi.n	800ecd6 <_realloc_r+0x34>
 800ecd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecd4:	d812      	bhi.n	800ecfc <_realloc_r+0x5a>
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	4640      	mov	r0, r8
 800ecda:	f7fd fe2b 	bl	800c934 <_malloc_r>
 800ecde:	4605      	mov	r5, r0
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d0ed      	beq.n	800ecc0 <_realloc_r+0x1e>
 800ece4:	42bc      	cmp	r4, r7
 800ece6:	4622      	mov	r2, r4
 800ece8:	4631      	mov	r1, r6
 800ecea:	bf28      	it	cs
 800ecec:	463a      	movcs	r2, r7
 800ecee:	f7fc ff1e 	bl	800bb2e <memcpy>
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4640      	mov	r0, r8
 800ecf6:	f7fd fda9 	bl	800c84c <_free_r>
 800ecfa:	e7e1      	b.n	800ecc0 <_realloc_r+0x1e>
 800ecfc:	4635      	mov	r5, r6
 800ecfe:	e7df      	b.n	800ecc0 <_realloc_r+0x1e>

0800ed00 <__ascii_wctomb>:
 800ed00:	b149      	cbz	r1, 800ed16 <__ascii_wctomb+0x16>
 800ed02:	2aff      	cmp	r2, #255	; 0xff
 800ed04:	bf85      	ittet	hi
 800ed06:	238a      	movhi	r3, #138	; 0x8a
 800ed08:	6003      	strhi	r3, [r0, #0]
 800ed0a:	700a      	strbls	r2, [r1, #0]
 800ed0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed10:	bf98      	it	ls
 800ed12:	2001      	movls	r0, #1
 800ed14:	4770      	bx	lr
 800ed16:	4608      	mov	r0, r1
 800ed18:	4770      	bx	lr
	...

0800ed1c <fiprintf>:
 800ed1c:	b40e      	push	{r1, r2, r3}
 800ed1e:	b503      	push	{r0, r1, lr}
 800ed20:	4601      	mov	r1, r0
 800ed22:	ab03      	add	r3, sp, #12
 800ed24:	4805      	ldr	r0, [pc, #20]	; (800ed3c <fiprintf+0x20>)
 800ed26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed2a:	6800      	ldr	r0, [r0, #0]
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	f000 f83f 	bl	800edb0 <_vfiprintf_r>
 800ed32:	b002      	add	sp, #8
 800ed34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed38:	b003      	add	sp, #12
 800ed3a:	4770      	bx	lr
 800ed3c:	20000090 	.word	0x20000090

0800ed40 <abort>:
 800ed40:	b508      	push	{r3, lr}
 800ed42:	2006      	movs	r0, #6
 800ed44:	f000 fa0c 	bl	800f160 <raise>
 800ed48:	2001      	movs	r0, #1
 800ed4a:	f7f4 f9bd 	bl	80030c8 <_exit>

0800ed4e <_malloc_usable_size_r>:
 800ed4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed52:	1f18      	subs	r0, r3, #4
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	bfbc      	itt	lt
 800ed58:	580b      	ldrlt	r3, [r1, r0]
 800ed5a:	18c0      	addlt	r0, r0, r3
 800ed5c:	4770      	bx	lr

0800ed5e <__sfputc_r>:
 800ed5e:	6893      	ldr	r3, [r2, #8]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	b410      	push	{r4}
 800ed66:	6093      	str	r3, [r2, #8]
 800ed68:	da08      	bge.n	800ed7c <__sfputc_r+0x1e>
 800ed6a:	6994      	ldr	r4, [r2, #24]
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	db01      	blt.n	800ed74 <__sfputc_r+0x16>
 800ed70:	290a      	cmp	r1, #10
 800ed72:	d103      	bne.n	800ed7c <__sfputc_r+0x1e>
 800ed74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed78:	f000 b934 	b.w	800efe4 <__swbuf_r>
 800ed7c:	6813      	ldr	r3, [r2, #0]
 800ed7e:	1c58      	adds	r0, r3, #1
 800ed80:	6010      	str	r0, [r2, #0]
 800ed82:	7019      	strb	r1, [r3, #0]
 800ed84:	4608      	mov	r0, r1
 800ed86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <__sfputs_r>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	4614      	mov	r4, r2
 800ed94:	18d5      	adds	r5, r2, r3
 800ed96:	42ac      	cmp	r4, r5
 800ed98:	d101      	bne.n	800ed9e <__sfputs_r+0x12>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	e007      	b.n	800edae <__sfputs_r+0x22>
 800ed9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda2:	463a      	mov	r2, r7
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ffda 	bl	800ed5e <__sfputc_r>
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	d1f3      	bne.n	800ed96 <__sfputs_r+0xa>
 800edae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edb0 <_vfiprintf_r>:
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	460d      	mov	r5, r1
 800edb6:	b09d      	sub	sp, #116	; 0x74
 800edb8:	4614      	mov	r4, r2
 800edba:	4698      	mov	r8, r3
 800edbc:	4606      	mov	r6, r0
 800edbe:	b118      	cbz	r0, 800edc8 <_vfiprintf_r+0x18>
 800edc0:	6a03      	ldr	r3, [r0, #32]
 800edc2:	b90b      	cbnz	r3, 800edc8 <_vfiprintf_r+0x18>
 800edc4:	f7fc fd9a 	bl	800b8fc <__sinit>
 800edc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edca:	07d9      	lsls	r1, r3, #31
 800edcc:	d405      	bmi.n	800edda <_vfiprintf_r+0x2a>
 800edce:	89ab      	ldrh	r3, [r5, #12]
 800edd0:	059a      	lsls	r2, r3, #22
 800edd2:	d402      	bmi.n	800edda <_vfiprintf_r+0x2a>
 800edd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd6:	f7fc fea8 	bl	800bb2a <__retarget_lock_acquire_recursive>
 800edda:	89ab      	ldrh	r3, [r5, #12]
 800eddc:	071b      	lsls	r3, r3, #28
 800edde:	d501      	bpl.n	800ede4 <_vfiprintf_r+0x34>
 800ede0:	692b      	ldr	r3, [r5, #16]
 800ede2:	b99b      	cbnz	r3, 800ee0c <_vfiprintf_r+0x5c>
 800ede4:	4629      	mov	r1, r5
 800ede6:	4630      	mov	r0, r6
 800ede8:	f000 f93a 	bl	800f060 <__swsetup_r>
 800edec:	b170      	cbz	r0, 800ee0c <_vfiprintf_r+0x5c>
 800edee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edf0:	07dc      	lsls	r4, r3, #31
 800edf2:	d504      	bpl.n	800edfe <_vfiprintf_r+0x4e>
 800edf4:	f04f 30ff 	mov.w	r0, #4294967295
 800edf8:	b01d      	add	sp, #116	; 0x74
 800edfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	0598      	lsls	r0, r3, #22
 800ee02:	d4f7      	bmi.n	800edf4 <_vfiprintf_r+0x44>
 800ee04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee06:	f7fc fe91 	bl	800bb2c <__retarget_lock_release_recursive>
 800ee0a:	e7f3      	b.n	800edf4 <_vfiprintf_r+0x44>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee10:	2320      	movs	r3, #32
 800ee12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee1a:	2330      	movs	r3, #48	; 0x30
 800ee1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800efd0 <_vfiprintf_r+0x220>
 800ee20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee24:	f04f 0901 	mov.w	r9, #1
 800ee28:	4623      	mov	r3, r4
 800ee2a:	469a      	mov	sl, r3
 800ee2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee30:	b10a      	cbz	r2, 800ee36 <_vfiprintf_r+0x86>
 800ee32:	2a25      	cmp	r2, #37	; 0x25
 800ee34:	d1f9      	bne.n	800ee2a <_vfiprintf_r+0x7a>
 800ee36:	ebba 0b04 	subs.w	fp, sl, r4
 800ee3a:	d00b      	beq.n	800ee54 <_vfiprintf_r+0xa4>
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	4622      	mov	r2, r4
 800ee40:	4629      	mov	r1, r5
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ffa2 	bl	800ed8c <__sfputs_r>
 800ee48:	3001      	adds	r0, #1
 800ee4a:	f000 80a9 	beq.w	800efa0 <_vfiprintf_r+0x1f0>
 800ee4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee50:	445a      	add	r2, fp
 800ee52:	9209      	str	r2, [sp, #36]	; 0x24
 800ee54:	f89a 3000 	ldrb.w	r3, [sl]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f000 80a1 	beq.w	800efa0 <_vfiprintf_r+0x1f0>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f04f 32ff 	mov.w	r2, #4294967295
 800ee64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee68:	f10a 0a01 	add.w	sl, sl, #1
 800ee6c:	9304      	str	r3, [sp, #16]
 800ee6e:	9307      	str	r3, [sp, #28]
 800ee70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee74:	931a      	str	r3, [sp, #104]	; 0x68
 800ee76:	4654      	mov	r4, sl
 800ee78:	2205      	movs	r2, #5
 800ee7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee7e:	4854      	ldr	r0, [pc, #336]	; (800efd0 <_vfiprintf_r+0x220>)
 800ee80:	f7f1 f9a6 	bl	80001d0 <memchr>
 800ee84:	9a04      	ldr	r2, [sp, #16]
 800ee86:	b9d8      	cbnz	r0, 800eec0 <_vfiprintf_r+0x110>
 800ee88:	06d1      	lsls	r1, r2, #27
 800ee8a:	bf44      	itt	mi
 800ee8c:	2320      	movmi	r3, #32
 800ee8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee92:	0713      	lsls	r3, r2, #28
 800ee94:	bf44      	itt	mi
 800ee96:	232b      	movmi	r3, #43	; 0x2b
 800ee98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eea0:	2b2a      	cmp	r3, #42	; 0x2a
 800eea2:	d015      	beq.n	800eed0 <_vfiprintf_r+0x120>
 800eea4:	9a07      	ldr	r2, [sp, #28]
 800eea6:	4654      	mov	r4, sl
 800eea8:	2000      	movs	r0, #0
 800eeaa:	f04f 0c0a 	mov.w	ip, #10
 800eeae:	4621      	mov	r1, r4
 800eeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeb4:	3b30      	subs	r3, #48	; 0x30
 800eeb6:	2b09      	cmp	r3, #9
 800eeb8:	d94d      	bls.n	800ef56 <_vfiprintf_r+0x1a6>
 800eeba:	b1b0      	cbz	r0, 800eeea <_vfiprintf_r+0x13a>
 800eebc:	9207      	str	r2, [sp, #28]
 800eebe:	e014      	b.n	800eeea <_vfiprintf_r+0x13a>
 800eec0:	eba0 0308 	sub.w	r3, r0, r8
 800eec4:	fa09 f303 	lsl.w	r3, r9, r3
 800eec8:	4313      	orrs	r3, r2
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	46a2      	mov	sl, r4
 800eece:	e7d2      	b.n	800ee76 <_vfiprintf_r+0xc6>
 800eed0:	9b03      	ldr	r3, [sp, #12]
 800eed2:	1d19      	adds	r1, r3, #4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	9103      	str	r1, [sp, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	bfbb      	ittet	lt
 800eedc:	425b      	neglt	r3, r3
 800eede:	f042 0202 	orrlt.w	r2, r2, #2
 800eee2:	9307      	strge	r3, [sp, #28]
 800eee4:	9307      	strlt	r3, [sp, #28]
 800eee6:	bfb8      	it	lt
 800eee8:	9204      	strlt	r2, [sp, #16]
 800eeea:	7823      	ldrb	r3, [r4, #0]
 800eeec:	2b2e      	cmp	r3, #46	; 0x2e
 800eeee:	d10c      	bne.n	800ef0a <_vfiprintf_r+0x15a>
 800eef0:	7863      	ldrb	r3, [r4, #1]
 800eef2:	2b2a      	cmp	r3, #42	; 0x2a
 800eef4:	d134      	bne.n	800ef60 <_vfiprintf_r+0x1b0>
 800eef6:	9b03      	ldr	r3, [sp, #12]
 800eef8:	1d1a      	adds	r2, r3, #4
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	9203      	str	r2, [sp, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	bfb8      	it	lt
 800ef02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef06:	3402      	adds	r4, #2
 800ef08:	9305      	str	r3, [sp, #20]
 800ef0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800efe0 <_vfiprintf_r+0x230>
 800ef0e:	7821      	ldrb	r1, [r4, #0]
 800ef10:	2203      	movs	r2, #3
 800ef12:	4650      	mov	r0, sl
 800ef14:	f7f1 f95c 	bl	80001d0 <memchr>
 800ef18:	b138      	cbz	r0, 800ef2a <_vfiprintf_r+0x17a>
 800ef1a:	9b04      	ldr	r3, [sp, #16]
 800ef1c:	eba0 000a 	sub.w	r0, r0, sl
 800ef20:	2240      	movs	r2, #64	; 0x40
 800ef22:	4082      	lsls	r2, r0
 800ef24:	4313      	orrs	r3, r2
 800ef26:	3401      	adds	r4, #1
 800ef28:	9304      	str	r3, [sp, #16]
 800ef2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef2e:	4829      	ldr	r0, [pc, #164]	; (800efd4 <_vfiprintf_r+0x224>)
 800ef30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef34:	2206      	movs	r2, #6
 800ef36:	f7f1 f94b 	bl	80001d0 <memchr>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d03f      	beq.n	800efbe <_vfiprintf_r+0x20e>
 800ef3e:	4b26      	ldr	r3, [pc, #152]	; (800efd8 <_vfiprintf_r+0x228>)
 800ef40:	bb1b      	cbnz	r3, 800ef8a <_vfiprintf_r+0x1da>
 800ef42:	9b03      	ldr	r3, [sp, #12]
 800ef44:	3307      	adds	r3, #7
 800ef46:	f023 0307 	bic.w	r3, r3, #7
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	9303      	str	r3, [sp, #12]
 800ef4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef50:	443b      	add	r3, r7
 800ef52:	9309      	str	r3, [sp, #36]	; 0x24
 800ef54:	e768      	b.n	800ee28 <_vfiprintf_r+0x78>
 800ef56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	2001      	movs	r0, #1
 800ef5e:	e7a6      	b.n	800eeae <_vfiprintf_r+0xfe>
 800ef60:	2300      	movs	r3, #0
 800ef62:	3401      	adds	r4, #1
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	4619      	mov	r1, r3
 800ef68:	f04f 0c0a 	mov.w	ip, #10
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef72:	3a30      	subs	r2, #48	; 0x30
 800ef74:	2a09      	cmp	r2, #9
 800ef76:	d903      	bls.n	800ef80 <_vfiprintf_r+0x1d0>
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d0c6      	beq.n	800ef0a <_vfiprintf_r+0x15a>
 800ef7c:	9105      	str	r1, [sp, #20]
 800ef7e:	e7c4      	b.n	800ef0a <_vfiprintf_r+0x15a>
 800ef80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef84:	4604      	mov	r4, r0
 800ef86:	2301      	movs	r3, #1
 800ef88:	e7f0      	b.n	800ef6c <_vfiprintf_r+0x1bc>
 800ef8a:	ab03      	add	r3, sp, #12
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	462a      	mov	r2, r5
 800ef90:	4b12      	ldr	r3, [pc, #72]	; (800efdc <_vfiprintf_r+0x22c>)
 800ef92:	a904      	add	r1, sp, #16
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7fb fe4f 	bl	800ac38 <_printf_float>
 800ef9a:	4607      	mov	r7, r0
 800ef9c:	1c78      	adds	r0, r7, #1
 800ef9e:	d1d6      	bne.n	800ef4e <_vfiprintf_r+0x19e>
 800efa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efa2:	07d9      	lsls	r1, r3, #31
 800efa4:	d405      	bmi.n	800efb2 <_vfiprintf_r+0x202>
 800efa6:	89ab      	ldrh	r3, [r5, #12]
 800efa8:	059a      	lsls	r2, r3, #22
 800efaa:	d402      	bmi.n	800efb2 <_vfiprintf_r+0x202>
 800efac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efae:	f7fc fdbd 	bl	800bb2c <__retarget_lock_release_recursive>
 800efb2:	89ab      	ldrh	r3, [r5, #12]
 800efb4:	065b      	lsls	r3, r3, #25
 800efb6:	f53f af1d 	bmi.w	800edf4 <_vfiprintf_r+0x44>
 800efba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efbc:	e71c      	b.n	800edf8 <_vfiprintf_r+0x48>
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	462a      	mov	r2, r5
 800efc4:	4b05      	ldr	r3, [pc, #20]	; (800efdc <_vfiprintf_r+0x22c>)
 800efc6:	a904      	add	r1, sp, #16
 800efc8:	4630      	mov	r0, r6
 800efca:	f7fc f8d9 	bl	800b180 <_printf_i>
 800efce:	e7e4      	b.n	800ef9a <_vfiprintf_r+0x1ea>
 800efd0:	08010850 	.word	0x08010850
 800efd4:	0801085a 	.word	0x0801085a
 800efd8:	0800ac39 	.word	0x0800ac39
 800efdc:	0800ed8d 	.word	0x0800ed8d
 800efe0:	08010856 	.word	0x08010856

0800efe4 <__swbuf_r>:
 800efe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe6:	460e      	mov	r6, r1
 800efe8:	4614      	mov	r4, r2
 800efea:	4605      	mov	r5, r0
 800efec:	b118      	cbz	r0, 800eff6 <__swbuf_r+0x12>
 800efee:	6a03      	ldr	r3, [r0, #32]
 800eff0:	b90b      	cbnz	r3, 800eff6 <__swbuf_r+0x12>
 800eff2:	f7fc fc83 	bl	800b8fc <__sinit>
 800eff6:	69a3      	ldr	r3, [r4, #24]
 800eff8:	60a3      	str	r3, [r4, #8]
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	071a      	lsls	r2, r3, #28
 800effe:	d525      	bpl.n	800f04c <__swbuf_r+0x68>
 800f000:	6923      	ldr	r3, [r4, #16]
 800f002:	b31b      	cbz	r3, 800f04c <__swbuf_r+0x68>
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	6922      	ldr	r2, [r4, #16]
 800f008:	1a98      	subs	r0, r3, r2
 800f00a:	6963      	ldr	r3, [r4, #20]
 800f00c:	b2f6      	uxtb	r6, r6
 800f00e:	4283      	cmp	r3, r0
 800f010:	4637      	mov	r7, r6
 800f012:	dc04      	bgt.n	800f01e <__swbuf_r+0x3a>
 800f014:	4621      	mov	r1, r4
 800f016:	4628      	mov	r0, r5
 800f018:	f7ff fa3a 	bl	800e490 <_fflush_r>
 800f01c:	b9e0      	cbnz	r0, 800f058 <__swbuf_r+0x74>
 800f01e:	68a3      	ldr	r3, [r4, #8]
 800f020:	3b01      	subs	r3, #1
 800f022:	60a3      	str	r3, [r4, #8]
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	1c5a      	adds	r2, r3, #1
 800f028:	6022      	str	r2, [r4, #0]
 800f02a:	701e      	strb	r6, [r3, #0]
 800f02c:	6962      	ldr	r2, [r4, #20]
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	429a      	cmp	r2, r3
 800f032:	d004      	beq.n	800f03e <__swbuf_r+0x5a>
 800f034:	89a3      	ldrh	r3, [r4, #12]
 800f036:	07db      	lsls	r3, r3, #31
 800f038:	d506      	bpl.n	800f048 <__swbuf_r+0x64>
 800f03a:	2e0a      	cmp	r6, #10
 800f03c:	d104      	bne.n	800f048 <__swbuf_r+0x64>
 800f03e:	4621      	mov	r1, r4
 800f040:	4628      	mov	r0, r5
 800f042:	f7ff fa25 	bl	800e490 <_fflush_r>
 800f046:	b938      	cbnz	r0, 800f058 <__swbuf_r+0x74>
 800f048:	4638      	mov	r0, r7
 800f04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f04c:	4621      	mov	r1, r4
 800f04e:	4628      	mov	r0, r5
 800f050:	f000 f806 	bl	800f060 <__swsetup_r>
 800f054:	2800      	cmp	r0, #0
 800f056:	d0d5      	beq.n	800f004 <__swbuf_r+0x20>
 800f058:	f04f 37ff 	mov.w	r7, #4294967295
 800f05c:	e7f4      	b.n	800f048 <__swbuf_r+0x64>
	...

0800f060 <__swsetup_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4b2a      	ldr	r3, [pc, #168]	; (800f10c <__swsetup_r+0xac>)
 800f064:	4605      	mov	r5, r0
 800f066:	6818      	ldr	r0, [r3, #0]
 800f068:	460c      	mov	r4, r1
 800f06a:	b118      	cbz	r0, 800f074 <__swsetup_r+0x14>
 800f06c:	6a03      	ldr	r3, [r0, #32]
 800f06e:	b90b      	cbnz	r3, 800f074 <__swsetup_r+0x14>
 800f070:	f7fc fc44 	bl	800b8fc <__sinit>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f07a:	0718      	lsls	r0, r3, #28
 800f07c:	d422      	bmi.n	800f0c4 <__swsetup_r+0x64>
 800f07e:	06d9      	lsls	r1, r3, #27
 800f080:	d407      	bmi.n	800f092 <__swsetup_r+0x32>
 800f082:	2309      	movs	r3, #9
 800f084:	602b      	str	r3, [r5, #0]
 800f086:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	e034      	b.n	800f0fc <__swsetup_r+0x9c>
 800f092:	0758      	lsls	r0, r3, #29
 800f094:	d512      	bpl.n	800f0bc <__swsetup_r+0x5c>
 800f096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f098:	b141      	cbz	r1, 800f0ac <__swsetup_r+0x4c>
 800f09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	d002      	beq.n	800f0a8 <__swsetup_r+0x48>
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f7fd fbd2 	bl	800c84c <_free_r>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	6363      	str	r3, [r4, #52]	; 0x34
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6063      	str	r3, [r4, #4]
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f043 0308 	orr.w	r3, r3, #8
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	b94b      	cbnz	r3, 800f0dc <__swsetup_r+0x7c>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0d2:	d003      	beq.n	800f0dc <__swsetup_r+0x7c>
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f000 f884 	bl	800f1e4 <__smakebuf_r>
 800f0dc:	89a0      	ldrh	r0, [r4, #12]
 800f0de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0e2:	f010 0301 	ands.w	r3, r0, #1
 800f0e6:	d00a      	beq.n	800f0fe <__swsetup_r+0x9e>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60a3      	str	r3, [r4, #8]
 800f0ec:	6963      	ldr	r3, [r4, #20]
 800f0ee:	425b      	negs	r3, r3
 800f0f0:	61a3      	str	r3, [r4, #24]
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	b943      	cbnz	r3, 800f108 <__swsetup_r+0xa8>
 800f0f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0fa:	d1c4      	bne.n	800f086 <__swsetup_r+0x26>
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	0781      	lsls	r1, r0, #30
 800f100:	bf58      	it	pl
 800f102:	6963      	ldrpl	r3, [r4, #20]
 800f104:	60a3      	str	r3, [r4, #8]
 800f106:	e7f4      	b.n	800f0f2 <__swsetup_r+0x92>
 800f108:	2000      	movs	r0, #0
 800f10a:	e7f7      	b.n	800f0fc <__swsetup_r+0x9c>
 800f10c:	20000090 	.word	0x20000090

0800f110 <_raise_r>:
 800f110:	291f      	cmp	r1, #31
 800f112:	b538      	push	{r3, r4, r5, lr}
 800f114:	4604      	mov	r4, r0
 800f116:	460d      	mov	r5, r1
 800f118:	d904      	bls.n	800f124 <_raise_r+0x14>
 800f11a:	2316      	movs	r3, #22
 800f11c:	6003      	str	r3, [r0, #0]
 800f11e:	f04f 30ff 	mov.w	r0, #4294967295
 800f122:	bd38      	pop	{r3, r4, r5, pc}
 800f124:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f126:	b112      	cbz	r2, 800f12e <_raise_r+0x1e>
 800f128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f12c:	b94b      	cbnz	r3, 800f142 <_raise_r+0x32>
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 f830 	bl	800f194 <_getpid_r>
 800f134:	462a      	mov	r2, r5
 800f136:	4601      	mov	r1, r0
 800f138:	4620      	mov	r0, r4
 800f13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f13e:	f000 b817 	b.w	800f170 <_kill_r>
 800f142:	2b01      	cmp	r3, #1
 800f144:	d00a      	beq.n	800f15c <_raise_r+0x4c>
 800f146:	1c59      	adds	r1, r3, #1
 800f148:	d103      	bne.n	800f152 <_raise_r+0x42>
 800f14a:	2316      	movs	r3, #22
 800f14c:	6003      	str	r3, [r0, #0]
 800f14e:	2001      	movs	r0, #1
 800f150:	e7e7      	b.n	800f122 <_raise_r+0x12>
 800f152:	2400      	movs	r4, #0
 800f154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f158:	4628      	mov	r0, r5
 800f15a:	4798      	blx	r3
 800f15c:	2000      	movs	r0, #0
 800f15e:	e7e0      	b.n	800f122 <_raise_r+0x12>

0800f160 <raise>:
 800f160:	4b02      	ldr	r3, [pc, #8]	; (800f16c <raise+0xc>)
 800f162:	4601      	mov	r1, r0
 800f164:	6818      	ldr	r0, [r3, #0]
 800f166:	f7ff bfd3 	b.w	800f110 <_raise_r>
 800f16a:	bf00      	nop
 800f16c:	20000090 	.word	0x20000090

0800f170 <_kill_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4d07      	ldr	r5, [pc, #28]	; (800f190 <_kill_r+0x20>)
 800f174:	2300      	movs	r3, #0
 800f176:	4604      	mov	r4, r0
 800f178:	4608      	mov	r0, r1
 800f17a:	4611      	mov	r1, r2
 800f17c:	602b      	str	r3, [r5, #0]
 800f17e:	f7f3 ff93 	bl	80030a8 <_kill>
 800f182:	1c43      	adds	r3, r0, #1
 800f184:	d102      	bne.n	800f18c <_kill_r+0x1c>
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	b103      	cbz	r3, 800f18c <_kill_r+0x1c>
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	bd38      	pop	{r3, r4, r5, pc}
 800f18e:	bf00      	nop
 800f190:	20005498 	.word	0x20005498

0800f194 <_getpid_r>:
 800f194:	f7f3 bf80 	b.w	8003098 <_getpid>

0800f198 <__swhatbuf_r>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	460c      	mov	r4, r1
 800f19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1a0:	2900      	cmp	r1, #0
 800f1a2:	b096      	sub	sp, #88	; 0x58
 800f1a4:	4615      	mov	r5, r2
 800f1a6:	461e      	mov	r6, r3
 800f1a8:	da0d      	bge.n	800f1c6 <__swhatbuf_r+0x2e>
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f1b0:	f04f 0100 	mov.w	r1, #0
 800f1b4:	bf0c      	ite	eq
 800f1b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f1ba:	2340      	movne	r3, #64	; 0x40
 800f1bc:	2000      	movs	r0, #0
 800f1be:	6031      	str	r1, [r6, #0]
 800f1c0:	602b      	str	r3, [r5, #0]
 800f1c2:	b016      	add	sp, #88	; 0x58
 800f1c4:	bd70      	pop	{r4, r5, r6, pc}
 800f1c6:	466a      	mov	r2, sp
 800f1c8:	f000 f848 	bl	800f25c <_fstat_r>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	dbec      	blt.n	800f1aa <__swhatbuf_r+0x12>
 800f1d0:	9901      	ldr	r1, [sp, #4]
 800f1d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1da:	4259      	negs	r1, r3
 800f1dc:	4159      	adcs	r1, r3
 800f1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1e2:	e7eb      	b.n	800f1bc <__swhatbuf_r+0x24>

0800f1e4 <__smakebuf_r>:
 800f1e4:	898b      	ldrh	r3, [r1, #12]
 800f1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1e8:	079d      	lsls	r5, r3, #30
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	d507      	bpl.n	800f200 <__smakebuf_r+0x1c>
 800f1f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	6123      	str	r3, [r4, #16]
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	6163      	str	r3, [r4, #20]
 800f1fc:	b002      	add	sp, #8
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
 800f200:	ab01      	add	r3, sp, #4
 800f202:	466a      	mov	r2, sp
 800f204:	f7ff ffc8 	bl	800f198 <__swhatbuf_r>
 800f208:	9900      	ldr	r1, [sp, #0]
 800f20a:	4605      	mov	r5, r0
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7fd fb91 	bl	800c934 <_malloc_r>
 800f212:	b948      	cbnz	r0, 800f228 <__smakebuf_r+0x44>
 800f214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f218:	059a      	lsls	r2, r3, #22
 800f21a:	d4ef      	bmi.n	800f1fc <__smakebuf_r+0x18>
 800f21c:	f023 0303 	bic.w	r3, r3, #3
 800f220:	f043 0302 	orr.w	r3, r3, #2
 800f224:	81a3      	strh	r3, [r4, #12]
 800f226:	e7e3      	b.n	800f1f0 <__smakebuf_r+0xc>
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	6020      	str	r0, [r4, #0]
 800f22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f230:	81a3      	strh	r3, [r4, #12]
 800f232:	9b00      	ldr	r3, [sp, #0]
 800f234:	6163      	str	r3, [r4, #20]
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	6120      	str	r0, [r4, #16]
 800f23a:	b15b      	cbz	r3, 800f254 <__smakebuf_r+0x70>
 800f23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f240:	4630      	mov	r0, r6
 800f242:	f000 f81d 	bl	800f280 <_isatty_r>
 800f246:	b128      	cbz	r0, 800f254 <__smakebuf_r+0x70>
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	f023 0303 	bic.w	r3, r3, #3
 800f24e:	f043 0301 	orr.w	r3, r3, #1
 800f252:	81a3      	strh	r3, [r4, #12]
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	431d      	orrs	r5, r3
 800f258:	81a5      	strh	r5, [r4, #12]
 800f25a:	e7cf      	b.n	800f1fc <__smakebuf_r+0x18>

0800f25c <_fstat_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d07      	ldr	r5, [pc, #28]	; (800f27c <_fstat_r+0x20>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	4611      	mov	r1, r2
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f7f3 ff7c 	bl	8003166 <_fstat>
 800f26e:	1c43      	adds	r3, r0, #1
 800f270:	d102      	bne.n	800f278 <_fstat_r+0x1c>
 800f272:	682b      	ldr	r3, [r5, #0]
 800f274:	b103      	cbz	r3, 800f278 <_fstat_r+0x1c>
 800f276:	6023      	str	r3, [r4, #0]
 800f278:	bd38      	pop	{r3, r4, r5, pc}
 800f27a:	bf00      	nop
 800f27c:	20005498 	.word	0x20005498

0800f280 <_isatty_r>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	4d06      	ldr	r5, [pc, #24]	; (800f29c <_isatty_r+0x1c>)
 800f284:	2300      	movs	r3, #0
 800f286:	4604      	mov	r4, r0
 800f288:	4608      	mov	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f3 ff7b 	bl	8003186 <_isatty>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_isatty_r+0x1a>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_isatty_r+0x1a>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20005498 	.word	0x20005498

0800f2a0 <cos>:
 800f2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2a2:	ec53 2b10 	vmov	r2, r3, d0
 800f2a6:	4826      	ldr	r0, [pc, #152]	; (800f340 <cos+0xa0>)
 800f2a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f2ac:	4281      	cmp	r1, r0
 800f2ae:	dc06      	bgt.n	800f2be <cos+0x1e>
 800f2b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f338 <cos+0x98>
 800f2b4:	b005      	add	sp, #20
 800f2b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ba:	f000 b89d 	b.w	800f3f8 <__kernel_cos>
 800f2be:	4821      	ldr	r0, [pc, #132]	; (800f344 <cos+0xa4>)
 800f2c0:	4281      	cmp	r1, r0
 800f2c2:	dd09      	ble.n	800f2d8 <cos+0x38>
 800f2c4:	ee10 0a10 	vmov	r0, s0
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7f0 ffdd 	bl	8000288 <__aeabi_dsub>
 800f2ce:	ec41 0b10 	vmov	d0, r0, r1
 800f2d2:	b005      	add	sp, #20
 800f2d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2d8:	4668      	mov	r0, sp
 800f2da:	f000 fa15 	bl	800f708 <__ieee754_rem_pio2>
 800f2de:	f000 0003 	and.w	r0, r0, #3
 800f2e2:	2801      	cmp	r0, #1
 800f2e4:	d00b      	beq.n	800f2fe <cos+0x5e>
 800f2e6:	2802      	cmp	r0, #2
 800f2e8:	d016      	beq.n	800f318 <cos+0x78>
 800f2ea:	b9e0      	cbnz	r0, 800f326 <cos+0x86>
 800f2ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2f0:	ed9d 0b00 	vldr	d0, [sp]
 800f2f4:	f000 f880 	bl	800f3f8 <__kernel_cos>
 800f2f8:	ec51 0b10 	vmov	r0, r1, d0
 800f2fc:	e7e7      	b.n	800f2ce <cos+0x2e>
 800f2fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f302:	ed9d 0b00 	vldr	d0, [sp]
 800f306:	f000 f93f 	bl	800f588 <__kernel_sin>
 800f30a:	ec53 2b10 	vmov	r2, r3, d0
 800f30e:	ee10 0a10 	vmov	r0, s0
 800f312:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f316:	e7da      	b.n	800f2ce <cos+0x2e>
 800f318:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f31c:	ed9d 0b00 	vldr	d0, [sp]
 800f320:	f000 f86a 	bl	800f3f8 <__kernel_cos>
 800f324:	e7f1      	b.n	800f30a <cos+0x6a>
 800f326:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f32a:	ed9d 0b00 	vldr	d0, [sp]
 800f32e:	2001      	movs	r0, #1
 800f330:	f000 f92a 	bl	800f588 <__kernel_sin>
 800f334:	e7e0      	b.n	800f2f8 <cos+0x58>
 800f336:	bf00      	nop
	...
 800f340:	3fe921fb 	.word	0x3fe921fb
 800f344:	7fefffff 	.word	0x7fefffff

0800f348 <sin>:
 800f348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f34a:	ec53 2b10 	vmov	r2, r3, d0
 800f34e:	4828      	ldr	r0, [pc, #160]	; (800f3f0 <sin+0xa8>)
 800f350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f354:	4281      	cmp	r1, r0
 800f356:	dc07      	bgt.n	800f368 <sin+0x20>
 800f358:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f3e8 <sin+0xa0>
 800f35c:	2000      	movs	r0, #0
 800f35e:	b005      	add	sp, #20
 800f360:	f85d eb04 	ldr.w	lr, [sp], #4
 800f364:	f000 b910 	b.w	800f588 <__kernel_sin>
 800f368:	4822      	ldr	r0, [pc, #136]	; (800f3f4 <sin+0xac>)
 800f36a:	4281      	cmp	r1, r0
 800f36c:	dd09      	ble.n	800f382 <sin+0x3a>
 800f36e:	ee10 0a10 	vmov	r0, s0
 800f372:	4619      	mov	r1, r3
 800f374:	f7f0 ff88 	bl	8000288 <__aeabi_dsub>
 800f378:	ec41 0b10 	vmov	d0, r0, r1
 800f37c:	b005      	add	sp, #20
 800f37e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f382:	4668      	mov	r0, sp
 800f384:	f000 f9c0 	bl	800f708 <__ieee754_rem_pio2>
 800f388:	f000 0003 	and.w	r0, r0, #3
 800f38c:	2801      	cmp	r0, #1
 800f38e:	d00c      	beq.n	800f3aa <sin+0x62>
 800f390:	2802      	cmp	r0, #2
 800f392:	d011      	beq.n	800f3b8 <sin+0x70>
 800f394:	b9f0      	cbnz	r0, 800f3d4 <sin+0x8c>
 800f396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f39a:	ed9d 0b00 	vldr	d0, [sp]
 800f39e:	2001      	movs	r0, #1
 800f3a0:	f000 f8f2 	bl	800f588 <__kernel_sin>
 800f3a4:	ec51 0b10 	vmov	r0, r1, d0
 800f3a8:	e7e6      	b.n	800f378 <sin+0x30>
 800f3aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3ae:	ed9d 0b00 	vldr	d0, [sp]
 800f3b2:	f000 f821 	bl	800f3f8 <__kernel_cos>
 800f3b6:	e7f5      	b.n	800f3a4 <sin+0x5c>
 800f3b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3bc:	ed9d 0b00 	vldr	d0, [sp]
 800f3c0:	2001      	movs	r0, #1
 800f3c2:	f000 f8e1 	bl	800f588 <__kernel_sin>
 800f3c6:	ec53 2b10 	vmov	r2, r3, d0
 800f3ca:	ee10 0a10 	vmov	r0, s0
 800f3ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f3d2:	e7d1      	b.n	800f378 <sin+0x30>
 800f3d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3d8:	ed9d 0b00 	vldr	d0, [sp]
 800f3dc:	f000 f80c 	bl	800f3f8 <__kernel_cos>
 800f3e0:	e7f1      	b.n	800f3c6 <sin+0x7e>
 800f3e2:	bf00      	nop
 800f3e4:	f3af 8000 	nop.w
	...
 800f3f0:	3fe921fb 	.word	0x3fe921fb
 800f3f4:	7fefffff 	.word	0x7fefffff

0800f3f8 <__kernel_cos>:
 800f3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ec57 6b10 	vmov	r6, r7, d0
 800f400:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f404:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f408:	ed8d 1b00 	vstr	d1, [sp]
 800f40c:	da07      	bge.n	800f41e <__kernel_cos+0x26>
 800f40e:	ee10 0a10 	vmov	r0, s0
 800f412:	4639      	mov	r1, r7
 800f414:	f7f1 fba0 	bl	8000b58 <__aeabi_d2iz>
 800f418:	2800      	cmp	r0, #0
 800f41a:	f000 8088 	beq.w	800f52e <__kernel_cos+0x136>
 800f41e:	4632      	mov	r2, r6
 800f420:	463b      	mov	r3, r7
 800f422:	4630      	mov	r0, r6
 800f424:	4639      	mov	r1, r7
 800f426:	f7f1 f8e7 	bl	80005f8 <__aeabi_dmul>
 800f42a:	4b51      	ldr	r3, [pc, #324]	; (800f570 <__kernel_cos+0x178>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	4604      	mov	r4, r0
 800f430:	460d      	mov	r5, r1
 800f432:	f7f1 f8e1 	bl	80005f8 <__aeabi_dmul>
 800f436:	a340      	add	r3, pc, #256	; (adr r3, 800f538 <__kernel_cos+0x140>)
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	4682      	mov	sl, r0
 800f43e:	468b      	mov	fp, r1
 800f440:	4620      	mov	r0, r4
 800f442:	4629      	mov	r1, r5
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	a33d      	add	r3, pc, #244	; (adr r3, 800f540 <__kernel_cos+0x148>)
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	f7f0 ff1d 	bl	800028c <__adddf3>
 800f452:	4622      	mov	r2, r4
 800f454:	462b      	mov	r3, r5
 800f456:	f7f1 f8cf 	bl	80005f8 <__aeabi_dmul>
 800f45a:	a33b      	add	r3, pc, #236	; (adr r3, 800f548 <__kernel_cos+0x150>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	f7f0 ff12 	bl	8000288 <__aeabi_dsub>
 800f464:	4622      	mov	r2, r4
 800f466:	462b      	mov	r3, r5
 800f468:	f7f1 f8c6 	bl	80005f8 <__aeabi_dmul>
 800f46c:	a338      	add	r3, pc, #224	; (adr r3, 800f550 <__kernel_cos+0x158>)
 800f46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f472:	f7f0 ff0b 	bl	800028c <__adddf3>
 800f476:	4622      	mov	r2, r4
 800f478:	462b      	mov	r3, r5
 800f47a:	f7f1 f8bd 	bl	80005f8 <__aeabi_dmul>
 800f47e:	a336      	add	r3, pc, #216	; (adr r3, 800f558 <__kernel_cos+0x160>)
 800f480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f484:	f7f0 ff00 	bl	8000288 <__aeabi_dsub>
 800f488:	4622      	mov	r2, r4
 800f48a:	462b      	mov	r3, r5
 800f48c:	f7f1 f8b4 	bl	80005f8 <__aeabi_dmul>
 800f490:	a333      	add	r3, pc, #204	; (adr r3, 800f560 <__kernel_cos+0x168>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	f7f0 fef9 	bl	800028c <__adddf3>
 800f49a:	4622      	mov	r2, r4
 800f49c:	462b      	mov	r3, r5
 800f49e:	f7f1 f8ab 	bl	80005f8 <__aeabi_dmul>
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	f7f1 f8a7 	bl	80005f8 <__aeabi_dmul>
 800f4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	460d      	mov	r5, r1
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	f7f1 f89f 	bl	80005f8 <__aeabi_dmul>
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	4602      	mov	r2, r0
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f7f0 fee1 	bl	8000288 <__aeabi_dsub>
 800f4c6:	4b2b      	ldr	r3, [pc, #172]	; (800f574 <__kernel_cos+0x17c>)
 800f4c8:	4598      	cmp	r8, r3
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	dc10      	bgt.n	800f4f2 <__kernel_cos+0xfa>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	4650      	mov	r0, sl
 800f4d6:	4659      	mov	r1, fp
 800f4d8:	f7f0 fed6 	bl	8000288 <__aeabi_dsub>
 800f4dc:	460b      	mov	r3, r1
 800f4de:	4926      	ldr	r1, [pc, #152]	; (800f578 <__kernel_cos+0x180>)
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	f7f0 fed0 	bl	8000288 <__aeabi_dsub>
 800f4e8:	ec41 0b10 	vmov	d0, r0, r1
 800f4ec:	b003      	add	sp, #12
 800f4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f2:	4b22      	ldr	r3, [pc, #136]	; (800f57c <__kernel_cos+0x184>)
 800f4f4:	4920      	ldr	r1, [pc, #128]	; (800f578 <__kernel_cos+0x180>)
 800f4f6:	4598      	cmp	r8, r3
 800f4f8:	bfcc      	ite	gt
 800f4fa:	4d21      	ldrgt	r5, [pc, #132]	; (800f580 <__kernel_cos+0x188>)
 800f4fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f500:	2400      	movs	r4, #0
 800f502:	4622      	mov	r2, r4
 800f504:	462b      	mov	r3, r5
 800f506:	2000      	movs	r0, #0
 800f508:	f7f0 febe 	bl	8000288 <__aeabi_dsub>
 800f50c:	4622      	mov	r2, r4
 800f50e:	4680      	mov	r8, r0
 800f510:	4689      	mov	r9, r1
 800f512:	462b      	mov	r3, r5
 800f514:	4650      	mov	r0, sl
 800f516:	4659      	mov	r1, fp
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	4632      	mov	r2, r6
 800f51e:	463b      	mov	r3, r7
 800f520:	f7f0 feb2 	bl	8000288 <__aeabi_dsub>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4640      	mov	r0, r8
 800f52a:	4649      	mov	r1, r9
 800f52c:	e7da      	b.n	800f4e4 <__kernel_cos+0xec>
 800f52e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f568 <__kernel_cos+0x170>
 800f532:	e7db      	b.n	800f4ec <__kernel_cos+0xf4>
 800f534:	f3af 8000 	nop.w
 800f538:	be8838d4 	.word	0xbe8838d4
 800f53c:	bda8fae9 	.word	0xbda8fae9
 800f540:	bdb4b1c4 	.word	0xbdb4b1c4
 800f544:	3e21ee9e 	.word	0x3e21ee9e
 800f548:	809c52ad 	.word	0x809c52ad
 800f54c:	3e927e4f 	.word	0x3e927e4f
 800f550:	19cb1590 	.word	0x19cb1590
 800f554:	3efa01a0 	.word	0x3efa01a0
 800f558:	16c15177 	.word	0x16c15177
 800f55c:	3f56c16c 	.word	0x3f56c16c
 800f560:	5555554c 	.word	0x5555554c
 800f564:	3fa55555 	.word	0x3fa55555
 800f568:	00000000 	.word	0x00000000
 800f56c:	3ff00000 	.word	0x3ff00000
 800f570:	3fe00000 	.word	0x3fe00000
 800f574:	3fd33332 	.word	0x3fd33332
 800f578:	3ff00000 	.word	0x3ff00000
 800f57c:	3fe90000 	.word	0x3fe90000
 800f580:	3fd20000 	.word	0x3fd20000
 800f584:	00000000 	.word	0x00000000

0800f588 <__kernel_sin>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	ed2d 8b04 	vpush	{d8-d9}
 800f590:	eeb0 8a41 	vmov.f32	s16, s2
 800f594:	eef0 8a61 	vmov.f32	s17, s3
 800f598:	ec55 4b10 	vmov	r4, r5, d0
 800f59c:	b083      	sub	sp, #12
 800f59e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f5a6:	9001      	str	r0, [sp, #4]
 800f5a8:	da06      	bge.n	800f5b8 <__kernel_sin+0x30>
 800f5aa:	ee10 0a10 	vmov	r0, s0
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	f7f1 fad2 	bl	8000b58 <__aeabi_d2iz>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d051      	beq.n	800f65c <__kernel_sin+0xd4>
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	462b      	mov	r3, r5
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f1 f81a 	bl	80005f8 <__aeabi_dmul>
 800f5c4:	4682      	mov	sl, r0
 800f5c6:	468b      	mov	fp, r1
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f1 f812 	bl	80005f8 <__aeabi_dmul>
 800f5d4:	a341      	add	r3, pc, #260	; (adr r3, 800f6dc <__kernel_sin+0x154>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	4680      	mov	r8, r0
 800f5dc:	4689      	mov	r9, r1
 800f5de:	4650      	mov	r0, sl
 800f5e0:	4659      	mov	r1, fp
 800f5e2:	f7f1 f809 	bl	80005f8 <__aeabi_dmul>
 800f5e6:	a33f      	add	r3, pc, #252	; (adr r3, 800f6e4 <__kernel_sin+0x15c>)
 800f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ec:	f7f0 fe4c 	bl	8000288 <__aeabi_dsub>
 800f5f0:	4652      	mov	r2, sl
 800f5f2:	465b      	mov	r3, fp
 800f5f4:	f7f1 f800 	bl	80005f8 <__aeabi_dmul>
 800f5f8:	a33c      	add	r3, pc, #240	; (adr r3, 800f6ec <__kernel_sin+0x164>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f7f0 fe45 	bl	800028c <__adddf3>
 800f602:	4652      	mov	r2, sl
 800f604:	465b      	mov	r3, fp
 800f606:	f7f0 fff7 	bl	80005f8 <__aeabi_dmul>
 800f60a:	a33a      	add	r3, pc, #232	; (adr r3, 800f6f4 <__kernel_sin+0x16c>)
 800f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f610:	f7f0 fe3a 	bl	8000288 <__aeabi_dsub>
 800f614:	4652      	mov	r2, sl
 800f616:	465b      	mov	r3, fp
 800f618:	f7f0 ffee 	bl	80005f8 <__aeabi_dmul>
 800f61c:	a337      	add	r3, pc, #220	; (adr r3, 800f6fc <__kernel_sin+0x174>)
 800f61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f622:	f7f0 fe33 	bl	800028c <__adddf3>
 800f626:	9b01      	ldr	r3, [sp, #4]
 800f628:	4606      	mov	r6, r0
 800f62a:	460f      	mov	r7, r1
 800f62c:	b9eb      	cbnz	r3, 800f66a <__kernel_sin+0xe2>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	4650      	mov	r0, sl
 800f634:	4659      	mov	r1, fp
 800f636:	f7f0 ffdf 	bl	80005f8 <__aeabi_dmul>
 800f63a:	a325      	add	r3, pc, #148	; (adr r3, 800f6d0 <__kernel_sin+0x148>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	f7f0 fe22 	bl	8000288 <__aeabi_dsub>
 800f644:	4642      	mov	r2, r8
 800f646:	464b      	mov	r3, r9
 800f648:	f7f0 ffd6 	bl	80005f8 <__aeabi_dmul>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	4620      	mov	r0, r4
 800f652:	4629      	mov	r1, r5
 800f654:	f7f0 fe1a 	bl	800028c <__adddf3>
 800f658:	4604      	mov	r4, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	ec45 4b10 	vmov	d0, r4, r5
 800f660:	b003      	add	sp, #12
 800f662:	ecbd 8b04 	vpop	{d8-d9}
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66a:	4b1b      	ldr	r3, [pc, #108]	; (800f6d8 <__kernel_sin+0x150>)
 800f66c:	ec51 0b18 	vmov	r0, r1, d8
 800f670:	2200      	movs	r2, #0
 800f672:	f7f0 ffc1 	bl	80005f8 <__aeabi_dmul>
 800f676:	4632      	mov	r2, r6
 800f678:	ec41 0b19 	vmov	d9, r0, r1
 800f67c:	463b      	mov	r3, r7
 800f67e:	4640      	mov	r0, r8
 800f680:	4649      	mov	r1, r9
 800f682:	f7f0 ffb9 	bl	80005f8 <__aeabi_dmul>
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	ec51 0b19 	vmov	r0, r1, d9
 800f68e:	f7f0 fdfb 	bl	8000288 <__aeabi_dsub>
 800f692:	4652      	mov	r2, sl
 800f694:	465b      	mov	r3, fp
 800f696:	f7f0 ffaf 	bl	80005f8 <__aeabi_dmul>
 800f69a:	ec53 2b18 	vmov	r2, r3, d8
 800f69e:	f7f0 fdf3 	bl	8000288 <__aeabi_dsub>
 800f6a2:	a30b      	add	r3, pc, #44	; (adr r3, 800f6d0 <__kernel_sin+0x148>)
 800f6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	460f      	mov	r7, r1
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	4649      	mov	r1, r9
 800f6b0:	f7f0 ffa2 	bl	80005f8 <__aeabi_dmul>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	f7f0 fde6 	bl	800028c <__adddf3>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f7f0 fdde 	bl	8000288 <__aeabi_dsub>
 800f6cc:	e7c4      	b.n	800f658 <__kernel_sin+0xd0>
 800f6ce:	bf00      	nop
 800f6d0:	55555549 	.word	0x55555549
 800f6d4:	3fc55555 	.word	0x3fc55555
 800f6d8:	3fe00000 	.word	0x3fe00000
 800f6dc:	5acfd57c 	.word	0x5acfd57c
 800f6e0:	3de5d93a 	.word	0x3de5d93a
 800f6e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f6e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f6ec:	57b1fe7d 	.word	0x57b1fe7d
 800f6f0:	3ec71de3 	.word	0x3ec71de3
 800f6f4:	19c161d5 	.word	0x19c161d5
 800f6f8:	3f2a01a0 	.word	0x3f2a01a0
 800f6fc:	1110f8a6 	.word	0x1110f8a6
 800f700:	3f811111 	.word	0x3f811111
 800f704:	00000000 	.word	0x00000000

0800f708 <__ieee754_rem_pio2>:
 800f708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f70c:	ed2d 8b02 	vpush	{d8}
 800f710:	ec55 4b10 	vmov	r4, r5, d0
 800f714:	4bca      	ldr	r3, [pc, #808]	; (800fa40 <__ieee754_rem_pio2+0x338>)
 800f716:	b08b      	sub	sp, #44	; 0x2c
 800f718:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f71c:	4598      	cmp	r8, r3
 800f71e:	4682      	mov	sl, r0
 800f720:	9502      	str	r5, [sp, #8]
 800f722:	dc08      	bgt.n	800f736 <__ieee754_rem_pio2+0x2e>
 800f724:	2200      	movs	r2, #0
 800f726:	2300      	movs	r3, #0
 800f728:	ed80 0b00 	vstr	d0, [r0]
 800f72c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f730:	f04f 0b00 	mov.w	fp, #0
 800f734:	e028      	b.n	800f788 <__ieee754_rem_pio2+0x80>
 800f736:	4bc3      	ldr	r3, [pc, #780]	; (800fa44 <__ieee754_rem_pio2+0x33c>)
 800f738:	4598      	cmp	r8, r3
 800f73a:	dc78      	bgt.n	800f82e <__ieee754_rem_pio2+0x126>
 800f73c:	9b02      	ldr	r3, [sp, #8]
 800f73e:	4ec2      	ldr	r6, [pc, #776]	; (800fa48 <__ieee754_rem_pio2+0x340>)
 800f740:	2b00      	cmp	r3, #0
 800f742:	ee10 0a10 	vmov	r0, s0
 800f746:	a3b0      	add	r3, pc, #704	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x300>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	4629      	mov	r1, r5
 800f74e:	dd39      	ble.n	800f7c4 <__ieee754_rem_pio2+0xbc>
 800f750:	f7f0 fd9a 	bl	8000288 <__aeabi_dsub>
 800f754:	45b0      	cmp	r8, r6
 800f756:	4604      	mov	r4, r0
 800f758:	460d      	mov	r5, r1
 800f75a:	d01b      	beq.n	800f794 <__ieee754_rem_pio2+0x8c>
 800f75c:	a3ac      	add	r3, pc, #688	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x308>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	f7f0 fd91 	bl	8000288 <__aeabi_dsub>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	e9ca 2300 	strd	r2, r3, [sl]
 800f76e:	4620      	mov	r0, r4
 800f770:	4629      	mov	r1, r5
 800f772:	f7f0 fd89 	bl	8000288 <__aeabi_dsub>
 800f776:	a3a6      	add	r3, pc, #664	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x308>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	f7f0 fd84 	bl	8000288 <__aeabi_dsub>
 800f780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f784:	f04f 0b01 	mov.w	fp, #1
 800f788:	4658      	mov	r0, fp
 800f78a:	b00b      	add	sp, #44	; 0x2c
 800f78c:	ecbd 8b02 	vpop	{d8}
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	a3a0      	add	r3, pc, #640	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x310>)
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	f7f0 fd75 	bl	8000288 <__aeabi_dsub>
 800f79e:	a3a0      	add	r3, pc, #640	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x318>)
 800f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	f7f0 fd6e 	bl	8000288 <__aeabi_dsub>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	e9ca 2300 	strd	r2, r3, [sl]
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	f7f0 fd66 	bl	8000288 <__aeabi_dsub>
 800f7bc:	a398      	add	r3, pc, #608	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x318>)
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	e7db      	b.n	800f77c <__ieee754_rem_pio2+0x74>
 800f7c4:	f7f0 fd62 	bl	800028c <__adddf3>
 800f7c8:	45b0      	cmp	r8, r6
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	460d      	mov	r5, r1
 800f7ce:	d016      	beq.n	800f7fe <__ieee754_rem_pio2+0xf6>
 800f7d0:	a38f      	add	r3, pc, #572	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x308>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f0 fd59 	bl	800028c <__adddf3>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	460b      	mov	r3, r1
 800f7de:	e9ca 2300 	strd	r2, r3, [sl]
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	f7f0 fd4f 	bl	8000288 <__aeabi_dsub>
 800f7ea:	a389      	add	r3, pc, #548	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x308>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f0 fd4c 	bl	800028c <__adddf3>
 800f7f4:	f04f 3bff 	mov.w	fp, #4294967295
 800f7f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7fc:	e7c4      	b.n	800f788 <__ieee754_rem_pio2+0x80>
 800f7fe:	a386      	add	r3, pc, #536	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x310>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	f7f0 fd42 	bl	800028c <__adddf3>
 800f808:	a385      	add	r3, pc, #532	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x318>)
 800f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80e:	4604      	mov	r4, r0
 800f810:	460d      	mov	r5, r1
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	e9ca 2300 	strd	r2, r3, [sl]
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f0 fd31 	bl	8000288 <__aeabi_dsub>
 800f826:	a37e      	add	r3, pc, #504	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x318>)
 800f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82c:	e7e0      	b.n	800f7f0 <__ieee754_rem_pio2+0xe8>
 800f82e:	4b87      	ldr	r3, [pc, #540]	; (800fa4c <__ieee754_rem_pio2+0x344>)
 800f830:	4598      	cmp	r8, r3
 800f832:	f300 80d8 	bgt.w	800f9e6 <__ieee754_rem_pio2+0x2de>
 800f836:	f000 f96d 	bl	800fb14 <fabs>
 800f83a:	ec55 4b10 	vmov	r4, r5, d0
 800f83e:	ee10 0a10 	vmov	r0, s0
 800f842:	a379      	add	r3, pc, #484	; (adr r3, 800fa28 <__ieee754_rem_pio2+0x320>)
 800f844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f848:	4629      	mov	r1, r5
 800f84a:	f7f0 fed5 	bl	80005f8 <__aeabi_dmul>
 800f84e:	4b80      	ldr	r3, [pc, #512]	; (800fa50 <__ieee754_rem_pio2+0x348>)
 800f850:	2200      	movs	r2, #0
 800f852:	f7f0 fd1b 	bl	800028c <__adddf3>
 800f856:	f7f1 f97f 	bl	8000b58 <__aeabi_d2iz>
 800f85a:	4683      	mov	fp, r0
 800f85c:	f7f0 fe62 	bl	8000524 <__aeabi_i2d>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	ec43 2b18 	vmov	d8, r2, r3
 800f868:	a367      	add	r3, pc, #412	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x300>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f0 fec3 	bl	80005f8 <__aeabi_dmul>
 800f872:	4602      	mov	r2, r0
 800f874:	460b      	mov	r3, r1
 800f876:	4620      	mov	r0, r4
 800f878:	4629      	mov	r1, r5
 800f87a:	f7f0 fd05 	bl	8000288 <__aeabi_dsub>
 800f87e:	a364      	add	r3, pc, #400	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x308>)
 800f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f884:	4606      	mov	r6, r0
 800f886:	460f      	mov	r7, r1
 800f888:	ec51 0b18 	vmov	r0, r1, d8
 800f88c:	f7f0 feb4 	bl	80005f8 <__aeabi_dmul>
 800f890:	f1bb 0f1f 	cmp.w	fp, #31
 800f894:	4604      	mov	r4, r0
 800f896:	460d      	mov	r5, r1
 800f898:	dc0d      	bgt.n	800f8b6 <__ieee754_rem_pio2+0x1ae>
 800f89a:	4b6e      	ldr	r3, [pc, #440]	; (800fa54 <__ieee754_rem_pio2+0x34c>)
 800f89c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a4:	4543      	cmp	r3, r8
 800f8a6:	d006      	beq.n	800f8b6 <__ieee754_rem_pio2+0x1ae>
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	462b      	mov	r3, r5
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	f7f0 fcea 	bl	8000288 <__aeabi_dsub>
 800f8b4:	e00e      	b.n	800f8d4 <__ieee754_rem_pio2+0x1cc>
 800f8b6:	462b      	mov	r3, r5
 800f8b8:	4622      	mov	r2, r4
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	f7f0 fce3 	bl	8000288 <__aeabi_dsub>
 800f8c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f8cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f8d0:	2b10      	cmp	r3, #16
 800f8d2:	dc02      	bgt.n	800f8da <__ieee754_rem_pio2+0x1d2>
 800f8d4:	e9ca 0100 	strd	r0, r1, [sl]
 800f8d8:	e039      	b.n	800f94e <__ieee754_rem_pio2+0x246>
 800f8da:	a34f      	add	r3, pc, #316	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x310>)
 800f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e0:	ec51 0b18 	vmov	r0, r1, d8
 800f8e4:	f7f0 fe88 	bl	80005f8 <__aeabi_dmul>
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	4639      	mov	r1, r7
 800f8f4:	f7f0 fcc8 	bl	8000288 <__aeabi_dsub>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	4689      	mov	r9, r1
 800f900:	4630      	mov	r0, r6
 800f902:	4639      	mov	r1, r7
 800f904:	f7f0 fcc0 	bl	8000288 <__aeabi_dsub>
 800f908:	4622      	mov	r2, r4
 800f90a:	462b      	mov	r3, r5
 800f90c:	f7f0 fcbc 	bl	8000288 <__aeabi_dsub>
 800f910:	a343      	add	r3, pc, #268	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x318>)
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	4604      	mov	r4, r0
 800f918:	460d      	mov	r5, r1
 800f91a:	ec51 0b18 	vmov	r0, r1, d8
 800f91e:	f7f0 fe6b 	bl	80005f8 <__aeabi_dmul>
 800f922:	4622      	mov	r2, r4
 800f924:	462b      	mov	r3, r5
 800f926:	f7f0 fcaf 	bl	8000288 <__aeabi_dsub>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f0 fca7 	bl	8000288 <__aeabi_dsub>
 800f93a:	9a03      	ldr	r2, [sp, #12]
 800f93c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	2b31      	cmp	r3, #49	; 0x31
 800f944:	dc24      	bgt.n	800f990 <__ieee754_rem_pio2+0x288>
 800f946:	e9ca 0100 	strd	r0, r1, [sl]
 800f94a:	4646      	mov	r6, r8
 800f94c:	464f      	mov	r7, r9
 800f94e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f952:	4630      	mov	r0, r6
 800f954:	4642      	mov	r2, r8
 800f956:	464b      	mov	r3, r9
 800f958:	4639      	mov	r1, r7
 800f95a:	f7f0 fc95 	bl	8000288 <__aeabi_dsub>
 800f95e:	462b      	mov	r3, r5
 800f960:	4622      	mov	r2, r4
 800f962:	f7f0 fc91 	bl	8000288 <__aeabi_dsub>
 800f966:	9b02      	ldr	r3, [sp, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f96e:	f6bf af0b 	bge.w	800f788 <__ieee754_rem_pio2+0x80>
 800f972:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f976:	f8ca 3004 	str.w	r3, [sl, #4]
 800f97a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f97e:	f8ca 8000 	str.w	r8, [sl]
 800f982:	f8ca 0008 	str.w	r0, [sl, #8]
 800f986:	f8ca 300c 	str.w	r3, [sl, #12]
 800f98a:	f1cb 0b00 	rsb	fp, fp, #0
 800f98e:	e6fb      	b.n	800f788 <__ieee754_rem_pio2+0x80>
 800f990:	a327      	add	r3, pc, #156	; (adr r3, 800fa30 <__ieee754_rem_pio2+0x328>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	ec51 0b18 	vmov	r0, r1, d8
 800f99a:	f7f0 fe2d 	bl	80005f8 <__aeabi_dmul>
 800f99e:	4604      	mov	r4, r0
 800f9a0:	460d      	mov	r5, r1
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	4640      	mov	r0, r8
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	f7f0 fc6d 	bl	8000288 <__aeabi_dsub>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460f      	mov	r7, r1
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	f7f0 fc65 	bl	8000288 <__aeabi_dsub>
 800f9be:	4622      	mov	r2, r4
 800f9c0:	462b      	mov	r3, r5
 800f9c2:	f7f0 fc61 	bl	8000288 <__aeabi_dsub>
 800f9c6:	a31c      	add	r3, pc, #112	; (adr r3, 800fa38 <__ieee754_rem_pio2+0x330>)
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	460d      	mov	r5, r1
 800f9d0:	ec51 0b18 	vmov	r0, r1, d8
 800f9d4:	f7f0 fe10 	bl	80005f8 <__aeabi_dmul>
 800f9d8:	4622      	mov	r2, r4
 800f9da:	462b      	mov	r3, r5
 800f9dc:	f7f0 fc54 	bl	8000288 <__aeabi_dsub>
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	e760      	b.n	800f8a8 <__ieee754_rem_pio2+0x1a0>
 800f9e6:	4b1c      	ldr	r3, [pc, #112]	; (800fa58 <__ieee754_rem_pio2+0x350>)
 800f9e8:	4598      	cmp	r8, r3
 800f9ea:	dd37      	ble.n	800fa5c <__ieee754_rem_pio2+0x354>
 800f9ec:	ee10 2a10 	vmov	r2, s0
 800f9f0:	462b      	mov	r3, r5
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	f7f0 fc47 	bl	8000288 <__aeabi_dsub>
 800f9fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f9fe:	e9ca 0100 	strd	r0, r1, [sl]
 800fa02:	e695      	b.n	800f730 <__ieee754_rem_pio2+0x28>
 800fa04:	f3af 8000 	nop.w
 800fa08:	54400000 	.word	0x54400000
 800fa0c:	3ff921fb 	.word	0x3ff921fb
 800fa10:	1a626331 	.word	0x1a626331
 800fa14:	3dd0b461 	.word	0x3dd0b461
 800fa18:	1a600000 	.word	0x1a600000
 800fa1c:	3dd0b461 	.word	0x3dd0b461
 800fa20:	2e037073 	.word	0x2e037073
 800fa24:	3ba3198a 	.word	0x3ba3198a
 800fa28:	6dc9c883 	.word	0x6dc9c883
 800fa2c:	3fe45f30 	.word	0x3fe45f30
 800fa30:	2e000000 	.word	0x2e000000
 800fa34:	3ba3198a 	.word	0x3ba3198a
 800fa38:	252049c1 	.word	0x252049c1
 800fa3c:	397b839a 	.word	0x397b839a
 800fa40:	3fe921fb 	.word	0x3fe921fb
 800fa44:	4002d97b 	.word	0x4002d97b
 800fa48:	3ff921fb 	.word	0x3ff921fb
 800fa4c:	413921fb 	.word	0x413921fb
 800fa50:	3fe00000 	.word	0x3fe00000
 800fa54:	08010908 	.word	0x08010908
 800fa58:	7fefffff 	.word	0x7fefffff
 800fa5c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800fa60:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800fa64:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800fa68:	4620      	mov	r0, r4
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	f7f1 f874 	bl	8000b58 <__aeabi_d2iz>
 800fa70:	f7f0 fd58 	bl	8000524 <__aeabi_i2d>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4620      	mov	r0, r4
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa80:	f7f0 fc02 	bl	8000288 <__aeabi_dsub>
 800fa84:	4b21      	ldr	r3, [pc, #132]	; (800fb0c <__ieee754_rem_pio2+0x404>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	f7f0 fdb6 	bl	80005f8 <__aeabi_dmul>
 800fa8c:	460d      	mov	r5, r1
 800fa8e:	4604      	mov	r4, r0
 800fa90:	f7f1 f862 	bl	8000b58 <__aeabi_d2iz>
 800fa94:	f7f0 fd46 	bl	8000524 <__aeabi_i2d>
 800fa98:	4602      	mov	r2, r0
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	4629      	mov	r1, r5
 800faa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800faa4:	f7f0 fbf0 	bl	8000288 <__aeabi_dsub>
 800faa8:	4b18      	ldr	r3, [pc, #96]	; (800fb0c <__ieee754_rem_pio2+0x404>)
 800faaa:	2200      	movs	r2, #0
 800faac:	f7f0 fda4 	bl	80005f8 <__aeabi_dmul>
 800fab0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fab4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800fab8:	2703      	movs	r7, #3
 800faba:	2400      	movs	r4, #0
 800fabc:	2500      	movs	r5, #0
 800fabe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800fac2:	4622      	mov	r2, r4
 800fac4:	462b      	mov	r3, r5
 800fac6:	46b9      	mov	r9, r7
 800fac8:	3f01      	subs	r7, #1
 800faca:	f7f0 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800face:	2800      	cmp	r0, #0
 800fad0:	d1f5      	bne.n	800fabe <__ieee754_rem_pio2+0x3b6>
 800fad2:	4b0f      	ldr	r3, [pc, #60]	; (800fb10 <__ieee754_rem_pio2+0x408>)
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	2302      	movs	r3, #2
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	4632      	mov	r2, r6
 800fadc:	464b      	mov	r3, r9
 800fade:	4651      	mov	r1, sl
 800fae0:	a804      	add	r0, sp, #16
 800fae2:	f000 f821 	bl	800fb28 <__kernel_rem_pio2>
 800fae6:	9b02      	ldr	r3, [sp, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	4683      	mov	fp, r0
 800faec:	f6bf ae4c 	bge.w	800f788 <__ieee754_rem_pio2+0x80>
 800faf0:	e9da 2100 	ldrd	r2, r1, [sl]
 800faf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800faf8:	e9ca 2300 	strd	r2, r3, [sl]
 800fafc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fb00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb04:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fb08:	e73f      	b.n	800f98a <__ieee754_rem_pio2+0x282>
 800fb0a:	bf00      	nop
 800fb0c:	41700000 	.word	0x41700000
 800fb10:	08010988 	.word	0x08010988

0800fb14 <fabs>:
 800fb14:	ec51 0b10 	vmov	r0, r1, d0
 800fb18:	ee10 2a10 	vmov	r2, s0
 800fb1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb20:	ec43 2b10 	vmov	d0, r2, r3
 800fb24:	4770      	bx	lr
	...

0800fb28 <__kernel_rem_pio2>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	ed2d 8b02 	vpush	{d8}
 800fb30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fb34:	f112 0f14 	cmn.w	r2, #20
 800fb38:	9306      	str	r3, [sp, #24]
 800fb3a:	9104      	str	r1, [sp, #16]
 800fb3c:	4bc2      	ldr	r3, [pc, #776]	; (800fe48 <__kernel_rem_pio2+0x320>)
 800fb3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800fb40:	9009      	str	r0, [sp, #36]	; 0x24
 800fb42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	9b06      	ldr	r3, [sp, #24]
 800fb4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb4e:	bfa8      	it	ge
 800fb50:	1ed4      	subge	r4, r2, #3
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	bfb2      	itee	lt
 800fb56:	2400      	movlt	r4, #0
 800fb58:	2318      	movge	r3, #24
 800fb5a:	fb94 f4f3 	sdivge	r4, r4, r3
 800fb5e:	f06f 0317 	mvn.w	r3, #23
 800fb62:	fb04 3303 	mla	r3, r4, r3, r3
 800fb66:	eb03 0a02 	add.w	sl, r3, r2
 800fb6a:	9b00      	ldr	r3, [sp, #0]
 800fb6c:	9a05      	ldr	r2, [sp, #20]
 800fb6e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800fe38 <__kernel_rem_pio2+0x310>
 800fb72:	eb03 0802 	add.w	r8, r3, r2
 800fb76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fb78:	1aa7      	subs	r7, r4, r2
 800fb7a:	ae20      	add	r6, sp, #128	; 0x80
 800fb7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fb80:	2500      	movs	r5, #0
 800fb82:	4545      	cmp	r5, r8
 800fb84:	dd13      	ble.n	800fbae <__kernel_rem_pio2+0x86>
 800fb86:	9b06      	ldr	r3, [sp, #24]
 800fb88:	aa20      	add	r2, sp, #128	; 0x80
 800fb8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fb8e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800fb92:	f04f 0800 	mov.w	r8, #0
 800fb96:	9b00      	ldr	r3, [sp, #0]
 800fb98:	4598      	cmp	r8, r3
 800fb9a:	dc31      	bgt.n	800fc00 <__kernel_rem_pio2+0xd8>
 800fb9c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800fe38 <__kernel_rem_pio2+0x310>
 800fba0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fba8:	462f      	mov	r7, r5
 800fbaa:	2600      	movs	r6, #0
 800fbac:	e01b      	b.n	800fbe6 <__kernel_rem_pio2+0xbe>
 800fbae:	42ef      	cmn	r7, r5
 800fbb0:	d407      	bmi.n	800fbc2 <__kernel_rem_pio2+0x9a>
 800fbb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fbb6:	f7f0 fcb5 	bl	8000524 <__aeabi_i2d>
 800fbba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fbbe:	3501      	adds	r5, #1
 800fbc0:	e7df      	b.n	800fb82 <__kernel_rem_pio2+0x5a>
 800fbc2:	ec51 0b18 	vmov	r0, r1, d8
 800fbc6:	e7f8      	b.n	800fbba <__kernel_rem_pio2+0x92>
 800fbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fbd0:	f7f0 fd12 	bl	80005f8 <__aeabi_dmul>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbdc:	f7f0 fb56 	bl	800028c <__adddf3>
 800fbe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbe4:	3601      	adds	r6, #1
 800fbe6:	9b05      	ldr	r3, [sp, #20]
 800fbe8:	429e      	cmp	r6, r3
 800fbea:	f1a7 0708 	sub.w	r7, r7, #8
 800fbee:	ddeb      	ble.n	800fbc8 <__kernel_rem_pio2+0xa0>
 800fbf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbf4:	f108 0801 	add.w	r8, r8, #1
 800fbf8:	ecab 7b02 	vstmia	fp!, {d7}
 800fbfc:	3508      	adds	r5, #8
 800fbfe:	e7ca      	b.n	800fb96 <__kernel_rem_pio2+0x6e>
 800fc00:	9b00      	ldr	r3, [sp, #0]
 800fc02:	aa0c      	add	r2, sp, #48	; 0x30
 800fc04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc08:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc0a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fc0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc10:	9c00      	ldr	r4, [sp, #0]
 800fc12:	930a      	str	r3, [sp, #40]	; 0x28
 800fc14:	00e3      	lsls	r3, r4, #3
 800fc16:	9308      	str	r3, [sp, #32]
 800fc18:	ab98      	add	r3, sp, #608	; 0x260
 800fc1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fc22:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800fc26:	ab70      	add	r3, sp, #448	; 0x1c0
 800fc28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fc2c:	46c3      	mov	fp, r8
 800fc2e:	46a1      	mov	r9, r4
 800fc30:	f1b9 0f00 	cmp.w	r9, #0
 800fc34:	f1a5 0508 	sub.w	r5, r5, #8
 800fc38:	dc77      	bgt.n	800fd2a <__kernel_rem_pio2+0x202>
 800fc3a:	ec47 6b10 	vmov	d0, r6, r7
 800fc3e:	4650      	mov	r0, sl
 800fc40:	f000 fac2 	bl	80101c8 <scalbn>
 800fc44:	ec57 6b10 	vmov	r6, r7, d0
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fc4e:	ee10 0a10 	vmov	r0, s0
 800fc52:	4639      	mov	r1, r7
 800fc54:	f7f0 fcd0 	bl	80005f8 <__aeabi_dmul>
 800fc58:	ec41 0b10 	vmov	d0, r0, r1
 800fc5c:	f000 fb34 	bl	80102c8 <floor>
 800fc60:	4b7a      	ldr	r3, [pc, #488]	; (800fe4c <__kernel_rem_pio2+0x324>)
 800fc62:	ec51 0b10 	vmov	r0, r1, d0
 800fc66:	2200      	movs	r2, #0
 800fc68:	f7f0 fcc6 	bl	80005f8 <__aeabi_dmul>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	460b      	mov	r3, r1
 800fc70:	4630      	mov	r0, r6
 800fc72:	4639      	mov	r1, r7
 800fc74:	f7f0 fb08 	bl	8000288 <__aeabi_dsub>
 800fc78:	460f      	mov	r7, r1
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	f7f0 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800fc80:	9002      	str	r0, [sp, #8]
 800fc82:	f7f0 fc4f 	bl	8000524 <__aeabi_i2d>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	f7f0 fafb 	bl	8000288 <__aeabi_dsub>
 800fc92:	f1ba 0f00 	cmp.w	sl, #0
 800fc96:	4606      	mov	r6, r0
 800fc98:	460f      	mov	r7, r1
 800fc9a:	dd6d      	ble.n	800fd78 <__kernel_rem_pio2+0x250>
 800fc9c:	1e61      	subs	r1, r4, #1
 800fc9e:	ab0c      	add	r3, sp, #48	; 0x30
 800fca0:	9d02      	ldr	r5, [sp, #8]
 800fca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fca6:	f1ca 0018 	rsb	r0, sl, #24
 800fcaa:	fa43 f200 	asr.w	r2, r3, r0
 800fcae:	4415      	add	r5, r2
 800fcb0:	4082      	lsls	r2, r0
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	aa0c      	add	r2, sp, #48	; 0x30
 800fcb6:	9502      	str	r5, [sp, #8]
 800fcb8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fcbc:	f1ca 0217 	rsb	r2, sl, #23
 800fcc0:	fa43 fb02 	asr.w	fp, r3, r2
 800fcc4:	f1bb 0f00 	cmp.w	fp, #0
 800fcc8:	dd65      	ble.n	800fd96 <__kernel_rem_pio2+0x26e>
 800fcca:	9b02      	ldr	r3, [sp, #8]
 800fccc:	2200      	movs	r2, #0
 800fcce:	3301      	adds	r3, #1
 800fcd0:	9302      	str	r3, [sp, #8]
 800fcd2:	4615      	mov	r5, r2
 800fcd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fcd8:	4294      	cmp	r4, r2
 800fcda:	f300 809f 	bgt.w	800fe1c <__kernel_rem_pio2+0x2f4>
 800fcde:	f1ba 0f00 	cmp.w	sl, #0
 800fce2:	dd07      	ble.n	800fcf4 <__kernel_rem_pio2+0x1cc>
 800fce4:	f1ba 0f01 	cmp.w	sl, #1
 800fce8:	f000 80c1 	beq.w	800fe6e <__kernel_rem_pio2+0x346>
 800fcec:	f1ba 0f02 	cmp.w	sl, #2
 800fcf0:	f000 80c7 	beq.w	800fe82 <__kernel_rem_pio2+0x35a>
 800fcf4:	f1bb 0f02 	cmp.w	fp, #2
 800fcf8:	d14d      	bne.n	800fd96 <__kernel_rem_pio2+0x26e>
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	463b      	mov	r3, r7
 800fcfe:	4954      	ldr	r1, [pc, #336]	; (800fe50 <__kernel_rem_pio2+0x328>)
 800fd00:	2000      	movs	r0, #0
 800fd02:	f7f0 fac1 	bl	8000288 <__aeabi_dsub>
 800fd06:	4606      	mov	r6, r0
 800fd08:	460f      	mov	r7, r1
 800fd0a:	2d00      	cmp	r5, #0
 800fd0c:	d043      	beq.n	800fd96 <__kernel_rem_pio2+0x26e>
 800fd0e:	4650      	mov	r0, sl
 800fd10:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800fe40 <__kernel_rem_pio2+0x318>
 800fd14:	f000 fa58 	bl	80101c8 <scalbn>
 800fd18:	4630      	mov	r0, r6
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	ec53 2b10 	vmov	r2, r3, d0
 800fd20:	f7f0 fab2 	bl	8000288 <__aeabi_dsub>
 800fd24:	4606      	mov	r6, r0
 800fd26:	460f      	mov	r7, r1
 800fd28:	e035      	b.n	800fd96 <__kernel_rem_pio2+0x26e>
 800fd2a:	4b4a      	ldr	r3, [pc, #296]	; (800fe54 <__kernel_rem_pio2+0x32c>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4630      	mov	r0, r6
 800fd30:	4639      	mov	r1, r7
 800fd32:	f7f0 fc61 	bl	80005f8 <__aeabi_dmul>
 800fd36:	f7f0 ff0f 	bl	8000b58 <__aeabi_d2iz>
 800fd3a:	f7f0 fbf3 	bl	8000524 <__aeabi_i2d>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	ec43 2b18 	vmov	d8, r2, r3
 800fd46:	4b44      	ldr	r3, [pc, #272]	; (800fe58 <__kernel_rem_pio2+0x330>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f7f0 fc55 	bl	80005f8 <__aeabi_dmul>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fa97 	bl	8000288 <__aeabi_dsub>
 800fd5a:	f7f0 fefd 	bl	8000b58 <__aeabi_d2iz>
 800fd5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd62:	f84b 0b04 	str.w	r0, [fp], #4
 800fd66:	ec51 0b18 	vmov	r0, r1, d8
 800fd6a:	f7f0 fa8f 	bl	800028c <__adddf3>
 800fd6e:	f109 39ff 	add.w	r9, r9, #4294967295
 800fd72:	4606      	mov	r6, r0
 800fd74:	460f      	mov	r7, r1
 800fd76:	e75b      	b.n	800fc30 <__kernel_rem_pio2+0x108>
 800fd78:	d106      	bne.n	800fd88 <__kernel_rem_pio2+0x260>
 800fd7a:	1e63      	subs	r3, r4, #1
 800fd7c:	aa0c      	add	r2, sp, #48	; 0x30
 800fd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd82:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800fd86:	e79d      	b.n	800fcc4 <__kernel_rem_pio2+0x19c>
 800fd88:	4b34      	ldr	r3, [pc, #208]	; (800fe5c <__kernel_rem_pio2+0x334>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f7f0 feba 	bl	8000b04 <__aeabi_dcmpge>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d140      	bne.n	800fe16 <__kernel_rem_pio2+0x2ee>
 800fd94:	4683      	mov	fp, r0
 800fd96:	2200      	movs	r2, #0
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	4639      	mov	r1, r7
 800fd9e:	f7f0 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	f000 80c1 	beq.w	800ff2a <__kernel_rem_pio2+0x402>
 800fda8:	1e65      	subs	r5, r4, #1
 800fdaa:	462b      	mov	r3, r5
 800fdac:	2200      	movs	r2, #0
 800fdae:	9900      	ldr	r1, [sp, #0]
 800fdb0:	428b      	cmp	r3, r1
 800fdb2:	da6d      	bge.n	800fe90 <__kernel_rem_pio2+0x368>
 800fdb4:	2a00      	cmp	r2, #0
 800fdb6:	f000 808a 	beq.w	800fece <__kernel_rem_pio2+0x3a6>
 800fdba:	ab0c      	add	r3, sp, #48	; 0x30
 800fdbc:	f1aa 0a18 	sub.w	sl, sl, #24
 800fdc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f000 80ae 	beq.w	800ff26 <__kernel_rem_pio2+0x3fe>
 800fdca:	4650      	mov	r0, sl
 800fdcc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800fe40 <__kernel_rem_pio2+0x318>
 800fdd0:	f000 f9fa 	bl	80101c8 <scalbn>
 800fdd4:	1c6b      	adds	r3, r5, #1
 800fdd6:	00da      	lsls	r2, r3, #3
 800fdd8:	9205      	str	r2, [sp, #20]
 800fdda:	ec57 6b10 	vmov	r6, r7, d0
 800fdde:	aa70      	add	r2, sp, #448	; 0x1c0
 800fde0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800fe54 <__kernel_rem_pio2+0x32c>
 800fde4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800fde8:	462c      	mov	r4, r5
 800fdea:	f04f 0800 	mov.w	r8, #0
 800fdee:	2c00      	cmp	r4, #0
 800fdf0:	f280 80d4 	bge.w	800ff9c <__kernel_rem_pio2+0x474>
 800fdf4:	462c      	mov	r4, r5
 800fdf6:	2c00      	cmp	r4, #0
 800fdf8:	f2c0 8102 	blt.w	8010000 <__kernel_rem_pio2+0x4d8>
 800fdfc:	4b18      	ldr	r3, [pc, #96]	; (800fe60 <__kernel_rem_pio2+0x338>)
 800fdfe:	461e      	mov	r6, r3
 800fe00:	ab70      	add	r3, sp, #448	; 0x1c0
 800fe02:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800fe06:	1b2b      	subs	r3, r5, r4
 800fe08:	f04f 0900 	mov.w	r9, #0
 800fe0c:	f04f 0a00 	mov.w	sl, #0
 800fe10:	2700      	movs	r7, #0
 800fe12:	9306      	str	r3, [sp, #24]
 800fe14:	e0e6      	b.n	800ffe4 <__kernel_rem_pio2+0x4bc>
 800fe16:	f04f 0b02 	mov.w	fp, #2
 800fe1a:	e756      	b.n	800fcca <__kernel_rem_pio2+0x1a2>
 800fe1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe20:	bb05      	cbnz	r5, 800fe64 <__kernel_rem_pio2+0x33c>
 800fe22:	b123      	cbz	r3, 800fe2e <__kernel_rem_pio2+0x306>
 800fe24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe28:	f8c8 3000 	str.w	r3, [r8]
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	3201      	adds	r2, #1
 800fe30:	f108 0804 	add.w	r8, r8, #4
 800fe34:	461d      	mov	r5, r3
 800fe36:	e74f      	b.n	800fcd8 <__kernel_rem_pio2+0x1b0>
	...
 800fe44:	3ff00000 	.word	0x3ff00000
 800fe48:	08010ad0 	.word	0x08010ad0
 800fe4c:	40200000 	.word	0x40200000
 800fe50:	3ff00000 	.word	0x3ff00000
 800fe54:	3e700000 	.word	0x3e700000
 800fe58:	41700000 	.word	0x41700000
 800fe5c:	3fe00000 	.word	0x3fe00000
 800fe60:	08010a90 	.word	0x08010a90
 800fe64:	1acb      	subs	r3, r1, r3
 800fe66:	f8c8 3000 	str.w	r3, [r8]
 800fe6a:	462b      	mov	r3, r5
 800fe6c:	e7df      	b.n	800fe2e <__kernel_rem_pio2+0x306>
 800fe6e:	1e62      	subs	r2, r4, #1
 800fe70:	ab0c      	add	r3, sp, #48	; 0x30
 800fe72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fe7a:	a90c      	add	r1, sp, #48	; 0x30
 800fe7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe80:	e738      	b.n	800fcf4 <__kernel_rem_pio2+0x1cc>
 800fe82:	1e62      	subs	r2, r4, #1
 800fe84:	ab0c      	add	r3, sp, #48	; 0x30
 800fe86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fe8e:	e7f4      	b.n	800fe7a <__kernel_rem_pio2+0x352>
 800fe90:	a90c      	add	r1, sp, #48	; 0x30
 800fe92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fe96:	3b01      	subs	r3, #1
 800fe98:	430a      	orrs	r2, r1
 800fe9a:	e788      	b.n	800fdae <__kernel_rem_pio2+0x286>
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fea2:	2900      	cmp	r1, #0
 800fea4:	d0fa      	beq.n	800fe9c <__kernel_rem_pio2+0x374>
 800fea6:	9a08      	ldr	r2, [sp, #32]
 800fea8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800feac:	446a      	add	r2, sp
 800feae:	3a98      	subs	r2, #152	; 0x98
 800feb0:	9208      	str	r2, [sp, #32]
 800feb2:	9a06      	ldr	r2, [sp, #24]
 800feb4:	a920      	add	r1, sp, #128	; 0x80
 800feb6:	18a2      	adds	r2, r4, r2
 800feb8:	18e3      	adds	r3, r4, r3
 800feba:	f104 0801 	add.w	r8, r4, #1
 800febe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800fec2:	9302      	str	r3, [sp, #8]
 800fec4:	9b02      	ldr	r3, [sp, #8]
 800fec6:	4543      	cmp	r3, r8
 800fec8:	da04      	bge.n	800fed4 <__kernel_rem_pio2+0x3ac>
 800feca:	461c      	mov	r4, r3
 800fecc:	e6a2      	b.n	800fc14 <__kernel_rem_pio2+0xec>
 800fece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fed0:	2301      	movs	r3, #1
 800fed2:	e7e4      	b.n	800fe9e <__kernel_rem_pio2+0x376>
 800fed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800feda:	f7f0 fb23 	bl	8000524 <__aeabi_i2d>
 800fede:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fee4:	46ab      	mov	fp, r5
 800fee6:	461c      	mov	r4, r3
 800fee8:	f04f 0900 	mov.w	r9, #0
 800feec:	2600      	movs	r6, #0
 800feee:	2700      	movs	r7, #0
 800fef0:	9b05      	ldr	r3, [sp, #20]
 800fef2:	4599      	cmp	r9, r3
 800fef4:	dd06      	ble.n	800ff04 <__kernel_rem_pio2+0x3dc>
 800fef6:	9b08      	ldr	r3, [sp, #32]
 800fef8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fefc:	f108 0801 	add.w	r8, r8, #1
 800ff00:	9308      	str	r3, [sp, #32]
 800ff02:	e7df      	b.n	800fec4 <__kernel_rem_pio2+0x39c>
 800ff04:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ff08:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ff0c:	f7f0 fb74 	bl	80005f8 <__aeabi_dmul>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4630      	mov	r0, r6
 800ff16:	4639      	mov	r1, r7
 800ff18:	f7f0 f9b8 	bl	800028c <__adddf3>
 800ff1c:	f109 0901 	add.w	r9, r9, #1
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	e7e4      	b.n	800fef0 <__kernel_rem_pio2+0x3c8>
 800ff26:	3d01      	subs	r5, #1
 800ff28:	e747      	b.n	800fdba <__kernel_rem_pio2+0x292>
 800ff2a:	ec47 6b10 	vmov	d0, r6, r7
 800ff2e:	f1ca 0000 	rsb	r0, sl, #0
 800ff32:	f000 f949 	bl	80101c8 <scalbn>
 800ff36:	ec57 6b10 	vmov	r6, r7, d0
 800ff3a:	4ba0      	ldr	r3, [pc, #640]	; (80101bc <__kernel_rem_pio2+0x694>)
 800ff3c:	ee10 0a10 	vmov	r0, s0
 800ff40:	2200      	movs	r2, #0
 800ff42:	4639      	mov	r1, r7
 800ff44:	f7f0 fdde 	bl	8000b04 <__aeabi_dcmpge>
 800ff48:	b1f8      	cbz	r0, 800ff8a <__kernel_rem_pio2+0x462>
 800ff4a:	4b9d      	ldr	r3, [pc, #628]	; (80101c0 <__kernel_rem_pio2+0x698>)
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	4630      	mov	r0, r6
 800ff50:	4639      	mov	r1, r7
 800ff52:	f7f0 fb51 	bl	80005f8 <__aeabi_dmul>
 800ff56:	f7f0 fdff 	bl	8000b58 <__aeabi_d2iz>
 800ff5a:	4680      	mov	r8, r0
 800ff5c:	f7f0 fae2 	bl	8000524 <__aeabi_i2d>
 800ff60:	4b96      	ldr	r3, [pc, #600]	; (80101bc <__kernel_rem_pio2+0x694>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	f7f0 fb48 	bl	80005f8 <__aeabi_dmul>
 800ff68:	460b      	mov	r3, r1
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f7f0 f98a 	bl	8000288 <__aeabi_dsub>
 800ff74:	f7f0 fdf0 	bl	8000b58 <__aeabi_d2iz>
 800ff78:	1c65      	adds	r5, r4, #1
 800ff7a:	ab0c      	add	r3, sp, #48	; 0x30
 800ff7c:	f10a 0a18 	add.w	sl, sl, #24
 800ff80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff84:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ff88:	e71f      	b.n	800fdca <__kernel_rem_pio2+0x2a2>
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	f7f0 fde3 	bl	8000b58 <__aeabi_d2iz>
 800ff92:	ab0c      	add	r3, sp, #48	; 0x30
 800ff94:	4625      	mov	r5, r4
 800ff96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff9a:	e716      	b.n	800fdca <__kernel_rem_pio2+0x2a2>
 800ff9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ff9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ffa2:	f7f0 fabf 	bl	8000524 <__aeabi_i2d>
 800ffa6:	4632      	mov	r2, r6
 800ffa8:	463b      	mov	r3, r7
 800ffaa:	f7f0 fb25 	bl	80005f8 <__aeabi_dmul>
 800ffae:	4642      	mov	r2, r8
 800ffb0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ffb4:	464b      	mov	r3, r9
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	4639      	mov	r1, r7
 800ffba:	f7f0 fb1d 	bl	80005f8 <__aeabi_dmul>
 800ffbe:	3c01      	subs	r4, #1
 800ffc0:	4606      	mov	r6, r0
 800ffc2:	460f      	mov	r7, r1
 800ffc4:	e713      	b.n	800fdee <__kernel_rem_pio2+0x2c6>
 800ffc6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ffca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ffce:	f7f0 fb13 	bl	80005f8 <__aeabi_dmul>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	4648      	mov	r0, r9
 800ffd8:	4651      	mov	r1, sl
 800ffda:	f7f0 f957 	bl	800028c <__adddf3>
 800ffde:	3701      	adds	r7, #1
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	468a      	mov	sl, r1
 800ffe4:	9b00      	ldr	r3, [sp, #0]
 800ffe6:	429f      	cmp	r7, r3
 800ffe8:	dc02      	bgt.n	800fff0 <__kernel_rem_pio2+0x4c8>
 800ffea:	9b06      	ldr	r3, [sp, #24]
 800ffec:	429f      	cmp	r7, r3
 800ffee:	ddea      	ble.n	800ffc6 <__kernel_rem_pio2+0x49e>
 800fff0:	9a06      	ldr	r2, [sp, #24]
 800fff2:	ab48      	add	r3, sp, #288	; 0x120
 800fff4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800fff8:	e9c6 9a00 	strd	r9, sl, [r6]
 800fffc:	3c01      	subs	r4, #1
 800fffe:	e6fa      	b.n	800fdf6 <__kernel_rem_pio2+0x2ce>
 8010000:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010002:	2b02      	cmp	r3, #2
 8010004:	dc0b      	bgt.n	801001e <__kernel_rem_pio2+0x4f6>
 8010006:	2b00      	cmp	r3, #0
 8010008:	dc39      	bgt.n	801007e <__kernel_rem_pio2+0x556>
 801000a:	d05d      	beq.n	80100c8 <__kernel_rem_pio2+0x5a0>
 801000c:	9b02      	ldr	r3, [sp, #8]
 801000e:	f003 0007 	and.w	r0, r3, #7
 8010012:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010016:	ecbd 8b02 	vpop	{d8}
 801001a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801001e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010020:	2b03      	cmp	r3, #3
 8010022:	d1f3      	bne.n	801000c <__kernel_rem_pio2+0x4e4>
 8010024:	9b05      	ldr	r3, [sp, #20]
 8010026:	9500      	str	r5, [sp, #0]
 8010028:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801002c:	eb0d 0403 	add.w	r4, sp, r3
 8010030:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010034:	46a2      	mov	sl, r4
 8010036:	9b00      	ldr	r3, [sp, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	f1aa 0a08 	sub.w	sl, sl, #8
 801003e:	dc69      	bgt.n	8010114 <__kernel_rem_pio2+0x5ec>
 8010040:	46aa      	mov	sl, r5
 8010042:	f1ba 0f01 	cmp.w	sl, #1
 8010046:	f1a4 0408 	sub.w	r4, r4, #8
 801004a:	f300 8083 	bgt.w	8010154 <__kernel_rem_pio2+0x62c>
 801004e:	9c05      	ldr	r4, [sp, #20]
 8010050:	ab48      	add	r3, sp, #288	; 0x120
 8010052:	441c      	add	r4, r3
 8010054:	2000      	movs	r0, #0
 8010056:	2100      	movs	r1, #0
 8010058:	2d01      	cmp	r5, #1
 801005a:	f300 809a 	bgt.w	8010192 <__kernel_rem_pio2+0x66a>
 801005e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010062:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010066:	f1bb 0f00 	cmp.w	fp, #0
 801006a:	f040 8098 	bne.w	801019e <__kernel_rem_pio2+0x676>
 801006e:	9b04      	ldr	r3, [sp, #16]
 8010070:	e9c3 7800 	strd	r7, r8, [r3]
 8010074:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010078:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801007c:	e7c6      	b.n	801000c <__kernel_rem_pio2+0x4e4>
 801007e:	9e05      	ldr	r6, [sp, #20]
 8010080:	ab48      	add	r3, sp, #288	; 0x120
 8010082:	441e      	add	r6, r3
 8010084:	462c      	mov	r4, r5
 8010086:	2000      	movs	r0, #0
 8010088:	2100      	movs	r1, #0
 801008a:	2c00      	cmp	r4, #0
 801008c:	da33      	bge.n	80100f6 <__kernel_rem_pio2+0x5ce>
 801008e:	f1bb 0f00 	cmp.w	fp, #0
 8010092:	d036      	beq.n	8010102 <__kernel_rem_pio2+0x5da>
 8010094:	4602      	mov	r2, r0
 8010096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801009a:	9c04      	ldr	r4, [sp, #16]
 801009c:	e9c4 2300 	strd	r2, r3, [r4]
 80100a0:	4602      	mov	r2, r0
 80100a2:	460b      	mov	r3, r1
 80100a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80100a8:	f7f0 f8ee 	bl	8000288 <__aeabi_dsub>
 80100ac:	ae4a      	add	r6, sp, #296	; 0x128
 80100ae:	2401      	movs	r4, #1
 80100b0:	42a5      	cmp	r5, r4
 80100b2:	da29      	bge.n	8010108 <__kernel_rem_pio2+0x5e0>
 80100b4:	f1bb 0f00 	cmp.w	fp, #0
 80100b8:	d002      	beq.n	80100c0 <__kernel_rem_pio2+0x598>
 80100ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100be:	4619      	mov	r1, r3
 80100c0:	9b04      	ldr	r3, [sp, #16]
 80100c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80100c6:	e7a1      	b.n	801000c <__kernel_rem_pio2+0x4e4>
 80100c8:	9c05      	ldr	r4, [sp, #20]
 80100ca:	ab48      	add	r3, sp, #288	; 0x120
 80100cc:	441c      	add	r4, r3
 80100ce:	2000      	movs	r0, #0
 80100d0:	2100      	movs	r1, #0
 80100d2:	2d00      	cmp	r5, #0
 80100d4:	da09      	bge.n	80100ea <__kernel_rem_pio2+0x5c2>
 80100d6:	f1bb 0f00 	cmp.w	fp, #0
 80100da:	d002      	beq.n	80100e2 <__kernel_rem_pio2+0x5ba>
 80100dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100e0:	4619      	mov	r1, r3
 80100e2:	9b04      	ldr	r3, [sp, #16]
 80100e4:	e9c3 0100 	strd	r0, r1, [r3]
 80100e8:	e790      	b.n	801000c <__kernel_rem_pio2+0x4e4>
 80100ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80100ee:	f7f0 f8cd 	bl	800028c <__adddf3>
 80100f2:	3d01      	subs	r5, #1
 80100f4:	e7ed      	b.n	80100d2 <__kernel_rem_pio2+0x5aa>
 80100f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80100fa:	f7f0 f8c7 	bl	800028c <__adddf3>
 80100fe:	3c01      	subs	r4, #1
 8010100:	e7c3      	b.n	801008a <__kernel_rem_pio2+0x562>
 8010102:	4602      	mov	r2, r0
 8010104:	460b      	mov	r3, r1
 8010106:	e7c8      	b.n	801009a <__kernel_rem_pio2+0x572>
 8010108:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801010c:	f7f0 f8be 	bl	800028c <__adddf3>
 8010110:	3401      	adds	r4, #1
 8010112:	e7cd      	b.n	80100b0 <__kernel_rem_pio2+0x588>
 8010114:	e9da 8900 	ldrd	r8, r9, [sl]
 8010118:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801011c:	9b00      	ldr	r3, [sp, #0]
 801011e:	3b01      	subs	r3, #1
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	4632      	mov	r2, r6
 8010124:	463b      	mov	r3, r7
 8010126:	4640      	mov	r0, r8
 8010128:	4649      	mov	r1, r9
 801012a:	f7f0 f8af 	bl	800028c <__adddf3>
 801012e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	4640      	mov	r0, r8
 8010138:	4649      	mov	r1, r9
 801013a:	f7f0 f8a5 	bl	8000288 <__aeabi_dsub>
 801013e:	4632      	mov	r2, r6
 8010140:	463b      	mov	r3, r7
 8010142:	f7f0 f8a3 	bl	800028c <__adddf3>
 8010146:	ed9d 7b06 	vldr	d7, [sp, #24]
 801014a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801014e:	ed8a 7b00 	vstr	d7, [sl]
 8010152:	e770      	b.n	8010036 <__kernel_rem_pio2+0x50e>
 8010154:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010158:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801015c:	4640      	mov	r0, r8
 801015e:	4632      	mov	r2, r6
 8010160:	463b      	mov	r3, r7
 8010162:	4649      	mov	r1, r9
 8010164:	f7f0 f892 	bl	800028c <__adddf3>
 8010168:	e9cd 0100 	strd	r0, r1, [sp]
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	4640      	mov	r0, r8
 8010172:	4649      	mov	r1, r9
 8010174:	f7f0 f888 	bl	8000288 <__aeabi_dsub>
 8010178:	4632      	mov	r2, r6
 801017a:	463b      	mov	r3, r7
 801017c:	f7f0 f886 	bl	800028c <__adddf3>
 8010180:	ed9d 7b00 	vldr	d7, [sp]
 8010184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010188:	ed84 7b00 	vstr	d7, [r4]
 801018c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010190:	e757      	b.n	8010042 <__kernel_rem_pio2+0x51a>
 8010192:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010196:	f7f0 f879 	bl	800028c <__adddf3>
 801019a:	3d01      	subs	r5, #1
 801019c:	e75c      	b.n	8010058 <__kernel_rem_pio2+0x530>
 801019e:	9b04      	ldr	r3, [sp, #16]
 80101a0:	9a04      	ldr	r2, [sp, #16]
 80101a2:	601f      	str	r7, [r3, #0]
 80101a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80101a8:	605c      	str	r4, [r3, #4]
 80101aa:	609d      	str	r5, [r3, #8]
 80101ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80101b0:	60d3      	str	r3, [r2, #12]
 80101b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101b6:	6110      	str	r0, [r2, #16]
 80101b8:	6153      	str	r3, [r2, #20]
 80101ba:	e727      	b.n	801000c <__kernel_rem_pio2+0x4e4>
 80101bc:	41700000 	.word	0x41700000
 80101c0:	3e700000 	.word	0x3e700000
 80101c4:	00000000 	.word	0x00000000

080101c8 <scalbn>:
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	ec55 4b10 	vmov	r4, r5, d0
 80101ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80101d2:	4606      	mov	r6, r0
 80101d4:	462b      	mov	r3, r5
 80101d6:	b999      	cbnz	r1, 8010200 <scalbn+0x38>
 80101d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101dc:	4323      	orrs	r3, r4
 80101de:	d03f      	beq.n	8010260 <scalbn+0x98>
 80101e0:	4b35      	ldr	r3, [pc, #212]	; (80102b8 <scalbn+0xf0>)
 80101e2:	4629      	mov	r1, r5
 80101e4:	ee10 0a10 	vmov	r0, s0
 80101e8:	2200      	movs	r2, #0
 80101ea:	f7f0 fa05 	bl	80005f8 <__aeabi_dmul>
 80101ee:	4b33      	ldr	r3, [pc, #204]	; (80102bc <scalbn+0xf4>)
 80101f0:	429e      	cmp	r6, r3
 80101f2:	4604      	mov	r4, r0
 80101f4:	460d      	mov	r5, r1
 80101f6:	da10      	bge.n	801021a <scalbn+0x52>
 80101f8:	a327      	add	r3, pc, #156	; (adr r3, 8010298 <scalbn+0xd0>)
 80101fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fe:	e01f      	b.n	8010240 <scalbn+0x78>
 8010200:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010204:	4291      	cmp	r1, r2
 8010206:	d10c      	bne.n	8010222 <scalbn+0x5a>
 8010208:	ee10 2a10 	vmov	r2, s0
 801020c:	4620      	mov	r0, r4
 801020e:	4629      	mov	r1, r5
 8010210:	f7f0 f83c 	bl	800028c <__adddf3>
 8010214:	4604      	mov	r4, r0
 8010216:	460d      	mov	r5, r1
 8010218:	e022      	b.n	8010260 <scalbn+0x98>
 801021a:	460b      	mov	r3, r1
 801021c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010220:	3936      	subs	r1, #54	; 0x36
 8010222:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010226:	4296      	cmp	r6, r2
 8010228:	dd0d      	ble.n	8010246 <scalbn+0x7e>
 801022a:	2d00      	cmp	r5, #0
 801022c:	a11c      	add	r1, pc, #112	; (adr r1, 80102a0 <scalbn+0xd8>)
 801022e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010232:	da02      	bge.n	801023a <scalbn+0x72>
 8010234:	a11c      	add	r1, pc, #112	; (adr r1, 80102a8 <scalbn+0xe0>)
 8010236:	e9d1 0100 	ldrd	r0, r1, [r1]
 801023a:	a319      	add	r3, pc, #100	; (adr r3, 80102a0 <scalbn+0xd8>)
 801023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010240:	f7f0 f9da 	bl	80005f8 <__aeabi_dmul>
 8010244:	e7e6      	b.n	8010214 <scalbn+0x4c>
 8010246:	1872      	adds	r2, r6, r1
 8010248:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801024c:	428a      	cmp	r2, r1
 801024e:	dcec      	bgt.n	801022a <scalbn+0x62>
 8010250:	2a00      	cmp	r2, #0
 8010252:	dd08      	ble.n	8010266 <scalbn+0x9e>
 8010254:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010258:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801025c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010260:	ec45 4b10 	vmov	d0, r4, r5
 8010264:	bd70      	pop	{r4, r5, r6, pc}
 8010266:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801026a:	da08      	bge.n	801027e <scalbn+0xb6>
 801026c:	2d00      	cmp	r5, #0
 801026e:	a10a      	add	r1, pc, #40	; (adr r1, 8010298 <scalbn+0xd0>)
 8010270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010274:	dac0      	bge.n	80101f8 <scalbn+0x30>
 8010276:	a10e      	add	r1, pc, #56	; (adr r1, 80102b0 <scalbn+0xe8>)
 8010278:	e9d1 0100 	ldrd	r0, r1, [r1]
 801027c:	e7bc      	b.n	80101f8 <scalbn+0x30>
 801027e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010282:	3236      	adds	r2, #54	; 0x36
 8010284:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010288:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801028c:	4620      	mov	r0, r4
 801028e:	4b0c      	ldr	r3, [pc, #48]	; (80102c0 <scalbn+0xf8>)
 8010290:	2200      	movs	r2, #0
 8010292:	e7d5      	b.n	8010240 <scalbn+0x78>
 8010294:	f3af 8000 	nop.w
 8010298:	c2f8f359 	.word	0xc2f8f359
 801029c:	01a56e1f 	.word	0x01a56e1f
 80102a0:	8800759c 	.word	0x8800759c
 80102a4:	7e37e43c 	.word	0x7e37e43c
 80102a8:	8800759c 	.word	0x8800759c
 80102ac:	fe37e43c 	.word	0xfe37e43c
 80102b0:	c2f8f359 	.word	0xc2f8f359
 80102b4:	81a56e1f 	.word	0x81a56e1f
 80102b8:	43500000 	.word	0x43500000
 80102bc:	ffff3cb0 	.word	0xffff3cb0
 80102c0:	3c900000 	.word	0x3c900000
 80102c4:	00000000 	.word	0x00000000

080102c8 <floor>:
 80102c8:	ec51 0b10 	vmov	r0, r1, d0
 80102cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80102d8:	2e13      	cmp	r6, #19
 80102da:	ee10 5a10 	vmov	r5, s0
 80102de:	ee10 8a10 	vmov	r8, s0
 80102e2:	460c      	mov	r4, r1
 80102e4:	dc31      	bgt.n	801034a <floor+0x82>
 80102e6:	2e00      	cmp	r6, #0
 80102e8:	da14      	bge.n	8010314 <floor+0x4c>
 80102ea:	a333      	add	r3, pc, #204	; (adr r3, 80103b8 <floor+0xf0>)
 80102ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f0:	f7ef ffcc 	bl	800028c <__adddf3>
 80102f4:	2200      	movs	r2, #0
 80102f6:	2300      	movs	r3, #0
 80102f8:	f7f0 fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 80102fc:	b138      	cbz	r0, 801030e <floor+0x46>
 80102fe:	2c00      	cmp	r4, #0
 8010300:	da53      	bge.n	80103aa <floor+0xe2>
 8010302:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010306:	4325      	orrs	r5, r4
 8010308:	d052      	beq.n	80103b0 <floor+0xe8>
 801030a:	4c2d      	ldr	r4, [pc, #180]	; (80103c0 <floor+0xf8>)
 801030c:	2500      	movs	r5, #0
 801030e:	4621      	mov	r1, r4
 8010310:	4628      	mov	r0, r5
 8010312:	e024      	b.n	801035e <floor+0x96>
 8010314:	4f2b      	ldr	r7, [pc, #172]	; (80103c4 <floor+0xfc>)
 8010316:	4137      	asrs	r7, r6
 8010318:	ea01 0307 	and.w	r3, r1, r7
 801031c:	4303      	orrs	r3, r0
 801031e:	d01e      	beq.n	801035e <floor+0x96>
 8010320:	a325      	add	r3, pc, #148	; (adr r3, 80103b8 <floor+0xf0>)
 8010322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010326:	f7ef ffb1 	bl	800028c <__adddf3>
 801032a:	2200      	movs	r2, #0
 801032c:	2300      	movs	r3, #0
 801032e:	f7f0 fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 8010332:	2800      	cmp	r0, #0
 8010334:	d0eb      	beq.n	801030e <floor+0x46>
 8010336:	2c00      	cmp	r4, #0
 8010338:	bfbe      	ittt	lt
 801033a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801033e:	4133      	asrlt	r3, r6
 8010340:	18e4      	addlt	r4, r4, r3
 8010342:	ea24 0407 	bic.w	r4, r4, r7
 8010346:	2500      	movs	r5, #0
 8010348:	e7e1      	b.n	801030e <floor+0x46>
 801034a:	2e33      	cmp	r6, #51	; 0x33
 801034c:	dd0b      	ble.n	8010366 <floor+0x9e>
 801034e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010352:	d104      	bne.n	801035e <floor+0x96>
 8010354:	ee10 2a10 	vmov	r2, s0
 8010358:	460b      	mov	r3, r1
 801035a:	f7ef ff97 	bl	800028c <__adddf3>
 801035e:	ec41 0b10 	vmov	d0, r0, r1
 8010362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010366:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801036a:	f04f 37ff 	mov.w	r7, #4294967295
 801036e:	40df      	lsrs	r7, r3
 8010370:	4238      	tst	r0, r7
 8010372:	d0f4      	beq.n	801035e <floor+0x96>
 8010374:	a310      	add	r3, pc, #64	; (adr r3, 80103b8 <floor+0xf0>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ff87 	bl	800028c <__adddf3>
 801037e:	2200      	movs	r2, #0
 8010380:	2300      	movs	r3, #0
 8010382:	f7f0 fbc9 	bl	8000b18 <__aeabi_dcmpgt>
 8010386:	2800      	cmp	r0, #0
 8010388:	d0c1      	beq.n	801030e <floor+0x46>
 801038a:	2c00      	cmp	r4, #0
 801038c:	da0a      	bge.n	80103a4 <floor+0xdc>
 801038e:	2e14      	cmp	r6, #20
 8010390:	d101      	bne.n	8010396 <floor+0xce>
 8010392:	3401      	adds	r4, #1
 8010394:	e006      	b.n	80103a4 <floor+0xdc>
 8010396:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801039a:	2301      	movs	r3, #1
 801039c:	40b3      	lsls	r3, r6
 801039e:	441d      	add	r5, r3
 80103a0:	45a8      	cmp	r8, r5
 80103a2:	d8f6      	bhi.n	8010392 <floor+0xca>
 80103a4:	ea25 0507 	bic.w	r5, r5, r7
 80103a8:	e7b1      	b.n	801030e <floor+0x46>
 80103aa:	2500      	movs	r5, #0
 80103ac:	462c      	mov	r4, r5
 80103ae:	e7ae      	b.n	801030e <floor+0x46>
 80103b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80103b4:	e7ab      	b.n	801030e <floor+0x46>
 80103b6:	bf00      	nop
 80103b8:	8800759c 	.word	0x8800759c
 80103bc:	7e37e43c 	.word	0x7e37e43c
 80103c0:	bff00000 	.word	0xbff00000
 80103c4:	000fffff 	.word	0x000fffff

080103c8 <_init>:
 80103c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ca:	bf00      	nop
 80103cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ce:	bc08      	pop	{r3}
 80103d0:	469e      	mov	lr, r3
 80103d2:	4770      	bx	lr

080103d4 <_fini>:
 80103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d6:	bf00      	nop
 80103d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103da:	bc08      	pop	{r3}
 80103dc:	469e      	mov	lr, r3
 80103de:	4770      	bx	lr
